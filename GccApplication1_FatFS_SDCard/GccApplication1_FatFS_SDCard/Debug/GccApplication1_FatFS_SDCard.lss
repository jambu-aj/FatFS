
GccApplication1_FatFS_SDCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000048c6  0000495a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fe  0080012a  0080012a  00004984  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00004984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000050d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aac  00000000  00000000  000051f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  00007ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001063  00000000  00000000  00008418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c38  00000000  00000000  0000947c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000733  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005919  00000000  00000000  0000a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__vector_20>
      54:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ec       	ldi	r30, 0xC6	; 198
      a0:	f8 e4       	ldi	r31, 0x48	; 72
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	16 e0       	ldi	r17, 0x06	; 6
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 32       	cpi	r26, 0x28	; 40
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 56 23 	call	0x46ac	; 0x46ac <main>
      c6:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
      ce:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~(SS|MOSI|SCK);	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
      d0:	84 b1       	in	r24, 0x04	; 4
      d2:	8f 74       	andi	r24, 0x4F	; 79
      d4:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(SS|MOSI|SCK);
      d6:	85 b1       	in	r24, 0x05	; 5
      d8:	8f 74       	andi	r24, 0x4F	; 79
      da:	85 b9       	out	0x05, r24	; 5
// 	{	/* Remove this block if no socket power control */
// 		PORTE |= _BV(7);		/* Socket power off (PE7=high) */
// 		for (Timer1 = 20; Timer1; );	/* Wait for 20ms */
// 	}
}
      dc:	08 95       	ret

000000de <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
      de:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
      e0:	0d b4       	in	r0, 0x2d	; 45
      e2:	07 fe       	sbrs	r0, 7
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <xchg_spi+0x2>
	return SPDR;
      e6:	8e b5       	in	r24, 0x2e	; 46
}
      e8:	08 95       	ret

000000ea <wait_ready>:
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
      ea:	82 e3       	ldi	r24, 0x32	; 50
      ec:	80 93 2a 01 	sts	0x012A, r24
	do
		d = xchg_spi(0xFF);
      f0:	8f ef       	ldi	r24, 0xFF	; 255
      f2:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	while (d != 0xFF && Timer2);
      f6:	8f 3f       	cpi	r24, 0xFF	; 255
      f8:	21 f0       	breq	.+8      	; 0x102 <wait_ready+0x18>
      fa:	90 91 2a 01 	lds	r25, 0x012A
      fe:	99 23       	and	r25, r25
     100:	b9 f7       	brne	.-18     	; 0xf0 <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
     102:	21 e0       	ldi	r18, 0x01	; 1
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	8f 3f       	cpi	r24, 0xFF	; 255
     108:	11 f0       	breq	.+4      	; 0x10e <wait_ready+0x24>
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
}
     10e:	82 2f       	mov	r24, r18
     110:	93 2f       	mov	r25, r19
     112:	08 95       	ret

00000114 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     114:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
}
     11c:	08 95       	ret

0000011e <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     11e:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
     126:	0e 94 75 00 	call	0xea	; 0xea <wait_ready>
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	29 f4       	brne	.+10     	; 0x138 <select+0x1a>
	deselect();
     12e:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>
	return 0;	/* Timeout */
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
     13c:	08 95       	ret

0000013e <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
     148:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     14a:	84 e1       	ldi	r24, 0x14	; 20
     14c:	80 93 2b 01 	sts	0x012B, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     156:	8f 3f       	cpi	r24, 0xFF	; 255
     158:	39 f4       	brne	.+14     	; 0x168 <rcvr_datablock+0x2a>
     15a:	80 91 2b 01 	lds	r24, 0x012B
     15e:	88 23       	and	r24, r24
     160:	b9 f7       	brne	.-18     	; 0x150 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	1e c0       	rjmp	.+60     	; 0x1a4 <rcvr_datablock+0x66>
     168:	8e 3f       	cpi	r24, 0xFE	; 254
     16a:	d1 f4       	brne	.+52     	; 0x1a0 <rcvr_datablock+0x62>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	8e bd       	out	0x2e, r24	; 46
     170:	0d b4       	in	r0, 0x2d	; 45
     172:	07 fe       	sbrs	r0, 7
     174:	fd cf       	rjmp	.-6      	; 0x170 <rcvr_datablock+0x32>
     176:	9e b5       	in	r25, 0x2e	; 46
     178:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     17a:	8e bd       	out	0x2e, r24	; 46
     17c:	0d b4       	in	r0, 0x2d	; 45
     17e:	07 fe       	sbrs	r0, 7
     180:	fd cf       	rjmp	.-6      	; 0x17c <rcvr_datablock+0x3e>
     182:	9e b5       	in	r25, 0x2e	; 46
     184:	99 83       	std	Y+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     186:	22 96       	adiw	r28, 0x02	; 2
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
	} while (cnt -= 2);
     188:	02 50       	subi	r16, 0x02	; 2
     18a:	10 40       	sbci	r17, 0x00	; 0
     18c:	81 f7       	brne	.-32     	; 0x16e <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     18e:	8f ef       	ldi	r24, 0xFF	; 255
     190:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	xchg_spi(0xFF);
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>

	return 1;						/* Return with success */
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	08 95       	ret

000001ae <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	ec 01       	movw	r28, r24
     1b6:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready()) return 0;
     1b8:	0e 94 75 00 	call	0xea	; 0xea <wait_ready>
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	41 f1       	breq	.+80     	; 0x210 <xmit_datablock+0x62>

	xchg_spi(token);					/* Xmit data token */
     1c0:	81 2f       	mov	r24, r17
     1c2:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     1c6:	1d 3f       	cpi	r17, 0xFD	; 253
     1c8:	31 f1       	breq	.+76     	; 0x216 <xmit_datablock+0x68>
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1ca:	ce 01       	movw	r24, r28
     1cc:	80 50       	subi	r24, 0x00	; 0
     1ce:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1d0:	28 81       	ld	r18, Y
     1d2:	2e bd       	out	0x2e, r18	; 46
     1d4:	0d b4       	in	r0, 0x2d	; 45
     1d6:	07 fe       	sbrs	r0, 7
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <xmit_datablock+0x26>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1da:	29 81       	ldd	r18, Y+1	; 0x01
     1dc:	2e bd       	out	0x2e, r18	; 46
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1de:	22 96       	adiw	r28, 0x02	; 2
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1e0:	0d b4       	in	r0, 0x2d	; 45
     1e2:	07 fe       	sbrs	r0, 7
     1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <xmit_datablock+0x32>
	} while (cnt -= 2);
     1e6:	8c 17       	cp	r24, r28
     1e8:	9d 07       	cpc	r25, r29
     1ea:	91 f7       	brne	.-28     	; 0x1d0 <xmit_datablock+0x22>
	if (!wait_ready()) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
		xchg_spi(0xFF);
     1f2:	8f ef       	ldi	r24, 0xFF	; 255
     1f4:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     1fe:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     200:	21 e0       	ldi	r18, 0x01	; 1
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	85 30       	cpi	r24, 0x05	; 5
     206:	11 f0       	breq	.+4      	; 0x20c <xmit_datablock+0x5e>
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE resp;


	if (!wait_ready()) return 0;
     20c:	c9 01       	movw	r24, r18
     20e:	05 c0       	rjmp	.+10     	; 0x21a <xmit_datablock+0x6c>
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <xmit_datablock+0x6c>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
}
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	c8 2f       	mov	r28, r24
     22e:	d4 2f       	mov	r29, r20
     230:	15 2f       	mov	r17, r21
     232:	06 2f       	mov	r16, r22
     234:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     236:	88 23       	and	r24, r24
     238:	4c f4       	brge	.+18     	; 0x24c <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     23a:	87 e3       	ldi	r24, 0x37	; 55
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	ba 01       	movw	r22, r20
     242:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
		if (res > 1) return res;
     246:	82 30       	cpi	r24, 0x02	; 2
     248:	68 f5       	brcc	.+90     	; 0x2a4 <send_cmd+0x82>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     24a:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
     24c:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>
	if (!select()) return 0xFF;
     250:	0e 94 8f 00 	call	0x11e	; 0x11e <select>
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	29 f1       	breq	.+74     	; 0x2a2 <send_cmd+0x80>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     258:	8c 2f       	mov	r24, r28
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     260:	8f 2d       	mov	r24, r15
     262:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     266:	80 2f       	mov	r24, r16
     268:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     26c:	81 2f       	mov	r24, r17
     26e:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     272:	8d 2f       	mov	r24, r29
     274:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     278:	cc 23       	and	r28, r28
     27a:	f1 f0       	breq	.+60     	; 0x2b8 <send_cmd+0x96>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     27c:	c8 30       	cpi	r28, 0x08	; 8
     27e:	c1 f0       	breq	.+48     	; 0x2b0 <send_cmd+0x8e>
	xchg_spi(n);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     286:	cc 30       	cpi	r28, 0x0C	; 12
     288:	19 f4       	brne	.+6      	; 0x290 <send_cmd+0x6e>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     290:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     292:	8f ef       	ldi	r24, 0xFF	; 255
     294:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
	while ((res & 0x80) && --n);
     298:	88 23       	and	r24, r24
     29a:	24 f4       	brge	.+8      	; 0x2a4 <send_cmd+0x82>
     29c:	c1 50       	subi	r28, 0x01	; 1
     29e:	c9 f7       	brne	.-14     	; 0x292 <send_cmd+0x70>
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <send_cmd+0x82>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	08 95       	ret
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     2b0:	87 e8       	ldi	r24, 0x87	; 135
     2b2:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     2b6:	ec cf       	rjmp	.-40     	; 0x290 <send_cmd+0x6e>
     2b8:	85 e9       	ldi	r24, 0x95	; 149
     2ba:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     2be:	e8 cf       	rjmp	.-48     	; 0x290 <send_cmd+0x6e>

000002c0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <disk_initialize+0x12>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <disk_initialize+0x14>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     2d8:	88 23       	and	r24, r24
     2da:	09 f0       	breq	.+2      	; 0x2de <disk_initialize+0x1e>
     2dc:	aa c0       	rjmp	.+340    	; 0x432 <disk_initialize+0x172>
	power_off();						/* Turn off the socket power to reset the card */
     2de:	0e 94 67 00 	call	0xce	; 0xce <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     2e2:	80 91 00 01 	lds	r24, 0x0100
     2e6:	81 ff       	sbrs	r24, 1
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <disk_initialize+0x30>
     2ea:	80 91 00 01 	lds	r24, 0x0100
     2ee:	a2 c0       	rjmp	.+324    	; 0x434 <disk_initialize+0x174>
// 		PORTE &= ~_BV(7);	/* Socket power on (PE7=low) */
// 		DDRE |= _BV(7);
// 		for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
// 	}

	PORTB |= SS|MOSI;	/* Configure SCK/MOSI/CS as output */
     2f0:	85 b1       	in	r24, 0x05	; 5
     2f2:	80 63       	ori	r24, 0x30	; 48
     2f4:	85 b9       	out	0x05, r24	; 5
	DDRB  |= SS|MOSI|SCK;
     2f6:	84 b1       	in	r24, 0x04	; 4
     2f8:	80 6b       	ori	r24, 0xB0	; 176
     2fa:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     2fc:	81 e5       	ldi	r24, 0x51	; 81
     2fe:	8c bd       	out	0x2c, r24	; 44

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     300:	82 e5       	ldi	r24, 0x52	; 82
     302:	8c bd       	out	0x2c, r24	; 44
     304:	0a e0       	ldi	r16, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     30c:	01 50       	subi	r16, 0x01	; 1
     30e:	d9 f7       	brne	.-10     	; 0x306 <disk_initialize+0x46>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	ba 01       	movw	r22, r20
     318:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	09 f0       	breq	.+2      	; 0x322 <disk_initialize+0x62>
     320:	9c c0       	rjmp	.+312    	; 0x45a <disk_initialize+0x19a>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     322:	84 e6       	ldi	r24, 0x64	; 100
     324:	80 93 2b 01 	sts	0x012B, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     328:	88 e0       	ldi	r24, 0x08	; 8
     32a:	4a ea       	ldi	r20, 0xAA	; 170
     32c:	51 e0       	ldi	r21, 0x01	; 1
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	09 f0       	breq	.+2      	; 0x33c <disk_initialize+0x7c>
     33a:	42 c0       	rjmp	.+132    	; 0x3c0 <disk_initialize+0x100>
     33c:	6e 01       	movw	r12, r28
     33e:	08 94       	sec
     340:	c1 1c       	adc	r12, r1
     342:	d1 1c       	adc	r13, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
     344:	8e 01       	movw	r16, r28
     346:	0b 5f       	subi	r16, 0xFB	; 251
     348:	1f 4f       	sbci	r17, 0xFF	; 255
     34a:	76 01       	movw	r14, r12

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     352:	f7 01       	movw	r30, r14
     354:	81 93       	st	Z+, r24
     356:	7f 01       	movw	r14, r30
     358:	e0 17       	cp	r30, r16
     35a:	f1 07       	cpc	r31, r17
     35c:	b9 f7       	brne	.-18     	; 0x34c <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <disk_initialize+0xa6>
     364:	7a c0       	rjmp	.+244    	; 0x45a <disk_initialize+0x19a>
     366:	8c 81       	ldd	r24, Y+4	; 0x04
     368:	8a 3a       	cpi	r24, 0xAA	; 170
     36a:	09 f0       	breq	.+2      	; 0x36e <disk_initialize+0xae>
     36c:	76 c0       	rjmp	.+236    	; 0x45a <disk_initialize+0x19a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     36e:	80 91 2b 01 	lds	r24, 0x012B
     372:	88 23       	and	r24, r24
     374:	49 f0       	breq	.+18     	; 0x388 <disk_initialize+0xc8>
     376:	89 ea       	ldi	r24, 0xA9	; 169
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e4       	ldi	r23, 0x40	; 64
     380:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     384:	88 23       	and	r24, r24
     386:	99 f7       	brne	.-26     	; 0x36e <disk_initialize+0xae>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     388:	80 91 2b 01 	lds	r24, 0x012B
     38c:	88 23       	and	r24, r24
     38e:	09 f4       	brne	.+2      	; 0x392 <disk_initialize+0xd2>
     390:	64 c0       	rjmp	.+200    	; 0x45a <disk_initialize+0x19a>
     392:	8a e3       	ldi	r24, 0x3A	; 58
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	ba 01       	movw	r22, r20
     39a:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     39e:	88 23       	and	r24, r24
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <disk_initialize+0xe4>
     3a2:	5b c0       	rjmp	.+182    	; 0x45a <disk_initialize+0x19a>
     3a4:	04 e0       	ldi	r16, 0x04	; 4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     3ac:	f6 01       	movw	r30, r12
     3ae:	81 93       	st	Z+, r24
     3b0:	6f 01       	movw	r12, r30
     3b2:	01 50       	subi	r16, 0x01	; 1
     3b4:	c1 f7       	brne	.-16     	; 0x3a6 <disk_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	86 fd       	sbrc	r24, 6
     3ba:	49 c0       	rjmp	.+146    	; 0x44e <disk_initialize+0x18e>
     3bc:	84 e0       	ldi	r24, 0x04	; 4
     3be:	48 c0       	rjmp	.+144    	; 0x450 <disk_initialize+0x190>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     3c0:	89 ea       	ldi	r24, 0xA9	; 169
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	ba 01       	movw	r22, r20
     3c8:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	18 f4       	brcc	.+6      	; 0x3d6 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     3d0:	12 e0       	ldi	r17, 0x02	; 2
     3d2:	09 ea       	ldi	r16, 0xA9	; 169
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <disk_initialize+0x11a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     3d6:	11 e0       	ldi	r17, 0x01	; 1
     3d8:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     3da:	80 91 2b 01 	lds	r24, 0x012B
     3de:	88 23       	and	r24, r24
     3e0:	41 f0       	breq	.+16     	; 0x3f2 <disk_initialize+0x132>
     3e2:	80 2f       	mov	r24, r16
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	ba 01       	movw	r22, r20
     3ea:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     3ee:	88 23       	and	r24, r24
     3f0:	a1 f7       	brne	.-24     	; 0x3da <disk_initialize+0x11a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     3f2:	80 91 2b 01 	lds	r24, 0x012B
     3f6:	88 23       	and	r24, r24
     3f8:	81 f1       	breq	.+96     	; 0x45a <disk_initialize+0x19a>
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	52 e0       	ldi	r21, 0x02	; 2
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     408:	88 23       	and	r24, r24
     40a:	39 f5       	brne	.+78     	; 0x45a <disk_initialize+0x19a>
				ty = 0;
		}
	}
	CardType = ty;
     40c:	10 93 2c 01 	sts	0x012C, r17
	deselect();
     410:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>

	if (ty) {			/* Initialization succeded */
     414:	11 23       	and	r17, r17
     416:	41 f0       	breq	.+16     	; 0x428 <disk_initialize+0x168>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     418:	80 91 00 01 	lds	r24, 0x0100
     41c:	8e 7f       	andi	r24, 0xFE	; 254
     41e:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
     422:	80 e5       	ldi	r24, 0x50	; 80
     424:	8c bd       	out	0x2c, r24	; 44
     426:	02 c0       	rjmp	.+4      	; 0x42c <disk_initialize+0x16c>
	} else {			/* Initialization failed */
		power_off();
     428:	0e 94 67 00 	call	0xce	; 0xce <power_off>
	}

	return Stat;
     42c:	80 91 00 01 	lds	r24, 0x0100
     430:	01 c0       	rjmp	.+2      	; 0x434 <disk_initialize+0x174>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     432:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	08 95       	ret
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     44e:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     450:	80 93 2c 01 	sts	0x012C, r24
	deselect();
     454:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>
     458:	df cf       	rjmp	.-66     	; 0x418 <disk_initialize+0x158>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     45a:	10 92 2c 01 	sts	0x012C, r1
	deselect();
     45e:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>
     462:	e2 cf       	rjmp	.-60     	; 0x428 <disk_initialize+0x168>

00000464 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     464:	88 23       	and	r24, r24
     466:	19 f4       	brne	.+6      	; 0x46e <disk_status+0xa>
	return Stat;
     468:	80 91 00 01 	lds	r24, 0x0100
     46c:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     46e:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     470:	08 95       	ret

00000472 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     47a:	88 23       	and	r24, r24
     47c:	09 f0       	breq	.+2      	; 0x480 <disk_read+0xe>
     47e:	46 c0       	rjmp	.+140    	; 0x50c <disk_read+0x9a>
     480:	00 23       	and	r16, r16
     482:	09 f4       	brne	.+2      	; 0x486 <disk_read+0x14>
     484:	45 c0       	rjmp	.+138    	; 0x510 <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     486:	80 91 00 01 	lds	r24, 0x0100
     48a:	80 fd       	sbrc	r24, 0
     48c:	43 c0       	rjmp	.+134    	; 0x514 <disk_read+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     48e:	80 91 2c 01 	lds	r24, 0x012C
     492:	83 fd       	sbrc	r24, 3
     494:	09 c0       	rjmp	.+18     	; 0x4a8 <disk_read+0x36>
     496:	01 2e       	mov	r0, r17
     498:	19 e0       	ldi	r17, 0x09	; 9
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	44 1f       	adc	r20, r20
     4a0:	55 1f       	adc	r21, r21
     4a2:	1a 95       	dec	r17
     4a4:	d1 f7       	brne	.-12     	; 0x49a <disk_read+0x28>
     4a6:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
     4a8:	01 30       	cpi	r16, 0x01	; 1
     4aa:	79 f4       	brne	.+30     	; 0x4ca <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     4ac:	81 e1       	ldi	r24, 0x11	; 17
     4ae:	ba 01       	movw	r22, r20
     4b0:	a9 01       	movw	r20, r18
     4b2:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     4b6:	88 23       	and	r24, r24
     4b8:	11 f5       	brne	.+68     	; 0x4fe <disk_read+0x8c>
			&& rcvr_datablock(buff, 512))
     4ba:	ce 01       	movw	r24, r28
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	d1 f4       	brne	.+52     	; 0x4fc <disk_read+0x8a>
     4c8:	1a c0       	rjmp	.+52     	; 0x4fe <disk_read+0x8c>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     4ca:	82 e1       	ldi	r24, 0x12	; 18
     4cc:	ba 01       	movw	r22, r20
     4ce:	a9 01       	movw	r20, r18
     4d0:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     4d4:	88 23       	and	r24, r24
     4d6:	99 f4       	brne	.+38     	; 0x4fe <disk_read+0x8c>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     4d8:	ce 01       	movw	r24, r28
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	72 e0       	ldi	r23, 0x02	; 2
     4de:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	21 f0       	breq	.+8      	; 0x4ee <disk_read+0x7c>
				buff += 512;
     4e6:	c0 50       	subi	r28, 0x00	; 0
     4e8:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     4ea:	01 50       	subi	r16, 0x01	; 1
     4ec:	a9 f7       	brne	.-22     	; 0x4d8 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     4ee:	8c e0       	ldi	r24, 0x0C	; 12
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	ba 01       	movw	r22, r20
     4f6:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <disk_read+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
     4fc:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
     4fe:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>

	return count ? RES_ERROR : RES_OK;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	00 23       	and	r16, r16
     506:	39 f4       	brne	.+14     	; 0x516 <disk_read+0xa4>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	05 c0       	rjmp	.+10     	; 0x516 <disk_read+0xa4>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     50c:	84 e0       	ldi	r24, 0x04	; 4
     50e:	03 c0       	rjmp	.+6      	; 0x516 <disk_read+0xa4>
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	01 c0       	rjmp	.+2      	; 0x516 <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     514:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	0f 91       	pop	r16
     51c:	08 95       	ret

0000051e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	eb 01       	movw	r28, r22
     52e:	69 01       	movw	r12, r18
     530:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     532:	88 23       	and	r24, r24
     534:	09 f0       	breq	.+2      	; 0x538 <disk_write+0x1a>
     536:	57 c0       	rjmp	.+174    	; 0x5e6 <disk_write+0xc8>
     538:	00 23       	and	r16, r16
     53a:	09 f4       	brne	.+2      	; 0x53e <disk_write+0x20>
     53c:	56 c0       	rjmp	.+172    	; 0x5ea <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     53e:	80 91 00 01 	lds	r24, 0x0100
     542:	80 fd       	sbrc	r24, 0
     544:	54 c0       	rjmp	.+168    	; 0x5ee <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     546:	80 91 00 01 	lds	r24, 0x0100
     54a:	82 fd       	sbrc	r24, 2
     54c:	52 c0       	rjmp	.+164    	; 0x5f2 <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     54e:	80 91 2c 01 	lds	r24, 0x012C
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	83 fd       	sbrc	r24, 3
     556:	09 c0       	rjmp	.+18     	; 0x56a <disk_write+0x4c>
     558:	0b 2e       	mov	r0, r27
     55a:	b9 e0       	ldi	r27, 0x09	; 9
     55c:	cc 0c       	add	r12, r12
     55e:	dd 1c       	adc	r13, r13
     560:	ee 1c       	adc	r14, r14
     562:	ff 1c       	adc	r15, r15
     564:	ba 95       	dec	r27
     566:	d1 f7       	brne	.-12     	; 0x55c <disk_write+0x3e>
     568:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     56a:	01 30       	cpi	r16, 0x01	; 1
     56c:	71 f4       	brne	.+28     	; 0x58a <disk_write+0x6c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     56e:	88 e1       	ldi	r24, 0x18	; 24
     570:	b7 01       	movw	r22, r14
     572:	a6 01       	movw	r20, r12
     574:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     578:	88 23       	and	r24, r24
     57a:	71 f5       	brne	.+92     	; 0x5d8 <disk_write+0xba>
			&& xmit_datablock(buff, 0xFE))
     57c:	ce 01       	movw	r24, r28
     57e:	6e ef       	ldi	r22, 0xFE	; 254
     580:	0e 94 d7 00 	call	0x1ae	; 0x1ae <xmit_datablock>
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	29 f5       	brne	.+74     	; 0x5d2 <disk_write+0xb4>
     588:	27 c0       	rjmp	.+78     	; 0x5d8 <disk_write+0xba>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     58a:	86 70       	andi	r24, 0x06	; 6
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	39 f0       	breq	.+14     	; 0x5a0 <disk_write+0x82>
     592:	40 2f       	mov	r20, r16
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	87 e9       	ldi	r24, 0x97	; 151
     59c:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     5a0:	89 e1       	ldi	r24, 0x19	; 25
     5a2:	b7 01       	movw	r22, r14
     5a4:	a6 01       	movw	r20, r12
     5a6:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     5aa:	88 23       	and	r24, r24
     5ac:	a9 f4       	brne	.+42     	; 0x5d8 <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     5ae:	ce 01       	movw	r24, r28
     5b0:	6c ef       	ldi	r22, 0xFC	; 252
     5b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <xmit_datablock>
     5b6:	00 97       	sbiw	r24, 0x00	; 0
     5b8:	21 f0       	breq	.+8      	; 0x5c2 <disk_write+0xa4>
				buff += 512;
     5ba:	c0 50       	subi	r28, 0x00	; 0
     5bc:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     5be:	01 50       	subi	r16, 0x01	; 1
     5c0:	b1 f7       	brne	.-20     	; 0x5ae <disk_write+0x90>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	6d ef       	ldi	r22, 0xFD	; 253
     5c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <xmit_datablock>
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <disk_write+0xb8>
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <disk_write+0xba>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
     5d6:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
     5d8:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>

	return count ? RES_ERROR : RES_OK;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	00 23       	and	r16, r16
     5e0:	49 f4       	brne	.+18     	; 0x5f4 <disk_write+0xd6>
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <disk_write+0xd6>
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     5f2:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	08 95       	ret

00000604 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	60 97       	sbiw	r28, 0x10	; 16
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     622:	88 23       	and	r24, r24
     624:	09 f0       	breq	.+2      	; 0x628 <disk_ioctl+0x24>
     626:	ce c1       	rjmp	.+924    	; 0x9c4 <disk_ioctl+0x3c0>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     628:	65 30       	cpi	r22, 0x05	; 5
     62a:	89 f4       	brne	.+34     	; 0x64e <disk_ioctl+0x4a>
		switch (ptr[0]) {
     62c:	fa 01       	movw	r30, r20
     62e:	80 81       	ld	r24, Z
     630:	88 23       	and	r24, r24
     632:	21 f0       	breq	.+8      	; 0x63c <disk_ioctl+0x38>
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	09 f0       	breq	.+2      	; 0x63a <disk_ioctl+0x36>
     638:	c7 c1       	rjmp	.+910    	; 0x9c8 <disk_ioctl+0x3c4>
     63a:	04 c0       	rjmp	.+8      	; 0x644 <disk_ioctl+0x40>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
     63c:	0e 94 67 00 	call	0xce	; 0xce <power_off>
			res = RES_OK;
     640:	00 e0       	ldi	r16, 0x00	; 0
			break;
     642:	c5 c1       	rjmp	.+906    	; 0x9ce <disk_ioctl+0x3ca>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	fa 01       	movw	r30, r20
     648:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
     64a:	00 e0       	ldi	r16, 0x00	; 0
			break;
     64c:	c0 c1       	rjmp	.+896    	; 0x9ce <disk_ioctl+0x3ca>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     64e:	80 91 00 01 	lds	r24, 0x0100
     652:	80 fd       	sbrc	r24, 0
     654:	bb c1       	rjmp	.+886    	; 0x9cc <disk_ioctl+0x3c8>

		switch (ctrl) {
     656:	6a 30       	cpi	r22, 0x0A	; 10
     658:	09 f4       	brne	.+2      	; 0x65c <disk_ioctl+0x58>
     65a:	3e c1       	rjmp	.+636    	; 0x8d8 <disk_ioctl+0x2d4>
     65c:	6b 30       	cpi	r22, 0x0B	; 11
     65e:	58 f4       	brcc	.+22     	; 0x676 <disk_ioctl+0x72>
     660:	61 30       	cpi	r22, 0x01	; 1
     662:	f9 f0       	breq	.+62     	; 0x6a2 <disk_ioctl+0x9e>
     664:	61 30       	cpi	r22, 0x01	; 1
     666:	a0 f0       	brcs	.+40     	; 0x690 <disk_ioctl+0x8c>
     668:	62 30       	cpi	r22, 0x02	; 2
     66a:	09 f4       	brne	.+2      	; 0x66e <disk_ioctl+0x6a>
     66c:	96 c0       	rjmp	.+300    	; 0x79a <disk_ioctl+0x196>
     66e:	63 30       	cpi	r22, 0x03	; 3
     670:	09 f0       	breq	.+2      	; 0x674 <disk_ioctl+0x70>
     672:	88 c1       	rjmp	.+784    	; 0x984 <disk_ioctl+0x380>
     674:	99 c0       	rjmp	.+306    	; 0x7a8 <disk_ioctl+0x1a4>
     676:	6c 30       	cpi	r22, 0x0C	; 12
     678:	09 f4       	brne	.+2      	; 0x67c <disk_ioctl+0x78>
     67a:	47 c1       	rjmp	.+654    	; 0x90a <disk_ioctl+0x306>
     67c:	6c 30       	cpi	r22, 0x0C	; 12
     67e:	08 f4       	brcc	.+2      	; 0x682 <disk_ioctl+0x7e>
     680:	31 c1       	rjmp	.+610    	; 0x8e4 <disk_ioctl+0x2e0>
     682:	6d 30       	cpi	r22, 0x0D	; 13
     684:	09 f4       	brne	.+2      	; 0x688 <disk_ioctl+0x84>
     686:	54 c1       	rjmp	.+680    	; 0x930 <disk_ioctl+0x32c>
     688:	6e 30       	cpi	r22, 0x0E	; 14
     68a:	09 f0       	breq	.+2      	; 0x68e <disk_ioctl+0x8a>
     68c:	7b c1       	rjmp	.+758    	; 0x984 <disk_ioctl+0x380>
     68e:	66 c1       	rjmp	.+716    	; 0x95c <disk_ioctl+0x358>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     690:	0e 94 8f 00 	call	0x11e	; 0x11e <select>
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	09 f4       	brne	.+2      	; 0x69a <disk_ioctl+0x96>
     698:	77 c1       	rjmp	.+750    	; 0x988 <disk_ioctl+0x384>
				deselect();
     69a:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>
				res = RES_OK;
     69e:	00 e0       	ldi	r16, 0x00	; 0
     6a0:	8e c1       	rjmp	.+796    	; 0x9be <disk_ioctl+0x3ba>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     6a2:	89 e0       	ldi	r24, 0x09	; 9
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	ba 01       	movw	r22, r20
     6aa:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     6ae:	88 23       	and	r24, r24
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <disk_ioctl+0xb0>
     6b2:	6c c1       	rjmp	.+728    	; 0x98c <disk_ioctl+0x388>
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	60 e1       	ldi	r22, 0x10	; 16
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <disk_ioctl+0xc2>
     6c4:	65 c1       	rjmp	.+714    	; 0x990 <disk_ioctl+0x38c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	82 95       	swap	r24
     6ca:	86 95       	lsr	r24
     6cc:	86 95       	lsr	r24
     6ce:	83 70       	andi	r24, 0x03	; 3
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	51 f5       	brne	.+84     	; 0x728 <disk_ioctl+0x124>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     6d4:	48 85       	ldd	r20, Y+8	; 0x08
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	4f 73       	andi	r20, 0x3F	; 63
     6de:	50 70       	andi	r21, 0x00	; 0
     6e0:	60 70       	andi	r22, 0x00	; 0
     6e2:	70 70       	andi	r23, 0x00	; 0
     6e4:	ba 01       	movw	r22, r20
     6e6:	55 27       	eor	r21, r21
     6e8:	44 27       	eor	r20, r20
     6ea:	4f 5f       	subi	r20, 0xFF	; 255
     6ec:	5f 4f       	sbci	r21, 0xFF	; 255
     6ee:	6f 4f       	sbci	r22, 0xFF	; 255
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	99 85       	ldd	r25, Y+9	; 0x09
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	2a 85       	ldd	r18, Y+10	; 0x0a
     6f8:	82 0f       	add	r24, r18
     6fa:	91 1d       	adc	r25, r1
     6fc:	a0 e0       	ldi	r26, 0x00	; 0
     6fe:	b0 e0       	ldi	r27, 0x00	; 0
     700:	84 0f       	add	r24, r20
     702:	95 1f       	adc	r25, r21
     704:	a6 1f       	adc	r26, r22
     706:	b7 1f       	adc	r27, r23
					*(DWORD*)buff = csize << 10;
     708:	07 2e       	mov	r0, r23
     70a:	7a e0       	ldi	r23, 0x0A	; 10
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	aa 1f       	adc	r26, r26
     712:	bb 1f       	adc	r27, r27
     714:	7a 95       	dec	r23
     716:	d1 f7       	brne	.-12     	; 0x70c <disk_ioctl+0x108>
     718:	70 2d       	mov	r23, r0
     71a:	f7 01       	movw	r30, r14
     71c:	80 83       	st	Z, r24
     71e:	91 83       	std	Z+1, r25	; 0x01
     720:	a2 83       	std	Z+2, r26	; 0x02
     722:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
     724:	00 e0       	ldi	r16, 0x00	; 0
     726:	4b c1       	rjmp	.+662    	; 0x9be <disk_ioctl+0x3ba>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     728:	29 85       	ldd	r18, Y+9	; 0x09
     72a:	22 95       	swap	r18
     72c:	26 95       	lsr	r18
     72e:	26 95       	lsr	r18
     730:	23 70       	andi	r18, 0x03	; 3
     732:	88 85       	ldd	r24, Y+8	; 0x08
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	82 0f       	add	r24, r18
     740:	91 1d       	adc	r25, r1
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	2f 81       	ldd	r18, Y+7	; 0x07
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	23 70       	andi	r18, 0x03	; 3
     74a:	30 70       	andi	r19, 0x00	; 0
     74c:	32 2f       	mov	r19, r18
     74e:	22 27       	eor	r18, r18
     750:	33 0f       	add	r19, r19
     752:	33 0f       	add	r19, r19
     754:	82 0f       	add	r24, r18
     756:	93 1f       	adc	r25, r19
     758:	ac 01       	movw	r20, r24
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	9f 70       	andi	r25, 0x0F	; 15
     762:	8b 85       	ldd	r24, Y+11	; 0x0b
     764:	88 1f       	adc	r24, r24
     766:	88 27       	eor	r24, r24
     768:	88 1f       	adc	r24, r24
     76a:	98 0f       	add	r25, r24
     76c:	9e 5f       	subi	r25, 0xFE	; 254
     76e:	8a 85       	ldd	r24, Y+10	; 0x0a
     770:	83 70       	andi	r24, 0x03	; 3
     772:	88 0f       	add	r24, r24
     774:	89 0f       	add	r24, r25
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	09 97       	sbiw	r24, 0x09	; 9
     77a:	8a 01       	movw	r16, r20
     77c:	9b 01       	movw	r18, r22
     77e:	04 c0       	rjmp	.+8      	; 0x788 <disk_ioctl+0x184>
     780:	00 0f       	add	r16, r16
     782:	11 1f       	adc	r17, r17
     784:	22 1f       	adc	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	8a 95       	dec	r24
     78a:	d2 f7       	brpl	.-12     	; 0x780 <disk_ioctl+0x17c>
     78c:	f7 01       	movw	r30, r14
     78e:	00 83       	st	Z, r16
     790:	11 83       	std	Z+1, r17	; 0x01
     792:	22 83       	std	Z+2, r18	; 0x02
     794:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
     796:	00 e0       	ldi	r16, 0x00	; 0
     798:	12 c1       	rjmp	.+548    	; 0x9be <disk_ioctl+0x3ba>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	fa 01       	movw	r30, r20
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	80 83       	st	Z, r24
			res = RES_OK;
     7a4:	00 e0       	ldi	r16, 0x00	; 0
			break;
     7a6:	0b c1       	rjmp	.+534    	; 0x9be <disk_ioctl+0x3ba>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
     7a8:	00 91 2c 01 	lds	r16, 0x012C
     7ac:	02 ff       	sbrs	r16, 2
     7ae:	2f c0       	rjmp	.+94     	; 0x80e <disk_ioctl+0x20a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     7b0:	8d e8       	ldi	r24, 0x8D	; 141
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	ba 01       	movw	r22, r20
     7b8:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     7bc:	88 23       	and	r24, r24
     7be:	09 f0       	breq	.+2      	; 0x7c2 <disk_ioctl+0x1be>
     7c0:	e9 c0       	rjmp	.+466    	; 0x994 <disk_ioctl+0x390>
					xchg_spi(0xFF);
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	60 e1       	ldi	r22, 0x10	; 16
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	09 f4       	brne	.+2      	; 0x7da <disk_ioctl+0x1d6>
     7d8:	df c0       	rjmp	.+446    	; 0x998 <disk_ioctl+0x394>
     7da:	00 e3       	ldi	r16, 0x30	; 48
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     7e2:	01 50       	subi	r16, 0x01	; 1
     7e4:	d9 f7       	brne	.-10     	; 0x7dc <disk_ioctl+0x1d8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     7e6:	2b 85       	ldd	r18, Y+11	; 0x0b
     7e8:	22 95       	swap	r18
     7ea:	2f 70       	andi	r18, 0x0F	; 15
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <disk_ioctl+0x1fa>
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	aa 1f       	adc	r26, r26
     7fc:	bb 1f       	adc	r27, r27
     7fe:	2a 95       	dec	r18
     800:	d2 f7       	brpl	.-12     	; 0x7f6 <disk_ioctl+0x1f2>
     802:	f7 01       	movw	r30, r14
     804:	80 83       	st	Z, r24
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	a2 83       	std	Z+2, r26	; 0x02
     80a:	b3 83       	std	Z+3, r27	; 0x03
     80c:	d8 c0       	rjmp	.+432    	; 0x9be <disk_ioctl+0x3ba>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     80e:	89 e0       	ldi	r24, 0x09	; 9
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	ba 01       	movw	r22, r20
     816:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     81a:	88 23       	and	r24, r24
     81c:	09 f0       	breq	.+2      	; 0x820 <disk_ioctl+0x21c>
     81e:	be c0       	rjmp	.+380    	; 0x99c <disk_ioctl+0x398>
     820:	ce 01       	movw	r24, r28
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	60 e1       	ldi	r22, 0x10	; 16
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	09 f4       	brne	.+2      	; 0x832 <disk_ioctl+0x22e>
     830:	b7 c0       	rjmp	.+366    	; 0x9a0 <disk_ioctl+0x39c>
					if (CardType & CT_SD1) {	/* SDv1 */
     832:	01 ff       	sbrs	r16, 1
     834:	25 c0       	rjmp	.+74     	; 0x880 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     836:	8c 85       	ldd	r24, Y+12	; 0x0c
     838:	88 1f       	adc	r24, r24
     83a:	88 27       	eor	r24, r24
     83c:	88 1f       	adc	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	2b 85       	ldd	r18, Y+11	; 0x0b
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	2f 73       	andi	r18, 0x3F	; 63
     848:	30 70       	andi	r19, 0x00	; 0
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	28 0f       	add	r18, r24
     850:	39 1f       	adc	r19, r25
     852:	8e 85       	ldd	r24, Y+14	; 0x0e
     854:	82 95       	swap	r24
     856:	86 95       	lsr	r24
     858:	86 95       	lsr	r24
     85a:	83 70       	andi	r24, 0x03	; 3
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	89 01       	movw	r16, r18
     862:	02 c0       	rjmp	.+4      	; 0x868 <disk_ioctl+0x264>
     864:	00 0f       	add	r16, r16
     866:	11 1f       	adc	r17, r17
     868:	8a 95       	dec	r24
     86a:	e2 f7       	brpl	.-8      	; 0x864 <disk_ioctl+0x260>
     86c:	c8 01       	movw	r24, r16
     86e:	a0 e0       	ldi	r26, 0x00	; 0
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	f7 01       	movw	r30, r14
     874:	80 83       	st	Z, r24
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	a2 83       	std	Z+2, r26	; 0x02
     87a:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
     87c:	00 e0       	ldi	r16, 0x00	; 0
     87e:	9f c0       	rjmp	.+318    	; 0x9be <disk_ioctl+0x3ba>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     880:	8c 85       	ldd	r24, Y+12	; 0x0c
     882:	48 2f       	mov	r20, r24
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	43 70       	andi	r20, 0x03	; 3
     888:	50 70       	andi	r21, 0x00	; 0
     88a:	44 0f       	add	r20, r20
     88c:	55 1f       	adc	r21, r21
     88e:	44 0f       	add	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	82 95       	swap	r24
     898:	86 95       	lsr	r24
     89a:	87 70       	andi	r24, 0x07	; 7
     89c:	48 0f       	add	r20, r24
     89e:	51 1d       	adc	r21, r1
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	2b 85       	ldd	r18, Y+11	; 0x0b
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	2c 77       	andi	r18, 0x7C	; 124
     8aa:	30 70       	andi	r19, 0x00	; 0
     8ac:	35 95       	asr	r19
     8ae:	27 95       	ror	r18
     8b0:	35 95       	asr	r19
     8b2:	27 95       	ror	r18
     8b4:	2f 5f       	subi	r18, 0xFF	; 255
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	42 9f       	mul	r20, r18
     8ba:	c0 01       	movw	r24, r0
     8bc:	43 9f       	mul	r20, r19
     8be:	90 0d       	add	r25, r0
     8c0:	52 9f       	mul	r21, r18
     8c2:	90 0d       	add	r25, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	a0 e0       	ldi	r26, 0x00	; 0
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	f7 01       	movw	r30, r14
     8cc:	80 83       	st	Z, r24
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	a2 83       	std	Z+2, r26	; 0x02
     8d2:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
     8d4:	00 e0       	ldi	r16, 0x00	; 0
     8d6:	73 c0       	rjmp	.+230    	; 0x9be <disk_ioctl+0x3ba>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     8d8:	80 91 2c 01 	lds	r24, 0x012C
     8dc:	fa 01       	movw	r30, r20
     8de:	80 83       	st	Z, r24
			res = RES_OK;
     8e0:	00 e0       	ldi	r16, 0x00	; 0
			break;
     8e2:	6d c0       	rjmp	.+218    	; 0x9be <disk_ioctl+0x3ba>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     8e4:	89 e0       	ldi	r24, 0x09	; 9
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	ba 01       	movw	r22, r20
     8ec:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     8f0:	88 23       	and	r24, r24
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <disk_ioctl+0x2f2>
     8f4:	57 c0       	rjmp	.+174    	; 0x9a4 <disk_ioctl+0x3a0>
				&& rcvr_datablock(ptr, 16))
     8f6:	c7 01       	movw	r24, r14
     8f8:	60 e1       	ldi	r22, 0x10	; 16
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     900:	00 97       	sbiw	r24, 0x00	; 0
     902:	09 f0       	breq	.+2      	; 0x906 <disk_ioctl+0x302>
     904:	51 c0       	rjmp	.+162    	; 0x9a8 <disk_ioctl+0x3a4>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     906:	01 e0       	ldi	r16, 0x01	; 1
     908:	5a c0       	rjmp	.+180    	; 0x9be <disk_ioctl+0x3ba>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	ba 01       	movw	r22, r20
     912:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     916:	88 23       	and	r24, r24
     918:	09 f0       	breq	.+2      	; 0x91c <disk_ioctl+0x318>
     91a:	48 c0       	rjmp	.+144    	; 0x9ac <disk_ioctl+0x3a8>
				&& rcvr_datablock(ptr, 16))
     91c:	c7 01       	movw	r24, r14
     91e:	60 e1       	ldi	r22, 0x10	; 16
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	09 f0       	breq	.+2      	; 0x92c <disk_ioctl+0x328>
     92a:	42 c0       	rjmp	.+132    	; 0x9b0 <disk_ioctl+0x3ac>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     92c:	01 e0       	ldi	r16, 0x01	; 1
     92e:	47 c0       	rjmp	.+142    	; 0x9be <disk_ioctl+0x3ba>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     930:	8a e3       	ldi	r24, 0x3A	; 58
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	ba 01       	movw	r22, r20
     938:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     93c:	88 23       	and	r24, r24
     93e:	d1 f5       	brne	.+116    	; 0x9b4 <disk_ioctl+0x3b0>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT disk_ioctl (
     940:	87 01       	movw	r16, r14
     942:	0c 5f       	subi	r16, 0xFC	; 252
     944:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
     94c:	f7 01       	movw	r30, r14
     94e:	81 93       	st	Z+, r24
     950:	7f 01       	movw	r14, r30
     952:	e0 17       	cp	r30, r16
     954:	f1 07       	cpc	r31, r17
     956:	b9 f7       	brne	.-18     	; 0x946 <disk_ioctl+0x342>
				res = RES_OK;
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	31 c0       	rjmp	.+98     	; 0x9be <disk_ioctl+0x3ba>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     95c:	8d e8       	ldi	r24, 0x8D	; 141
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	ba 01       	movw	r22, r20
     964:	0e 94 11 01 	call	0x222	; 0x222 <send_cmd>
     968:	88 23       	and	r24, r24
     96a:	31 f5       	brne	.+76     	; 0x9b8 <disk_ioctl+0x3b4>
				xchg_spi(0xFF);
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	0e 94 6f 00 	call	0xde	; 0xde <xchg_spi>
				if (rcvr_datablock(ptr, 64))
     972:	c7 01       	movw	r24, r14
     974:	60 e4       	ldi	r22, 0x40	; 64
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 9f 00 	call	0x13e	; 0x13e <rcvr_datablock>
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	f1 f4       	brne	.+60     	; 0x9bc <disk_ioctl+0x3b8>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     980:	01 e0       	ldi	r16, 0x01	; 1
     982:	1d c0       	rjmp	.+58     	; 0x9be <disk_ioctl+0x3ba>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
     984:	04 e0       	ldi	r16, 0x04	; 4
     986:	1b c0       	rjmp	.+54     	; 0x9be <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     988:	01 e0       	ldi	r16, 0x01	; 1
     98a:	19 c0       	rjmp	.+50     	; 0x9be <disk_ioctl+0x3ba>
     98c:	01 e0       	ldi	r16, 0x01	; 1
     98e:	17 c0       	rjmp	.+46     	; 0x9be <disk_ioctl+0x3ba>
     990:	01 e0       	ldi	r16, 0x01	; 1
     992:	15 c0       	rjmp	.+42     	; 0x9be <disk_ioctl+0x3ba>
     994:	01 e0       	ldi	r16, 0x01	; 1
     996:	13 c0       	rjmp	.+38     	; 0x9be <disk_ioctl+0x3ba>
     998:	01 e0       	ldi	r16, 0x01	; 1
     99a:	11 c0       	rjmp	.+34     	; 0x9be <disk_ioctl+0x3ba>
     99c:	01 e0       	ldi	r16, 0x01	; 1
     99e:	0f c0       	rjmp	.+30     	; 0x9be <disk_ioctl+0x3ba>
     9a0:	01 e0       	ldi	r16, 0x01	; 1
     9a2:	0d c0       	rjmp	.+26     	; 0x9be <disk_ioctl+0x3ba>
     9a4:	01 e0       	ldi	r16, 0x01	; 1
     9a6:	0b c0       	rjmp	.+22     	; 0x9be <disk_ioctl+0x3ba>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     9a8:	00 e0       	ldi	r16, 0x00	; 0
     9aa:	09 c0       	rjmp	.+18     	; 0x9be <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <disk_ioctl+0x3ba>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     9b0:	00 e0       	ldi	r16, 0x00	; 0
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     9b4:	01 e0       	ldi	r16, 0x01	; 1
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <disk_ioctl+0x3ba>
     9b8:	01 e0       	ldi	r16, 0x01	; 1
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <disk_ioctl+0x3ba>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
     9bc:	00 e0       	ldi	r16, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
     9be:	0e 94 8a 00 	call	0x114	; 0x114 <deselect>
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <disk_ioctl+0x3ca>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     9c4:	04 e0       	ldi	r16, 0x04	; 4
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <disk_ioctl+0x3ca>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
     9c8:	04 e0       	ldi	r16, 0x04	; 4
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <disk_ioctl+0x3ca>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     9cc:	03 e0       	ldi	r16, 0x03	; 3

		deselect();
	}

	return res;
}
     9ce:	80 2f       	mov	r24, r16
     9d0:	60 96       	adiw	r28, 0x10	; 16
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     9ea:	80 91 2b 01 	lds	r24, 0x012B
	if (n) Timer1 = --n;
     9ee:	88 23       	and	r24, r24
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <disk_timerproc+0xe>
     9f2:	81 50       	subi	r24, 0x01	; 1
     9f4:	80 93 2b 01 	sts	0x012B, r24
	n = Timer2;
     9f8:	80 91 2a 01 	lds	r24, 0x012A
	if (n) Timer2 = --n;
     9fc:	88 23       	and	r24, r24
     9fe:	19 f0       	breq	.+6      	; 0xa06 <disk_timerproc+0x1c>
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	80 93 2a 01 	sts	0x012A, r24

	s = Stat;
     a06:	80 91 00 01 	lds	r24, 0x0100

	if (SOCKWP)				/* Write protected */
     a0a:	18 9b       	sbis	0x03, 0	; 3
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <disk_timerproc+0x28>
		s |= STA_PROTECT;
     a0e:	84 60       	ori	r24, 0x04	; 4
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
     a12:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
     a14:	19 99       	sbic	0x03, 1	; 3
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <disk_timerproc+0x32>
		s &= ~STA_NODISK;
     a18:	8d 7f       	andi	r24, 0xFD	; 253
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
     a1c:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
     a1e:	80 93 00 01 	sts	0x0100, r24
}
     a22:	08 95       	ret

00000a24 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     a24:	41 15       	cp	r20, r1
     a26:	51 05       	cpc	r21, r1
     a28:	49 f0       	breq	.+18     	; 0xa3c <mem_cpy+0x18>
     a2a:	a6 2f       	mov	r26, r22
     a2c:	b7 2f       	mov	r27, r23
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     a2e:	e8 2f       	mov	r30, r24
     a30:	f9 2f       	mov	r31, r25
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
     a32:	8d 91       	ld	r24, X+
     a34:	81 93       	st	Z+, r24
     a36:	41 50       	subi	r20, 0x01	; 1
     a38:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     a3a:	d9 f7       	brne	.-10     	; 0xa32 <mem_cpy+0xe>
     a3c:	08 95       	ret

00000a3e <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     a3e:	41 15       	cp	r20, r1
     a40:	51 05       	cpc	r21, r1
     a42:	31 f0       	breq	.+12     	; 0xa50 <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     a44:	e8 2f       	mov	r30, r24
     a46:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
     a48:	61 93       	st	Z+, r22
     a4a:	41 50       	subi	r20, 0x01	; 1
     a4c:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <mem_set+0xa>
     a50:	08 95       	ret

00000a52 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	dc 01       	movw	r26, r24
     a58:	fb 01       	movw	r30, r22
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
     a5a:	93 8d       	ldd	r25, Z+27	; 0x1b
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	02 8d       	ldd	r16, Z+26	; 0x1a
     a60:	10 e0       	ldi	r17, 0x00	; 0
     a62:	08 2b       	or	r16, r24
     a64:	19 2b       	or	r17, r25
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
     a6a:	8c 91       	ld	r24, X
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	79 f4       	brne	.+30     	; 0xa8e <ld_clust+0x3c>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
     a70:	55 89       	ldd	r21, Z+21	; 0x15
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	84 89       	ldd	r24, Z+20	; 0x14
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	84 2b       	or	r24, r20
     a7a:	95 2b       	or	r25, r21
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	dc 01       	movw	r26, r24
     a82:	99 27       	eor	r25, r25
     a84:	88 27       	eor	r24, r24
     a86:	08 2b       	or	r16, r24
     a88:	19 2b       	or	r17, r25
     a8a:	2a 2b       	or	r18, r26
     a8c:	3b 2b       	or	r19, r27

	return cl;
}
     a8e:	60 2f       	mov	r22, r16
     a90:	71 2f       	mov	r23, r17
     a92:	82 2f       	mov	r24, r18
     a94:	93 2f       	mov	r25, r19
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
     a9c:	fc 01       	movw	r30, r24
	ST_WORD(dir+DIR_FstClusLO, cl);
     a9e:	42 8f       	std	Z+26, r20	; 0x1a
     aa0:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     aa2:	ab 01       	movw	r20, r22
     aa4:	66 27       	eor	r22, r22
     aa6:	77 27       	eor	r23, r23
     aa8:	44 8b       	std	Z+20, r20	; 0x14
     aaa:	55 8b       	std	Z+21, r21	; 0x15
}
     aac:	08 95       	ret

00000aae <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	fc 01       	movw	r30, r24
     abc:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     abe:	8b 01       	movw	r16, r22
     ac0:	07 5f       	subi	r16, 0xF7	; 247
     ac2:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
     ac4:	86 85       	ldd	r24, Z+14	; 0x0e
     ac6:	97 85       	ldd	r25, Z+15	; 0x0f
     ac8:	a0 89       	ldd	r26, Z+16	; 0x10
     aca:	b1 89       	ldd	r27, Z+17	; 0x11
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <get_fileinfo+0x28>
     ad4:	65 c0       	rjmp	.+202    	; 0xba0 <get_fileinfo+0xf2>
		dir = dj->dir;
     ad6:	c2 89       	ldd	r28, Z+18	; 0x12
     ad8:	d3 89       	ldd	r29, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     ada:	28 81       	ld	r18, Y
			if (c == ' ') break;
     adc:	20 32       	cpi	r18, 0x20	; 32
     ade:	99 f0       	breq	.+38     	; 0xb06 <get_fileinfo+0x58>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
     ae0:	de 01       	movw	r26, r28
     ae2:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
     ae4:	f8 01       	movw	r30, r16

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     aea:	35 ee       	ldi	r19, 0xE5	; 229
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <get_fileinfo+0x46>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     aee:	2d 91       	ld	r18, X+
			if (c == ' ') break;
     af0:	20 32       	cpi	r18, 0x20	; 32
     af2:	49 f0       	breq	.+18     	; 0xb06 <get_fileinfo+0x58>
			if (c == NDDE) c = (TCHAR)DDE;
     af4:	25 30       	cpi	r18, 0x05	; 5
     af6:	09 f4       	brne	.+2      	; 0xafa <get_fileinfo+0x4c>
     af8:	23 2f       	mov	r18, r19
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     afa:	21 93       	st	Z+, r18
     afc:	8f 01       	movw	r16, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	88 30       	cpi	r24, 0x08	; 8
     b02:	91 05       	cpc	r25, r1
     b04:	a1 f7       	brne	.-24     	; 0xaee <get_fileinfo+0x40>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     b06:	88 85       	ldd	r24, Y+8	; 0x08
     b08:	80 32       	cpi	r24, 0x20	; 32
     b0a:	81 f0       	breq	.+32     	; 0xb2c <get_fileinfo+0x7e>
			*p++ = '.';
     b0c:	8e e2       	ldi	r24, 0x2E	; 46
     b0e:	f8 01       	movw	r30, r16
     b10:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     b12:	88 85       	ldd	r24, Y+8	; 0x08
				if (c == ' ') break;
     b14:	80 32       	cpi	r24, 0x20	; 32
     b16:	09 f0       	breq	.+2      	; 0xb1a <get_fileinfo+0x6c>
     b18:	4c c0       	rjmp	.+152    	; 0xbb2 <get_fileinfo+0x104>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     b1a:	0f 5f       	subi	r16, 0xFF	; 255
     b1c:	1f 4f       	sbci	r17, 0xFF	; 255
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <get_fileinfo+0x7e>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     b20:	8c 01       	movw	r16, r24
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <get_fileinfo+0x7e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     b24:	f8 01       	movw	r30, r16
     b26:	23 83       	std	Z+3, r18	; 0x03
     b28:	0c 5f       	subi	r16, 0xFC	; 252
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     b2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2e:	f7 01       	movw	r30, r14
     b30:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     b32:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	b8 2f       	mov	r27, r24
     b3c:	aa 27       	eor	r26, r26
     b3e:	99 27       	eor	r25, r25
     b40:	88 27       	eor	r24, r24
     b42:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	ba 01       	movw	r22, r20
     b4c:	55 27       	eor	r21, r21
     b4e:	44 27       	eor	r20, r20
     b50:	48 2b       	or	r20, r24
     b52:	59 2b       	or	r21, r25
     b54:	6a 2b       	or	r22, r26
     b56:	7b 2b       	or	r23, r27
     b58:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	48 2b       	or	r20, r24
     b62:	59 2b       	or	r21, r25
     b64:	6a 2b       	or	r22, r26
     b66:	7b 2b       	or	r23, r27
     b68:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	84 2b       	or	r24, r20
     b72:	95 2b       	or	r25, r21
     b74:	a6 2b       	or	r26, r22
     b76:	b7 2b       	or	r27, r23
     b78:	80 83       	st	Z, r24
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	a2 83       	std	Z+2, r26	; 0x02
     b7e:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     b80:	39 8d       	ldd	r19, Y+25	; 0x19
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	88 8d       	ldd	r24, Y+24	; 0x18
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	82 2b       	or	r24, r18
     b8a:	93 2b       	or	r25, r19
     b8c:	95 83       	std	Z+5, r25	; 0x05
     b8e:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     b90:	9f 89       	ldd	r25, Y+23	; 0x17
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	2e 89       	ldd	r18, Y+22	; 0x16
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	82 2b       	or	r24, r18
     b9a:	93 2b       	or	r25, r19
     b9c:	97 83       	std	Z+7, r25	; 0x07
     b9e:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     ba0:	f8 01       	movw	r30, r16
     ba2:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     bb2:	f8 01       	movw	r30, r16
     bb4:	81 83       	std	Z+1, r24	; 0x01
     bb6:	c8 01       	movw	r24, r16
     bb8:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     bba:	29 85       	ldd	r18, Y+9	; 0x09
				if (c == ' ') break;
     bbc:	20 32       	cpi	r18, 0x20	; 32
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <get_fileinfo+0x114>
     bc0:	af cf       	rjmp	.-162    	; 0xb20 <get_fileinfo+0x72>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     bc2:	22 83       	std	Z+2, r18	; 0x02
     bc4:	c8 01       	movw	r24, r16
     bc6:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     bc8:	2a 85       	ldd	r18, Y+10	; 0x0a
				if (c == ' ') break;
     bca:	20 32       	cpi	r18, 0x20	; 32
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <get_fileinfo+0x122>
     bce:	aa cf       	rjmp	.-172    	; 0xb24 <get_fileinfo+0x76>
     bd0:	a7 cf       	rjmp	.-178    	; 0xb20 <get_fileinfo+0x72>

00000bd2 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
     bd2:	dc 01       	movw	r26, r24
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     bd4:	ed 91       	ld	r30, X+
     bd6:	fc 91       	ld	r31, X
     bd8:	11 97       	sbiw	r26, 0x01	; 1
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	99 f0       	breq	.+38     	; 0xc04 <validate+0x32>
     bde:	80 81       	ld	r24, Z
     be0:	88 23       	and	r24, r24
     be2:	91 f0       	breq	.+36     	; 0xc08 <validate+0x36>
     be4:	26 81       	ldd	r18, Z+6	; 0x06
     be6:	37 81       	ldd	r19, Z+7	; 0x07
     be8:	12 96       	adiw	r26, 0x02	; 2
     bea:	8d 91       	ld	r24, X+
     bec:	9c 91       	ld	r25, X
     bee:	13 97       	sbiw	r26, 0x03	; 3
     bf0:	28 17       	cp	r18, r24
     bf2:	39 07       	cpc	r19, r25
     bf4:	59 f4       	brne	.+22     	; 0xc0c <validate+0x3a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     bf6:	81 81       	ldd	r24, Z+1	; 0x01
     bf8:	0e 94 32 02 	call	0x464	; 0x464 <disk_status>
     bfc:	80 ff       	sbrs	r24, 0
     bfe:	08 c0       	rjmp	.+16     	; 0xc10 <validate+0x3e>
		return FR_NOT_READY;
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	08 95       	ret
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     c04:	89 e0       	ldi	r24, 0x09	; 9
     c06:	08 95       	ret
     c08:	89 e0       	ldi	r24, 0x09	; 9
     c0a:	08 95       	ret
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     c10:	80 e0       	ldi	r24, 0x00	; 0
}
     c12:	08 95       	ret

00000c14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     c14:	0f 93       	push	r16
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
     c1c:	9a 01       	movw	r18, r20
     c1e:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     c20:	bc 01       	movw	r22, r24
     c22:	6e 5c       	subi	r22, 0xCE	; 206
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	01 e0       	ldi	r16, 0x01	; 1
     c2a:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
     c2e:	88 23       	and	r24, r24
     c30:	09 f0       	breq	.+2      	; 0xc34 <check_fs+0x20>
     c32:	83 c0       	rjmp	.+262    	; 0xd3a <check_fs+0x126>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     c34:	fe 01       	movw	r30, r28
     c36:	ef 5c       	subi	r30, 0xCF	; 207
     c38:	fd 4f       	sbci	r31, 0xFD	; 253
     c3a:	90 81       	ld	r25, Z
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	fe 01       	movw	r30, r28
     c40:	e0 5d       	subi	r30, 0xD0	; 208
     c42:	fd 4f       	sbci	r31, 0xFD	; 253
     c44:	20 81       	ld	r18, Z
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	82 2b       	or	r24, r18
     c4a:	93 2b       	or	r25, r19
     c4c:	2a ea       	ldi	r18, 0xAA	; 170
     c4e:	85 35       	cpi	r24, 0x55	; 85
     c50:	92 07       	cpc	r25, r18
     c52:	09 f0       	breq	.+2      	; 0xc56 <check_fs+0x42>
     c54:	74 c0       	rjmp	.+232    	; 0xd3e <check_fs+0x12a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     c56:	fe 01       	movw	r30, r28
     c58:	e5 59       	subi	r30, 0x95	; 149
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	b8 2f       	mov	r27, r24
     c66:	aa 27       	eor	r26, r26
     c68:	99 27       	eor	r25, r25
     c6a:	88 27       	eor	r24, r24
     c6c:	fe 01       	movw	r30, r28
     c6e:	e6 59       	subi	r30, 0x96	; 150
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	40 81       	ld	r20, Z
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	ba 01       	movw	r22, r20
     c7c:	55 27       	eor	r21, r21
     c7e:	44 27       	eor	r20, r20
     c80:	48 2b       	or	r20, r24
     c82:	59 2b       	or	r21, r25
     c84:	6a 2b       	or	r22, r26
     c86:	7b 2b       	or	r23, r27
     c88:	fe 01       	movw	r30, r28
     c8a:	e8 59       	subi	r30, 0x98	; 152
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	80 81       	ld	r24, Z
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	48 2b       	or	r20, r24
     c98:	59 2b       	or	r21, r25
     c9a:	6a 2b       	or	r22, r26
     c9c:	7b 2b       	or	r23, r27
     c9e:	fe 01       	movw	r30, r28
     ca0:	e7 59       	subi	r30, 0x97	; 151
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	90 81       	ld	r25, Z
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	48 2b       	or	r20, r24
     cae:	59 2b       	or	r21, r25
     cb0:	6a 2b       	or	r22, r26
     cb2:	7b 2b       	or	r23, r27
     cb4:	70 70       	andi	r23, 0x00	; 0
     cb6:	46 34       	cpi	r20, 0x46	; 70
     cb8:	81 e4       	ldi	r24, 0x41	; 65
     cba:	58 07       	cpc	r21, r24
     cbc:	84 e5       	ldi	r24, 0x54	; 84
     cbe:	68 07       	cpc	r22, r24
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	78 07       	cpc	r23, r24
     cc4:	f1 f1       	breq	.+124    	; 0xd42 <check_fs+0x12e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     cc6:	fe 01       	movw	r30, r28
     cc8:	e9 57       	subi	r30, 0x79	; 121
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 81       	ld	r24, Z
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	b8 2f       	mov	r27, r24
     cd6:	aa 27       	eor	r26, r26
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	fe 01       	movw	r30, r28
     cde:	ea 57       	subi	r30, 0x7A	; 122
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	40 81       	ld	r20, Z
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	ba 01       	movw	r22, r20
     cec:	55 27       	eor	r21, r21
     cee:	44 27       	eor	r20, r20
     cf0:	48 2b       	or	r20, r24
     cf2:	59 2b       	or	r21, r25
     cf4:	6a 2b       	or	r22, r26
     cf6:	7b 2b       	or	r23, r27
     cf8:	fe 01       	movw	r30, r28
     cfa:	ec 57       	subi	r30, 0x7C	; 124
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	80 81       	ld	r24, Z
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	48 2b       	or	r20, r24
     d08:	59 2b       	or	r21, r25
     d0a:	6a 2b       	or	r22, r26
     d0c:	7b 2b       	or	r23, r27
     d0e:	cb 57       	subi	r28, 0x7B	; 123
     d10:	df 4f       	sbci	r29, 0xFF	; 255
     d12:	98 81       	ld	r25, Y
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	48 2b       	or	r20, r24
     d1c:	59 2b       	or	r21, r25
     d1e:	6a 2b       	or	r22, r26
     d20:	7b 2b       	or	r23, r27
     d22:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	46 34       	cpi	r20, 0x46	; 70
     d28:	91 e4       	ldi	r25, 0x41	; 65
     d2a:	59 07       	cpc	r21, r25
     d2c:	94 e5       	ldi	r25, 0x54	; 84
     d2e:	69 07       	cpc	r22, r25
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	79 07       	cpc	r23, r25
     d34:	39 f4       	brne	.+14     	; 0xd44 <check_fs+0x130>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <check_fs+0x130>
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <check_fs+0x130>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <check_fs+0x130>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     d42:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     d4c:	2f 92       	push	r2
     d4e:	3f 92       	push	r3
     d50:	4f 92       	push	r4
     d52:	5f 92       	push	r5
     d54:	6f 92       	push	r6
     d56:	7f 92       	push	r7
     d58:	8f 92       	push	r8
     d5a:	9f 92       	push	r9
     d5c:	af 92       	push	r10
     d5e:	bf 92       	push	r11
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	2f 97       	sbiw	r28, 0x0f	; 15
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	14 2f       	mov	r17, r20
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     d82:	dc 01       	movw	r26, r24
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
     d8a:	80 81       	ld	r24, Z
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
     d90:	8a 30       	cpi	r24, 0x0A	; 10
     d92:	91 05       	cpc	r25, r1
     d94:	40 f4       	brcc	.+16     	; 0xda6 <chk_mounted+0x5a>
     d96:	21 81       	ldd	r18, Z+1	; 0x01
     d98:	2a 33       	cpi	r18, 0x3A	; 58
     d9a:	29 f4       	brne	.+10     	; 0xda6 <chk_mounted+0x5a>
		p += 2; *path = p;				/* Return pointer to the path name */
     d9c:	32 96       	adiw	r30, 0x02	; 2
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	fc 93       	st	X, r31
     da2:	ee 93       	st	-X, r30
     da4:	03 c0       	rjmp	.+6      	; 0xdac <chk_mounted+0x60>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
     da6:	80 91 2f 01 	lds	r24, 0x012F
     daa:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
     dac:	fb 01       	movw	r30, r22
     dae:	11 82       	std	Z+1, r1	; 0x01
     db0:	10 82       	st	Z, r1
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	09 f0       	breq	.+2      	; 0xdb8 <chk_mounted+0x6c>
     db6:	d2 c3       	rjmp	.+1956   	; 0x155c <chk_mounted+0x810>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
     db8:	20 91 2d 01 	lds	r18, 0x012D
     dbc:	30 91 2e 01 	lds	r19, 0x012E
     dc0:	3f 87       	std	Y+15, r19	; 0x0f
     dc2:	2e 87       	std	Y+14, r18	; 0x0e
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     dc4:	21 15       	cp	r18, r1
     dc6:	31 05       	cpc	r19, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <chk_mounted+0x80>
     dca:	ca c3       	rjmp	.+1940   	; 0x1560 <chk_mounted+0x814>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
     dcc:	31 83       	std	Z+1, r19	; 0x01
     dce:	20 83       	st	Z, r18
	if (fs->fs_type) {					/* If the volume has been mounted */
     dd0:	d9 01       	movw	r26, r18
     dd2:	8c 91       	ld	r24, X
     dd4:	88 23       	and	r24, r24
     dd6:	69 f0       	breq	.+26     	; 0xdf2 <chk_mounted+0xa6>
		stat = disk_status(fs->drv);
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	8c 91       	ld	r24, X
     ddc:	0e 94 32 02 	call	0x464	; 0x464 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
     de0:	80 fd       	sbrc	r24, 0
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <chk_mounted+0xa6>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     de4:	11 23       	and	r17, r17
     de6:	09 f4       	brne	.+2      	; 0xdea <chk_mounted+0x9e>
     de8:	bd c3       	rjmp	.+1914   	; 0x1564 <chk_mounted+0x818>
     dea:	82 fd       	sbrc	r24, 2
     dec:	bd c3       	rjmp	.+1914   	; 0x1568 <chk_mounted+0x81c>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	dc c3       	rjmp	.+1976   	; 0x15aa <chk_mounted+0x85e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     df2:	ee 85       	ldd	r30, Y+14	; 0x0e
     df4:	ff 85       	ldd	r31, Y+15	; 0x0f
     df6:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     df8:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     e00:	80 fd       	sbrc	r24, 0
     e02:	b4 c3       	rjmp	.+1896   	; 0x156c <chk_mounted+0x820>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     e04:	11 23       	and	r17, r17
     e06:	11 f0       	breq	.+4      	; 0xe0c <chk_mounted+0xc0>
     e08:	82 fd       	sbrc	r24, 2
     e0a:	b2 c3       	rjmp	.+1892   	; 0x1570 <chk_mounted+0x824>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
     e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	ba 01       	movw	r22, r20
     e16:	0e 94 0a 06 	call	0xc14	; 0xc14 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	09 f0       	breq	.+2      	; 0xe20 <chk_mounted+0xd4>
     e1e:	43 c0       	rjmp	.+134    	; 0xea6 <chk_mounted+0x15a>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
     e20:	ee 85       	ldd	r30, Y+14	; 0x0e
     e22:	ff 85       	ldd	r31, Y+15	; 0x0f
     e24:	ec 50       	subi	r30, 0x0C	; 12
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	09 f4       	brne	.+2      	; 0xe30 <chk_mounted+0xe4>
     e2e:	a2 c3       	rjmp	.+1860   	; 0x1574 <chk_mounted+0x828>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
     e30:	ee 85       	ldd	r30, Y+14	; 0x0e
     e32:	ff 85       	ldd	r31, Y+15	; 0x0f
     e34:	e5 50       	subi	r30, 0x05	; 5
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	80 81       	ld	r24, Z
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	b8 2f       	mov	r27, r24
     e42:	aa 27       	eor	r26, r26
     e44:	99 27       	eor	r25, r25
     e46:	88 27       	eor	r24, r24
     e48:	ee 85       	ldd	r30, Y+14	; 0x0e
     e4a:	ff 85       	ldd	r31, Y+15	; 0x0f
     e4c:	e6 50       	subi	r30, 0x06	; 6
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	40 81       	ld	r20, Z
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	ba 01       	movw	r22, r20
     e5a:	55 27       	eor	r21, r21
     e5c:	44 27       	eor	r20, r20
     e5e:	84 2b       	or	r24, r20
     e60:	95 2b       	or	r25, r21
     e62:	a6 2b       	or	r26, r22
     e64:	b7 2b       	or	r27, r23
     e66:	ee 85       	ldd	r30, Y+14	; 0x0e
     e68:	ff 85       	ldd	r31, Y+15	; 0x0f
     e6a:	e8 50       	subi	r30, 0x08	; 8
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	40 81       	ld	r20, Z
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	48 2b       	or	r20, r24
     e78:	59 2b       	or	r21, r25
     e7a:	6a 2b       	or	r22, r26
     e7c:	7b 2b       	or	r23, r27
     e7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     e80:	ff 85       	ldd	r31, Y+15	; 0x0f
     e82:	e7 50       	subi	r30, 0x07	; 7
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	90 81       	ld	r25, Z
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	6c 01       	movw	r12, r24
     e8c:	ee 24       	eor	r14, r14
     e8e:	ff 24       	eor	r15, r15
     e90:	c4 2a       	or	r12, r20
     e92:	d5 2a       	or	r13, r21
     e94:	e6 2a       	or	r14, r22
     e96:	f7 2a       	or	r15, r23
			fmt = check_fs(fs, bsect);		/* Check the partition */
     e98:	8e 85       	ldd	r24, Y+14	; 0x0e
     e9a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e9c:	b7 01       	movw	r22, r14
     e9e:	a6 01       	movw	r20, r12
     ea0:	0e 94 0a 06 	call	0xc14	; 0xc14 <check_fs>
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <chk_mounted+0x160>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
     ea6:	cc 24       	eor	r12, r12
     ea8:	dd 24       	eor	r13, r13
     eaa:	76 01       	movw	r14, r12
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	09 f4       	brne	.+2      	; 0xeb2 <chk_mounted+0x166>
     eb0:	63 c3       	rjmp	.+1734   	; 0x1578 <chk_mounted+0x82c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     eb2:	88 23       	and	r24, r24
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <chk_mounted+0x16c>
     eb6:	62 c3       	rjmp	.+1732   	; 0x157c <chk_mounted+0x830>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     eb8:	ae 85       	ldd	r26, Y+14	; 0x0e
     eba:	bf 85       	ldd	r27, Y+15	; 0x0f
     ebc:	de 96       	adiw	r26, 0x3e	; 62
     ebe:	9c 91       	ld	r25, X
     ec0:	de 97       	sbiw	r26, 0x3e	; 62
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	dd 96       	adiw	r26, 0x3d	; 61
     ec6:	2c 91       	ld	r18, X
     ec8:	dd 97       	sbiw	r26, 0x3d	; 61
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	82 2b       	or	r24, r18
     ece:	93 2b       	or	r25, r19
     ed0:	b2 e0       	ldi	r27, 0x02	; 2
     ed2:	80 30       	cpi	r24, 0x00	; 0
     ed4:	9b 07       	cpc	r25, r27
     ed6:	09 f0       	breq	.+2      	; 0xeda <chk_mounted+0x18e>
     ed8:	53 c3       	rjmp	.+1702   	; 0x1580 <chk_mounted+0x834>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     eda:	ee 85       	ldd	r30, Y+14	; 0x0e
     edc:	ff 85       	ldd	r31, Y+15	; 0x0f
     ede:	e7 5b       	subi	r30, 0xB7	; 183
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	30 81       	ld	r19, Z
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ee8:	ff 85       	ldd	r31, Y+15	; 0x0f
     eea:	e8 5b       	subi	r30, 0xB8	; 184
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	82 2b       	or	r24, r18
     ef4:	93 2b       	or	r25, r19
     ef6:	4c 01       	movw	r8, r24
     ef8:	aa 24       	eor	r10, r10
     efa:	bb 24       	eor	r11, r11
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     efc:	81 14       	cp	r8, r1
     efe:	91 04       	cpc	r9, r1
     f00:	a1 04       	cpc	r10, r1
     f02:	b1 04       	cpc	r11, r1
     f04:	a9 f5       	brne	.+106    	; 0xf70 <chk_mounted+0x224>
     f06:	ee 85       	ldd	r30, Y+14	; 0x0e
     f08:	ff 85       	ldd	r31, Y+15	; 0x0f
     f0a:	e7 5a       	subi	r30, 0xA7	; 167
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	40 81       	ld	r20, Z
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	74 2f       	mov	r23, r20
     f18:	66 27       	eor	r22, r22
     f1a:	55 27       	eor	r21, r21
     f1c:	44 27       	eor	r20, r20
     f1e:	ee 85       	ldd	r30, Y+14	; 0x0e
     f20:	ff 85       	ldd	r31, Y+15	; 0x0f
     f22:	e8 5a       	subi	r30, 0xA8	; 168
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 81       	ld	r24, Z
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	dc 01       	movw	r26, r24
     f30:	99 27       	eor	r25, r25
     f32:	88 27       	eor	r24, r24
     f34:	48 2b       	or	r20, r24
     f36:	59 2b       	or	r21, r25
     f38:	6a 2b       	or	r22, r26
     f3a:	7b 2b       	or	r23, r27
     f3c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f3e:	ff 85       	ldd	r31, Y+15	; 0x0f
     f40:	ea 5a       	subi	r30, 0xAA	; 170
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	48 2b       	or	r20, r24
     f4e:	59 2b       	or	r21, r25
     f50:	6a 2b       	or	r22, r26
     f52:	7b 2b       	or	r23, r27
     f54:	ee 85       	ldd	r30, Y+14	; 0x0e
     f56:	ff 85       	ldd	r31, Y+15	; 0x0f
     f58:	e9 5a       	subi	r30, 0xA9	; 169
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	90 81       	ld	r25, Z
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	4a 01       	movw	r8, r20
     f66:	5b 01       	movw	r10, r22
     f68:	88 2a       	or	r8, r24
     f6a:	99 2a       	or	r9, r25
     f6c:	aa 2a       	or	r10, r26
     f6e:	bb 2a       	or	r11, r27
	fs->fsize = fasize;
     f70:	ee 85       	ldd	r30, Y+14	; 0x0e
     f72:	ff 85       	ldd	r31, Y+15	; 0x0f
     f74:	86 8e       	std	Z+30, r8	; 0x1e
     f76:	97 8e       	std	Z+31, r9	; 0x1f
     f78:	a0 a2       	lds	r26, 0x90
     f7a:	b1 a2       	lds	r27, 0x91

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
     f7c:	ee 5b       	subi	r30, 0xBE	; 190
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	00 81       	ld	r16, Z
     f82:	09 83       	std	Y+1, r16	; 0x01
     f84:	ae 85       	ldd	r26, Y+14	; 0x0e
     f86:	bf 85       	ldd	r27, Y+15	; 0x0f
     f88:	13 96       	adiw	r26, 0x03	; 3
     f8a:	0c 93       	st	X, r16
     f8c:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     f8e:	80 2f       	mov	r24, r16
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	08 f0       	brcs	.+2      	; 0xf98 <chk_mounted+0x24c>
     f96:	f6 c2       	rjmp	.+1516   	; 0x1584 <chk_mounted+0x838>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
     f98:	df 96       	adiw	r26, 0x3f	; 63
     f9a:	0c 91       	ld	r16, X
     f9c:	df 97       	sbiw	r26, 0x3f	; 63
     f9e:	0d 83       	std	Y+5, r16	; 0x05
     fa0:	12 96       	adiw	r26, 0x02	; 2
     fa2:	0c 93       	st	X, r16
     fa4:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     fa6:	00 23       	and	r16, r16
     fa8:	09 f4       	brne	.+2      	; 0xfac <chk_mounted+0x260>
     faa:	ee c2       	rjmp	.+1500   	; 0x1588 <chk_mounted+0x83c>
     fac:	80 2f       	mov	r24, r16
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 01       	movw	r18, r24
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	30 40       	sbci	r19, 0x00	; 0
     fb6:	82 23       	and	r24, r18
     fb8:	93 23       	and	r25, r19
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <chk_mounted+0x274>
     fbe:	e6 c2       	rjmp	.+1484   	; 0x158c <chk_mounted+0x840>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     fc0:	fd 01       	movw	r30, r26
     fc2:	ec 5b       	subi	r30, 0xBC	; 188
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	30 81       	ld	r19, Z
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	fd 01       	movw	r30, r26
     fcc:	ed 5b       	subi	r30, 0xBD	; 189
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	19 01       	movw	r2, r18
     fd6:	28 2a       	or	r2, r24
     fd8:	39 2a       	or	r3, r25
     fda:	19 96       	adiw	r26, 0x09	; 9
     fdc:	3c 92       	st	X, r3
     fde:	2e 92       	st	-X, r2
     fe0:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     fe2:	c1 01       	movw	r24, r2
     fe4:	8f 70       	andi	r24, 0x0F	; 15
     fe6:	90 70       	andi	r25, 0x00	; 0
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	09 f0       	breq	.+2      	; 0xfee <chk_mounted+0x2a2>
     fec:	d1 c2       	rjmp	.+1442   	; 0x1590 <chk_mounted+0x844>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     fee:	fd 01       	movw	r30, r26
     ff0:	ea 5b       	subi	r30, 0xBA	; 186
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	30 81       	ld	r19, Z
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	fd 01       	movw	r30, r26
     ffa:	eb 5b       	subi	r30, 0xBB	; 187
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 81       	ld	r24, Z
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	82 2b       	or	r24, r18
    1004:	93 2b       	or	r25, r19
    1006:	2c 01       	movw	r4, r24
    1008:	66 24       	eor	r6, r6
    100a:	77 24       	eor	r7, r7
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    100c:	41 14       	cp	r4, r1
    100e:	51 04       	cpc	r5, r1
    1010:	61 04       	cpc	r6, r1
    1012:	71 04       	cpc	r7, r1
    1014:	a1 f5       	brne	.+104    	; 0x107e <chk_mounted+0x332>
    1016:	fd 01       	movw	r30, r26
    1018:	eb 5a       	subi	r30, 0xAB	; 171
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 81       	ld	r24, Z
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e0       	ldi	r26, 0x00	; 0
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	78 2f       	mov	r23, r24
    1026:	66 27       	eor	r22, r22
    1028:	55 27       	eor	r21, r21
    102a:	44 27       	eor	r20, r20
    102c:	ee 85       	ldd	r30, Y+14	; 0x0e
    102e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1030:	ec 5a       	subi	r30, 0xAC	; 172
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	dc 01       	movw	r26, r24
    103e:	99 27       	eor	r25, r25
    1040:	88 27       	eor	r24, r24
    1042:	48 2b       	or	r20, r24
    1044:	59 2b       	or	r21, r25
    1046:	6a 2b       	or	r22, r26
    1048:	7b 2b       	or	r23, r27
    104a:	ee 85       	ldd	r30, Y+14	; 0x0e
    104c:	ff 85       	ldd	r31, Y+15	; 0x0f
    104e:	ee 5a       	subi	r30, 0xAE	; 174
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a0 e0       	ldi	r26, 0x00	; 0
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	48 2b       	or	r20, r24
    105c:	59 2b       	or	r21, r25
    105e:	6a 2b       	or	r22, r26
    1060:	7b 2b       	or	r23, r27
    1062:	ee 85       	ldd	r30, Y+14	; 0x0e
    1064:	ff 85       	ldd	r31, Y+15	; 0x0f
    1066:	ed 5a       	subi	r30, 0xAD	; 173
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	90 81       	ld	r25, Z
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	2a 01       	movw	r4, r20
    1074:	3b 01       	movw	r6, r22
    1076:	48 2a       	or	r4, r24
    1078:	59 2a       	or	r5, r25
    107a:	6a 2a       	or	r6, r26
    107c:	7b 2a       	or	r7, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    107e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1080:	ff 85       	ldd	r31, Y+15	; 0x0f
    1082:	ef 5b       	subi	r30, 0xBF	; 191
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	30 81       	ld	r19, Z
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	ee 85       	ldd	r30, Y+14	; 0x0e
    108c:	ff 85       	ldd	r31, Y+15	; 0x0f
    108e:	e0 5c       	subi	r30, 0xC0	; 192
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	89 01       	movw	r16, r18
    1098:	08 2b       	or	r16, r24
    109a:	19 2b       	or	r17, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    109c:	01 15       	cp	r16, r1
    109e:	11 05       	cpc	r17, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <chk_mounted+0x358>
    10a2:	78 c2       	rjmp	.+1264   	; 0x1594 <chk_mounted+0x848>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	c5 01       	movw	r24, r10
    10b0:	b4 01       	movw	r22, r8
    10b2:	0e 94 20 24 	call	0x4840	; 0x4840 <__mulsi3>
    10b6:	6a 87       	std	Y+10, r22	; 0x0a
    10b8:	7b 87       	std	Y+11, r23	; 0x0b
    10ba:	8c 87       	std	Y+12, r24	; 0x0c
    10bc:	9d 87       	std	Y+13, r25	; 0x0d

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    10be:	98 01       	movw	r18, r16
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	2e 83       	std	Y+6, r18	; 0x06
    10c6:	3f 83       	std	Y+7, r19	; 0x07
    10c8:	48 87       	std	Y+8, r20	; 0x08
    10ca:	59 87       	std	Y+9, r21	; 0x09
    10cc:	c1 01       	movw	r24, r2
    10ce:	92 95       	swap	r25
    10d0:	82 95       	swap	r24
    10d2:	8f 70       	andi	r24, 0x0F	; 15
    10d4:	89 27       	eor	r24, r25
    10d6:	9f 70       	andi	r25, 0x0F	; 15
    10d8:	89 27       	eor	r24, r25
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	a4 1f       	adc	r26, r20
    10e4:	b5 1f       	adc	r27, r21
    10e6:	0a 85       	ldd	r16, Y+10	; 0x0a
    10e8:	1b 85       	ldd	r17, Y+11	; 0x0b
    10ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ee:	08 0f       	add	r16, r24
    10f0:	19 1f       	adc	r17, r25
    10f2:	2a 1f       	adc	r18, r26
    10f4:	3b 1f       	adc	r19, r27
    10f6:	09 83       	std	Y+1, r16	; 0x01
    10f8:	1a 83       	std	Y+2, r17	; 0x02
    10fa:	2b 83       	std	Y+3, r18	; 0x03
    10fc:	3c 83       	std	Y+4, r19	; 0x04
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    10fe:	40 16       	cp	r4, r16
    1100:	51 06       	cpc	r5, r17
    1102:	62 06       	cpc	r6, r18
    1104:	73 06       	cpc	r7, r19
    1106:	08 f4       	brcc	.+2      	; 0x110a <chk_mounted+0x3be>
    1108:	47 c2       	rjmp	.+1166   	; 0x1598 <chk_mounted+0x84c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    110a:	c3 01       	movw	r24, r6
    110c:	b2 01       	movw	r22, r4
    110e:	60 1b       	sub	r22, r16
    1110:	71 0b       	sbc	r23, r17
    1112:	82 0b       	sbc	r24, r18
    1114:	93 0b       	sbc	r25, r19
    1116:	1d 81       	ldd	r17, Y+5	; 0x05
    1118:	21 2f       	mov	r18, r17
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	0e 94 3f 24 	call	0x487e	; 0x487e <__udivmodsi4>
    1124:	89 01       	movw	r16, r18
    1126:	9a 01       	movw	r18, r20
    1128:	d9 01       	movw	r26, r18
    112a:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    112c:	01 15       	cp	r16, r1
    112e:	11 05       	cpc	r17, r1
    1130:	21 05       	cpc	r18, r1
    1132:	31 05       	cpc	r19, r1
    1134:	09 f4       	brne	.+2      	; 0x1138 <chk_mounted+0x3ec>
    1136:	32 c2       	rjmp	.+1124   	; 0x159c <chk_mounted+0x850>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    1138:	06 3f       	cpi	r16, 0xF6	; 246
    113a:	4f e0       	ldi	r20, 0x0F	; 15
    113c:	14 07       	cpc	r17, r20
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	24 07       	cpc	r18, r20
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	34 07       	cpc	r19, r20
    1146:	18 f4       	brcc	.+6      	; 0x114e <chk_mounted+0x402>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    1148:	44 24       	eor	r4, r4
    114a:	43 94       	inc	r4
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <chk_mounted+0x408>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    114e:	44 24       	eor	r4, r4
    1150:	68 94       	set
    1152:	41 f8       	bld	r4, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1154:	86 3f       	cpi	r24, 0xF6	; 246
    1156:	5f ef       	ldi	r21, 0xFF	; 255
    1158:	95 07       	cpc	r25, r21
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	a5 07       	cpc	r26, r21
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	b5 07       	cpc	r27, r21
    1162:	08 f0       	brcs	.+2      	; 0x1166 <chk_mounted+0x41a>
    1164:	3b c2       	rjmp	.+1142   	; 0x15dc <chk_mounted+0x890>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1166:	b9 01       	movw	r22, r18
    1168:	a8 01       	movw	r20, r16
    116a:	4e 5f       	subi	r20, 0xFE	; 254
    116c:	5f 4f       	sbci	r21, 0xFF	; 255
    116e:	6f 4f       	sbci	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	ae 85       	ldd	r26, Y+14	; 0x0e
    1174:	bf 85       	ldd	r27, Y+15	; 0x0f
    1176:	5a 96       	adiw	r26, 0x1a	; 26
    1178:	4d 93       	st	X+, r20
    117a:	5d 93       	st	X+, r21
    117c:	6d 93       	st	X+, r22
    117e:	7c 93       	st	X, r23
    1180:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	ab 81       	ldd	r26, Y+3	; 0x03
    1188:	bc 81       	ldd	r27, Y+4	; 0x04
    118a:	8c 0d       	add	r24, r12
    118c:	9d 1d       	adc	r25, r13
    118e:	ae 1d       	adc	r26, r14
    1190:	bf 1d       	adc	r27, r15
    1192:	ee 85       	ldd	r30, Y+14	; 0x0e
    1194:	ff 85       	ldd	r31, Y+15	; 0x0f
    1196:	82 a7       	lds	r24, 0x72
    1198:	93 a7       	lds	r25, 0x73
    119a:	a4 a7       	lds	r26, 0x74
    119c:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    119e:	8e 81       	ldd	r24, Y+6	; 0x06
    11a0:	9f 81       	ldd	r25, Y+7	; 0x07
    11a2:	a8 85       	ldd	r26, Y+8	; 0x08
    11a4:	b9 85       	ldd	r27, Y+9	; 0x09
    11a6:	8c 0d       	add	r24, r12
    11a8:	9d 1d       	adc	r25, r13
    11aa:	ae 1d       	adc	r26, r14
    11ac:	bf 1d       	adc	r27, r15
    11ae:	82 a3       	lds	r24, 0x52
    11b0:	93 a3       	lds	r25, 0x53
    11b2:	a4 a3       	lds	r26, 0x54
    11b4:	b5 a3       	lds	r27, 0x55
	if (fmt == FS_FAT32) {
    11b6:	f3 e0       	ldi	r31, 0x03	; 3
    11b8:	4f 16       	cp	r4, r31
    11ba:	09 f0       	breq	.+2      	; 0x11be <chk_mounted+0x472>
    11bc:	46 c0       	rjmp	.+140    	; 0x124a <chk_mounted+0x4fe>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    11be:	21 14       	cp	r2, r1
    11c0:	31 04       	cpc	r3, r1
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <chk_mounted+0x47a>
    11c4:	ed c1       	rjmp	.+986    	; 0x15a0 <chk_mounted+0x854>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    11c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    11c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    11ca:	ef 59       	subi	r30, 0x9F	; 159
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	80 81       	ld	r24, Z
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	38 2f       	mov	r19, r24
    11d8:	22 27       	eor	r18, r18
    11da:	11 27       	eor	r17, r17
    11dc:	00 27       	eor	r16, r16
    11de:	ee 85       	ldd	r30, Y+14	; 0x0e
    11e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    11e2:	e0 5a       	subi	r30, 0xA0	; 160
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	dc 01       	movw	r26, r24
    11f0:	99 27       	eor	r25, r25
    11f2:	88 27       	eor	r24, r24
    11f4:	08 2b       	or	r16, r24
    11f6:	19 2b       	or	r17, r25
    11f8:	2a 2b       	or	r18, r26
    11fa:	3b 2b       	or	r19, r27
    11fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    11fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1200:	e2 5a       	subi	r30, 0xA2	; 162
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e0       	ldi	r26, 0x00	; 0
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	08 2b       	or	r16, r24
    120e:	19 2b       	or	r17, r25
    1210:	2a 2b       	or	r18, r26
    1212:	3b 2b       	or	r19, r27
    1214:	ee 85       	ldd	r30, Y+14	; 0x0e
    1216:	ff 85       	ldd	r31, Y+15	; 0x0f
    1218:	e1 5a       	subi	r30, 0xA1	; 161
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	90 81       	ld	r25, Z
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	80 2b       	or	r24, r16
    1226:	91 2b       	or	r25, r17
    1228:	a2 2b       	or	r26, r18
    122a:	b3 2b       	or	r27, r19
    122c:	ee 85       	ldd	r30, Y+14	; 0x0e
    122e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1230:	86 a3       	lds	r24, 0x56
    1232:	97 a3       	lds	r25, 0x57
    1234:	a0 a7       	lds	r26, 0x70
    1236:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    1238:	44 0f       	add	r20, r20
    123a:	55 1f       	adc	r21, r21
    123c:	66 1f       	adc	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	44 0f       	add	r20, r20
    1242:	55 1f       	adc	r21, r21
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	30 c0       	rjmp	.+96     	; 0x12aa <chk_mounted+0x55e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    124a:	21 14       	cp	r2, r1
    124c:	31 04       	cpc	r3, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <chk_mounted+0x506>
    1250:	a9 c1       	rjmp	.+850    	; 0x15a4 <chk_mounted+0x858>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1252:	0a 85       	ldd	r16, Y+10	; 0x0a
    1254:	1b 85       	ldd	r17, Y+11	; 0x0b
    1256:	2c 85       	ldd	r18, Y+12	; 0x0c
    1258:	3d 85       	ldd	r19, Y+13	; 0x0d
    125a:	80 0f       	add	r24, r16
    125c:	91 1f       	adc	r25, r17
    125e:	a2 1f       	adc	r26, r18
    1260:	b3 1f       	adc	r27, r19
    1262:	ee 85       	ldd	r30, Y+14	; 0x0e
    1264:	ff 85       	ldd	r31, Y+15	; 0x0f
    1266:	86 a3       	lds	r24, 0x56
    1268:	97 a3       	lds	r25, 0x57
    126a:	a0 a7       	lds	r26, 0x70
    126c:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    126e:	f2 e0       	ldi	r31, 0x02	; 2
    1270:	4f 16       	cp	r4, r31
    1272:	29 f4       	brne	.+10     	; 0x127e <chk_mounted+0x532>
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	66 1f       	adc	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	16 c0       	rjmp	.+44     	; 0x12aa <chk_mounted+0x55e>
    127e:	db 01       	movw	r26, r22
    1280:	ca 01       	movw	r24, r20
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	84 0f       	add	r24, r20
    128c:	95 1f       	adc	r25, r21
    128e:	a6 1f       	adc	r26, r22
    1290:	b7 1f       	adc	r27, r23
    1292:	b6 95       	lsr	r27
    1294:	a7 95       	ror	r26
    1296:	97 95       	ror	r25
    1298:	87 95       	ror	r24
    129a:	41 70       	andi	r20, 0x01	; 1
    129c:	50 70       	andi	r21, 0x00	; 0
    129e:	60 70       	andi	r22, 0x00	; 0
    12a0:	70 70       	andi	r23, 0x00	; 0
    12a2:	48 0f       	add	r20, r24
    12a4:	59 1f       	adc	r21, r25
    12a6:	6a 1f       	adc	r22, r26
    12a8:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    12aa:	db 01       	movw	r26, r22
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	9e 4f       	sbci	r25, 0xFE	; 254
    12b2:	af 4f       	sbci	r26, 0xFF	; 255
    12b4:	bf 4f       	sbci	r27, 0xFF	; 255
    12b6:	07 2e       	mov	r0, r23
    12b8:	79 e0       	ldi	r23, 0x09	; 9
    12ba:	b6 95       	lsr	r27
    12bc:	a7 95       	ror	r26
    12be:	97 95       	ror	r25
    12c0:	87 95       	ror	r24
    12c2:	7a 95       	dec	r23
    12c4:	d1 f7       	brne	.-12     	; 0x12ba <chk_mounted+0x56e>
    12c6:	70 2d       	mov	r23, r0
    12c8:	88 16       	cp	r8, r24
    12ca:	99 06       	cpc	r9, r25
    12cc:	aa 06       	cpc	r10, r26
    12ce:	bb 06       	cpc	r11, r27
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <chk_mounted+0x588>
    12d2:	6a c1       	rjmp	.+724    	; 0x15a8 <chk_mounted+0x85c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	dc 01       	movw	r26, r24
    12da:	ee 85       	ldd	r30, Y+14	; 0x0e
    12dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    12de:	86 87       	std	Z+14, r24	; 0x0e
    12e0:	97 87       	std	Z+15, r25	; 0x0f
    12e2:	a0 8b       	std	Z+16, r26	; 0x10
    12e4:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    12e6:	12 86       	std	Z+10, r1	; 0x0a
    12e8:	13 86       	std	Z+11, r1	; 0x0b
    12ea:	14 86       	std	Z+12, r1	; 0x0c
    12ec:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    12ee:	b3 e0       	ldi	r27, 0x03	; 3
    12f0:	4b 16       	cp	r4, r27
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <chk_mounted+0x5aa>
    12f4:	15 c1       	rjmp	.+554    	; 0x1520 <chk_mounted+0x7d4>
	 	fs->fsi_flag = 0;
    12f6:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    12f8:	ed 59       	subi	r30, 0x9D	; 157
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	30 81       	ld	r19, Z
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	ee 85       	ldd	r30, Y+14	; 0x0e
    1302:	ff 85       	ldd	r31, Y+15	; 0x0f
    1304:	ee 59       	subi	r30, 0x9E	; 158
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	82 2b       	or	r24, r18
    130e:	93 2b       	or	r25, r19
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	a7 01       	movw	r20, r14
    1316:	96 01       	movw	r18, r12
    1318:	28 0f       	add	r18, r24
    131a:	39 1f       	adc	r19, r25
    131c:	4a 1f       	adc	r20, r26
    131e:	5b 1f       	adc	r21, r27
    1320:	ae 85       	ldd	r26, Y+14	; 0x0e
    1322:	bf 85       	ldd	r27, Y+15	; 0x0f
    1324:	52 96       	adiw	r26, 0x12	; 18
    1326:	2d 93       	st	X+, r18
    1328:	3d 93       	st	X+, r19
    132a:	4d 93       	st	X+, r20
    132c:	5c 93       	st	X, r21
    132e:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1330:	bd 01       	movw	r22, r26
    1332:	6e 5c       	subi	r22, 0xCE	; 206
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	8c 91       	ld	r24, X
    133a:	01 e0       	ldi	r16, 0x01	; 1
    133c:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
    1340:	88 23       	and	r24, r24
    1342:	09 f0       	breq	.+2      	; 0x1346 <chk_mounted+0x5fa>
    1344:	ed c0       	rjmp	.+474    	; 0x1520 <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1346:	ee 85       	ldd	r30, Y+14	; 0x0e
    1348:	ff 85       	ldd	r31, Y+15	; 0x0f
    134a:	ef 5c       	subi	r30, 0xCF	; 207
    134c:	fd 4f       	sbci	r31, 0xFD	; 253
    134e:	30 81       	ld	r19, Z
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	ee 85       	ldd	r30, Y+14	; 0x0e
    1354:	ff 85       	ldd	r31, Y+15	; 0x0f
    1356:	e0 5d       	subi	r30, 0xD0	; 208
    1358:	fd 4f       	sbci	r31, 0xFD	; 253
    135a:	80 81       	ld	r24, Z
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	82 2b       	or	r24, r18
    1360:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1362:	ba ea       	ldi	r27, 0xAA	; 170
    1364:	85 35       	cpi	r24, 0x55	; 85
    1366:	9b 07       	cpc	r25, r27
    1368:	09 f0       	breq	.+2      	; 0x136c <chk_mounted+0x620>
    136a:	da c0       	rjmp	.+436    	; 0x1520 <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    136c:	ee 85       	ldd	r30, Y+14	; 0x0e
    136e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1370:	45 a9       	sts	0x45, r20
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	74 2f       	mov	r23, r20
    137a:	66 27       	eor	r22, r22
    137c:	55 27       	eor	r21, r21
    137e:	44 27       	eor	r20, r20
    1380:	84 a9       	sts	0x44, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	dc 01       	movw	r26, r24
    138a:	99 27       	eor	r25, r25
    138c:	88 27       	eor	r24, r24
    138e:	48 2b       	or	r20, r24
    1390:	59 2b       	or	r21, r25
    1392:	6a 2b       	or	r22, r26
    1394:	7b 2b       	or	r23, r27
    1396:	82 a9       	sts	0x42, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	48 2b       	or	r20, r24
    13a0:	59 2b       	or	r21, r25
    13a2:	6a 2b       	or	r22, r26
    13a4:	7b 2b       	or	r23, r27
    13a6:	93 a9       	sts	0x43, r25
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	84 2b       	or	r24, r20
    13b0:	95 2b       	or	r25, r21
    13b2:	a6 2b       	or	r26, r22
    13b4:	b7 2b       	or	r27, r23
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    13b6:	82 35       	cpi	r24, 0x52	; 82
    13b8:	f2 e5       	ldi	r31, 0x52	; 82
    13ba:	9f 07       	cpc	r25, r31
    13bc:	f1 e6       	ldi	r31, 0x61	; 97
    13be:	af 07       	cpc	r26, r31
    13c0:	f1 e4       	ldi	r31, 0x41	; 65
    13c2:	bf 07       	cpc	r27, r31
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <chk_mounted+0x67c>
    13c6:	ac c0       	rjmp	.+344    	; 0x1520 <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    13c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    13ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    13cc:	e7 5e       	subi	r30, 0xE7	; 231
    13ce:	fd 4f       	sbci	r31, 0xFD	; 253
    13d0:	80 81       	ld	r24, Z
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	b8 2f       	mov	r27, r24
    13da:	aa 27       	eor	r26, r26
    13dc:	99 27       	eor	r25, r25
    13de:	88 27       	eor	r24, r24
    13e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    13e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    13e4:	e8 5e       	subi	r30, 0xE8	; 232
    13e6:	fd 4f       	sbci	r31, 0xFD	; 253
    13e8:	40 81       	ld	r20, Z
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	ba 01       	movw	r22, r20
    13f2:	55 27       	eor	r21, r21
    13f4:	44 27       	eor	r20, r20
    13f6:	84 2b       	or	r24, r20
    13f8:	95 2b       	or	r25, r21
    13fa:	a6 2b       	or	r26, r22
    13fc:	b7 2b       	or	r27, r23
    13fe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1400:	ff 85       	ldd	r31, Y+15	; 0x0f
    1402:	ea 5e       	subi	r30, 0xEA	; 234
    1404:	fd 4f       	sbci	r31, 0xFD	; 253
    1406:	40 81       	ld	r20, Z
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	48 2b       	or	r20, r24
    1410:	59 2b       	or	r21, r25
    1412:	6a 2b       	or	r22, r26
    1414:	7b 2b       	or	r23, r27
    1416:	ee 85       	ldd	r30, Y+14	; 0x0e
    1418:	ff 85       	ldd	r31, Y+15	; 0x0f
    141a:	e9 5e       	subi	r30, 0xE9	; 233
    141c:	fd 4f       	sbci	r31, 0xFD	; 253
    141e:	90 81       	ld	r25, Z
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	a0 e0       	ldi	r26, 0x00	; 0
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	84 2b       	or	r24, r20
    1428:	95 2b       	or	r25, r21
    142a:	a6 2b       	or	r26, r22
    142c:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    142e:	82 37       	cpi	r24, 0x72	; 114
    1430:	02 e7       	ldi	r16, 0x72	; 114
    1432:	90 07       	cpc	r25, r16
    1434:	01 e4       	ldi	r16, 0x41	; 65
    1436:	a0 07       	cpc	r26, r16
    1438:	01 e6       	ldi	r16, 0x61	; 97
    143a:	b0 07       	cpc	r27, r16
    143c:	09 f0       	breq	.+2      	; 0x1440 <chk_mounted+0x6f4>
    143e:	70 c0       	rjmp	.+224    	; 0x1520 <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1440:	ee 85       	ldd	r30, Y+14	; 0x0e
    1442:	ff 85       	ldd	r31, Y+15	; 0x0f
    1444:	ef 5d       	subi	r30, 0xDF	; 223
    1446:	fd 4f       	sbci	r31, 0xFD	; 253
    1448:	80 81       	ld	r24, Z
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a0 e0       	ldi	r26, 0x00	; 0
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	b8 2f       	mov	r27, r24
    1452:	aa 27       	eor	r26, r26
    1454:	99 27       	eor	r25, r25
    1456:	88 27       	eor	r24, r24
    1458:	ee 85       	ldd	r30, Y+14	; 0x0e
    145a:	ff 85       	ldd	r31, Y+15	; 0x0f
    145c:	e0 5e       	subi	r30, 0xE0	; 224
    145e:	fd 4f       	sbci	r31, 0xFD	; 253
    1460:	40 81       	ld	r20, Z
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	ba 01       	movw	r22, r20
    146a:	55 27       	eor	r21, r21
    146c:	44 27       	eor	r20, r20
    146e:	84 2b       	or	r24, r20
    1470:	95 2b       	or	r25, r21
    1472:	a6 2b       	or	r26, r22
    1474:	b7 2b       	or	r27, r23
    1476:	ee 85       	ldd	r30, Y+14	; 0x0e
    1478:	ff 85       	ldd	r31, Y+15	; 0x0f
    147a:	e2 5e       	subi	r30, 0xE2	; 226
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	40 81       	ld	r20, Z
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	48 2b       	or	r20, r24
    1488:	59 2b       	or	r21, r25
    148a:	6a 2b       	or	r22, r26
    148c:	7b 2b       	or	r23, r27
    148e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1490:	ff 85       	ldd	r31, Y+15	; 0x0f
    1492:	e1 5e       	subi	r30, 0xE1	; 225
    1494:	fd 4f       	sbci	r31, 0xFD	; 253
    1496:	90 81       	ld	r25, Z
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	84 2b       	or	r24, r20
    14a0:	95 2b       	or	r25, r21
    14a2:	a6 2b       	or	r26, r22
    14a4:	b7 2b       	or	r27, r23
    14a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    14a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    14aa:	82 87       	std	Z+10, r24	; 0x0a
    14ac:	93 87       	std	Z+11, r25	; 0x0b
    14ae:	a4 87       	std	Z+12, r26	; 0x0c
    14b0:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    14b2:	e3 5e       	subi	r30, 0xE3	; 227
    14b4:	fd 4f       	sbci	r31, 0xFD	; 253
    14b6:	80 81       	ld	r24, Z
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e0       	ldi	r26, 0x00	; 0
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	b8 2f       	mov	r27, r24
    14c0:	aa 27       	eor	r26, r26
    14c2:	99 27       	eor	r25, r25
    14c4:	88 27       	eor	r24, r24
    14c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    14c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ca:	e4 5e       	subi	r30, 0xE4	; 228
    14cc:	fd 4f       	sbci	r31, 0xFD	; 253
    14ce:	40 81       	ld	r20, Z
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	ba 01       	movw	r22, r20
    14d8:	55 27       	eor	r21, r21
    14da:	44 27       	eor	r20, r20
    14dc:	84 2b       	or	r24, r20
    14de:	95 2b       	or	r25, r21
    14e0:	a6 2b       	or	r26, r22
    14e2:	b7 2b       	or	r27, r23
    14e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    14e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    14e8:	e6 5e       	subi	r30, 0xE6	; 230
    14ea:	fd 4f       	sbci	r31, 0xFD	; 253
    14ec:	40 81       	ld	r20, Z
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	48 2b       	or	r20, r24
    14f6:	59 2b       	or	r21, r25
    14f8:	6a 2b       	or	r22, r26
    14fa:	7b 2b       	or	r23, r27
    14fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    14fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1500:	e5 5e       	subi	r30, 0xE5	; 229
    1502:	fd 4f       	sbci	r31, 0xFD	; 253
    1504:	90 81       	ld	r25, Z
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	84 2b       	or	r24, r20
    150e:	95 2b       	or	r25, r21
    1510:	a6 2b       	or	r26, r22
    1512:	b7 2b       	or	r27, r23
    1514:	ee 85       	ldd	r30, Y+14	; 0x0e
    1516:	ff 85       	ldd	r31, Y+15	; 0x0f
    1518:	86 87       	std	Z+14, r24	; 0x0e
    151a:	97 87       	std	Z+15, r25	; 0x0f
    151c:	a0 8b       	std	Z+16, r26	; 0x10
    151e:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1520:	ae 85       	ldd	r26, Y+14	; 0x0e
    1522:	bf 85       	ldd	r27, Y+15	; 0x0f
    1524:	4c 92       	st	X, r4
	fs->id = ++Fsid;		/* File system mount ID */
    1526:	80 91 30 01 	lds	r24, 0x0130
    152a:	90 91 31 01 	lds	r25, 0x0131
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	90 93 31 01 	sts	0x0131, r25
    1534:	80 93 30 01 	sts	0x0130, r24
    1538:	17 96       	adiw	r26, 0x07	; 7
    153a:	9c 93       	st	X, r25
    153c:	8e 93       	st	-X, r24
    153e:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    1540:	fd 01       	movw	r30, r26
    1542:	16 a6       	lds	r17, 0xb6
    1544:	17 a6       	lds	r17, 0xb7
    1546:	10 aa       	sts	0x90, r17
    1548:	11 aa       	sts	0x91, r17
	fs->wflag = 0;
    154a:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    154c:	56 96       	adiw	r26, 0x16	; 22
    154e:	1d 92       	st	X+, r1
    1550:	1d 92       	st	X+, r1
    1552:	1d 92       	st	X+, r1
    1554:	1c 92       	st	X, r1
    1556:	59 97       	sbiw	r26, 0x19	; 25
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	27 c0       	rjmp	.+78     	; 0x15aa <chk_mounted+0x85e>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    155c:	8b e0       	ldi	r24, 0x0B	; 11
    155e:	25 c0       	rjmp	.+74     	; 0x15aa <chk_mounted+0x85e>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1560:	8c e0       	ldi	r24, 0x0C	; 12
    1562:	23 c0       	rjmp	.+70     	; 0x15aa <chk_mounted+0x85e>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	21 c0       	rjmp	.+66     	; 0x15aa <chk_mounted+0x85e>
	*rfs = fs;							/* Return pointer to the corresponding file system object */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
    1568:	8a e0       	ldi	r24, 0x0A	; 10
    156a:	1f c0       	rjmp	.+62     	; 0x15aa <chk_mounted+0x85e>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	1d c0       	rjmp	.+58     	; 0x15aa <chk_mounted+0x85e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	1b c0       	rjmp	.+54     	; 0x15aa <chk_mounted+0x85e>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1574:	8d e0       	ldi	r24, 0x0D	; 13
    1576:	19 c0       	rjmp	.+50     	; 0x15aa <chk_mounted+0x85e>
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	17 c0       	rjmp	.+46     	; 0x15aa <chk_mounted+0x85e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    157c:	8d e0       	ldi	r24, 0x0D	; 13
    157e:	15 c0       	rjmp	.+42     	; 0x15aa <chk_mounted+0x85e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    1580:	8d e0       	ldi	r24, 0x0D	; 13
    1582:	13 c0       	rjmp	.+38     	; 0x15aa <chk_mounted+0x85e>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1584:	8d e0       	ldi	r24, 0x0D	; 13
    1586:	11 c0       	rjmp	.+34     	; 0x15aa <chk_mounted+0x85e>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1588:	8d e0       	ldi	r24, 0x0D	; 13
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <chk_mounted+0x85e>
    158c:	8d e0       	ldi	r24, 0x0D	; 13
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <chk_mounted+0x85e>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1590:	8d e0       	ldi	r24, 0x0D	; 13
    1592:	0b c0       	rjmp	.+22     	; 0x15aa <chk_mounted+0x85e>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1594:	8d e0       	ldi	r24, 0x0D	; 13
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <chk_mounted+0x85e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1598:	8d e0       	ldi	r24, 0x0D	; 13
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <chk_mounted+0x85e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    159c:	8d e0       	ldi	r24, 0x0D	; 13
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <chk_mounted+0x85e>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    15a0:	8d e0       	ldi	r24, 0x0D	; 13
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <chk_mounted+0x85e>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    15a4:	8d e0       	ldi	r24, 0x0D	; 13
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <chk_mounted+0x85e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    15a8:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    15aa:	2f 96       	adiw	r28, 0x0f	; 15
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	9f 90       	pop	r9
    15cc:	8f 90       	pop	r8
    15ce:	7f 90       	pop	r7
    15d0:	6f 90       	pop	r6
    15d2:	5f 90       	pop	r5
    15d4:	4f 90       	pop	r4
    15d6:	3f 90       	pop	r3
    15d8:	2f 90       	pop	r2
    15da:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    15dc:	b9 01       	movw	r22, r18
    15de:	a8 01       	movw	r20, r16
    15e0:	4e 5f       	subi	r20, 0xFE	; 254
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	6f 4f       	sbci	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    15ec:	42 8f       	std	Z+26, r20	; 0x1a
    15ee:	53 8f       	std	Z+27, r21	; 0x1b
    15f0:	64 8f       	std	Z+28, r22	; 0x1c
    15f2:	75 8f       	std	Z+29, r23	; 0x1d
	fs->database = bsect + sysect;						/* Data start sector */
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	ab 81       	ldd	r26, Y+3	; 0x03
    15fa:	bc 81       	ldd	r27, Y+4	; 0x04
    15fc:	8c 0d       	add	r24, r12
    15fe:	9d 1d       	adc	r25, r13
    1600:	ae 1d       	adc	r26, r14
    1602:	bf 1d       	adc	r27, r15
    1604:	82 a7       	lds	r24, 0x72
    1606:	93 a7       	lds	r25, 0x73
    1608:	a4 a7       	lds	r26, 0x74
    160a:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	a8 85       	ldd	r26, Y+8	; 0x08
    1612:	b9 85       	ldd	r27, Y+9	; 0x09
    1614:	8c 0d       	add	r24, r12
    1616:	9d 1d       	adc	r25, r13
    1618:	ae 1d       	adc	r26, r14
    161a:	bf 1d       	adc	r27, r15
    161c:	82 a3       	lds	r24, 0x52
    161e:	93 a3       	lds	r25, 0x53
    1620:	a4 a3       	lds	r26, 0x54
    1622:	b5 a3       	lds	r27, 0x55
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1624:	0f 2e       	mov	r0, r31
    1626:	f3 e0       	ldi	r31, 0x03	; 3
    1628:	4f 2e       	mov	r4, r31
    162a:	f0 2d       	mov	r31, r0
    162c:	c8 cd       	rjmp	.-1136   	; 0x11be <chk_mounted+0x472>

0000162e <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    162e:	4f 92       	push	r4
    1630:	5f 92       	push	r5
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	cf 93       	push	r28
    164a:	5c 01       	movw	r10, r24
    164c:	2a 01       	movw	r4, r20
    164e:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
    1650:	fc 01       	movw	r30, r24
    1652:	c6 a4       	lds	r28, 0xa6
    1654:	d7 a4       	lds	r29, 0xa7
    1656:	e0 a8       	sts	0x00, r30
    1658:	f1 a8       	sts	0x81, r31
	if (wsect != sector) {	/* Changed current window */
    165a:	c4 16       	cp	r12, r20
    165c:	d5 06       	cpc	r13, r21
    165e:	e6 06       	cpc	r14, r22
    1660:	f7 06       	cpc	r15, r23
    1662:	09 f4       	brne	.+2      	; 0x1666 <move_window+0x38>
    1664:	54 c0       	rjmp	.+168    	; 0x170e <move_window+0xe0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1666:	84 81       	ldd	r24, Z+4	; 0x04
    1668:	88 23       	and	r24, r24
    166a:	d1 f1       	breq	.+116    	; 0x16e0 <move_window+0xb2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    166c:	0f 2e       	mov	r0, r31
    166e:	f2 e3       	ldi	r31, 0x32	; 50
    1670:	8f 2e       	mov	r8, r31
    1672:	99 24       	eor	r9, r9
    1674:	f0 2d       	mov	r31, r0
    1676:	8a 0c       	add	r8, r10
    1678:	9b 1c       	adc	r9, r11
    167a:	81 81       	ldd	r24, Z+1	; 0x01
    167c:	b4 01       	movw	r22, r8
    167e:	a7 01       	movw	r20, r14
    1680:	96 01       	movw	r18, r12
    1682:	01 e0       	ldi	r16, 0x01	; 1
    1684:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
    1688:	88 23       	and	r24, r24
    168a:	09 f0       	breq	.+2      	; 0x168e <move_window+0x60>
    168c:	42 c0       	rjmp	.+132    	; 0x1712 <move_window+0xe4>
				return FR_DISK_ERR;
			fs->wflag = 0;
    168e:	f5 01       	movw	r30, r10
    1690:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1692:	46 8d       	ldd	r20, Z+30	; 0x1e
    1694:	57 8d       	ldd	r21, Z+31	; 0x1f
    1696:	60 a1       	lds	r22, 0x40
    1698:	71 a1       	lds	r23, 0x41
    169a:	82 a1       	lds	r24, 0x42
    169c:	93 a1       	lds	r25, 0x43
    169e:	a4 a1       	lds	r26, 0x44
    16a0:	b5 a1       	lds	r27, 0x45
    16a2:	84 0f       	add	r24, r20
    16a4:	95 1f       	adc	r25, r21
    16a6:	a6 1f       	adc	r26, r22
    16a8:	b7 1f       	adc	r27, r23
    16aa:	c8 16       	cp	r12, r24
    16ac:	d9 06       	cpc	r13, r25
    16ae:	ea 06       	cpc	r14, r26
    16b0:	fb 06       	cpc	r15, r27
    16b2:	b0 f4       	brcc	.+44     	; 0x16e0 <move_window+0xb2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16b4:	c3 81       	ldd	r28, Z+3	; 0x03
    16b6:	c2 30       	cpi	r28, 0x02	; 2
    16b8:	98 f0       	brcs	.+38     	; 0x16e0 <move_window+0xb2>
					wsect += fs->fsize;
    16ba:	f5 01       	movw	r30, r10
    16bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    16be:	97 8d       	ldd	r25, Z+31	; 0x1f
    16c0:	a0 a1       	lds	r26, 0x40
    16c2:	b1 a1       	lds	r27, 0x41
    16c4:	c8 0e       	add	r12, r24
    16c6:	d9 1e       	adc	r13, r25
    16c8:	ea 1e       	adc	r14, r26
    16ca:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	b4 01       	movw	r22, r8
    16d0:	a7 01       	movw	r20, r14
    16d2:	96 01       	movw	r18, r12
    16d4:	01 e0       	ldi	r16, 0x01	; 1
    16d6:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16da:	c1 50       	subi	r28, 0x01	; 1
    16dc:	c1 30       	cpi	r28, 0x01	; 1
    16de:	69 f7       	brne	.-38     	; 0x16ba <move_window+0x8c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    16e0:	41 14       	cp	r4, r1
    16e2:	51 04       	cpc	r5, r1
    16e4:	61 04       	cpc	r6, r1
    16e6:	71 04       	cpc	r7, r1
    16e8:	b1 f0       	breq	.+44     	; 0x1716 <move_window+0xe8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    16ea:	b5 01       	movw	r22, r10
    16ec:	6e 5c       	subi	r22, 0xCE	; 206
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	f5 01       	movw	r30, r10
    16f2:	81 81       	ldd	r24, Z+1	; 0x01
    16f4:	a3 01       	movw	r20, r6
    16f6:	92 01       	movw	r18, r4
    16f8:	01 e0       	ldi	r16, 0x01	; 1
    16fa:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
    16fe:	88 23       	and	r24, r24
    1700:	61 f4       	brne	.+24     	; 0x171a <move_window+0xec>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1702:	f5 01       	movw	r30, r10
    1704:	46 a6       	lds	r20, 0xb6
    1706:	57 a6       	lds	r21, 0xb7
    1708:	60 aa       	sts	0x90, r22
    170a:	71 aa       	sts	0x91, r23
    170c:	07 c0       	rjmp	.+14     	; 0x171c <move_window+0xee>
		}
	}

	return FR_OK;
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	05 c0       	rjmp	.+10     	; 0x171c <move_window+0xee>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	03 c0       	rjmp	.+6      	; 0x171c <move_window+0xee>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	01 c0       	rjmp	.+2      	; 0x171c <move_window+0xee>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    171a:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    171c:	cf 91       	pop	r28
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	08 95       	ret

0000173a <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	ba 01       	movw	r22, r20
    174c:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    1750:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1752:	88 23       	and	r24, r24
    1754:	09 f0       	breq	.+2      	; 0x1758 <sync+0x1e>
    1756:	76 c0       	rjmp	.+236    	; 0x1844 <sync+0x10a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1758:	f7 01       	movw	r30, r14
    175a:	80 81       	ld	r24, Z
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	09 f0       	breq	.+2      	; 0x1762 <sync+0x28>
    1760:	68 c0       	rjmp	.+208    	; 0x1832 <sync+0xf8>
    1762:	85 81       	ldd	r24, Z+5	; 0x05
    1764:	88 23       	and	r24, r24
    1766:	09 f4       	brne	.+2      	; 0x176a <sync+0x30>
    1768:	64 c0       	rjmp	.+200    	; 0x1832 <sync+0xf8>
			fs->winsect = 0;
    176a:	16 a6       	lds	r17, 0xb6
    176c:	17 a6       	lds	r17, 0xb7
    176e:	10 aa       	sts	0x90, r17
    1770:	11 aa       	sts	0x91, r17
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    1772:	87 01       	movw	r16, r14
    1774:	0e 5c       	subi	r16, 0xCE	; 206
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	c8 01       	movw	r24, r16
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	52 e0       	ldi	r21, 0x02	; 2
    1782:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1786:	f7 01       	movw	r30, r14
    1788:	e0 5d       	subi	r30, 0xD0	; 208
    178a:	fd 4f       	sbci	r31, 0xFD	; 253
    178c:	85 e5       	ldi	r24, 0x55	; 85
    178e:	80 83       	st	Z, r24
    1790:	f7 01       	movw	r30, r14
    1792:	ef 5c       	subi	r30, 0xCF	; 207
    1794:	fd 4f       	sbci	r31, 0xFD	; 253
    1796:	8a ea       	ldi	r24, 0xAA	; 170
    1798:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    179a:	82 e5       	ldi	r24, 0x52	; 82
    179c:	f7 01       	movw	r30, r14
    179e:	82 ab       	sts	0x52, r24
    17a0:	83 ab       	sts	0x53, r24
    17a2:	81 e6       	ldi	r24, 0x61	; 97
    17a4:	84 ab       	sts	0x54, r24
    17a6:	91 e4       	ldi	r25, 0x41	; 65
    17a8:	95 ab       	sts	0x55, r25
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    17aa:	ea 5e       	subi	r30, 0xEA	; 234
    17ac:	fd 4f       	sbci	r31, 0xFD	; 253
    17ae:	22 e7       	ldi	r18, 0x72	; 114
    17b0:	20 83       	st	Z, r18
    17b2:	f7 01       	movw	r30, r14
    17b4:	e9 5e       	subi	r30, 0xE9	; 233
    17b6:	fd 4f       	sbci	r31, 0xFD	; 253
    17b8:	20 83       	st	Z, r18
    17ba:	f7 01       	movw	r30, r14
    17bc:	e8 5e       	subi	r30, 0xE8	; 232
    17be:	fd 4f       	sbci	r31, 0xFD	; 253
    17c0:	90 83       	st	Z, r25
    17c2:	f7 01       	movw	r30, r14
    17c4:	e7 5e       	subi	r30, 0xE7	; 231
    17c6:	fd 4f       	sbci	r31, 0xFD	; 253
    17c8:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    17ca:	f7 01       	movw	r30, r14
    17cc:	36 85       	ldd	r19, Z+14	; 0x0e
    17ce:	27 85       	ldd	r18, Z+15	; 0x0f
    17d0:	90 89       	ldd	r25, Z+16	; 0x10
    17d2:	81 89       	ldd	r24, Z+17	; 0x11
    17d4:	e6 5e       	subi	r30, 0xE6	; 230
    17d6:	fd 4f       	sbci	r31, 0xFD	; 253
    17d8:	30 83       	st	Z, r19
    17da:	f7 01       	movw	r30, r14
    17dc:	e5 5e       	subi	r30, 0xE5	; 229
    17de:	fd 4f       	sbci	r31, 0xFD	; 253
    17e0:	20 83       	st	Z, r18
    17e2:	f7 01       	movw	r30, r14
    17e4:	e4 5e       	subi	r30, 0xE4	; 228
    17e6:	fd 4f       	sbci	r31, 0xFD	; 253
    17e8:	90 83       	st	Z, r25
    17ea:	f7 01       	movw	r30, r14
    17ec:	e3 5e       	subi	r30, 0xE3	; 227
    17ee:	fd 4f       	sbci	r31, 0xFD	; 253
    17f0:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    17f2:	f7 01       	movw	r30, r14
    17f4:	32 85       	ldd	r19, Z+10	; 0x0a
    17f6:	23 85       	ldd	r18, Z+11	; 0x0b
    17f8:	94 85       	ldd	r25, Z+12	; 0x0c
    17fa:	85 85       	ldd	r24, Z+13	; 0x0d
    17fc:	e2 5e       	subi	r30, 0xE2	; 226
    17fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1800:	30 83       	st	Z, r19
    1802:	f7 01       	movw	r30, r14
    1804:	e1 5e       	subi	r30, 0xE1	; 225
    1806:	fd 4f       	sbci	r31, 0xFD	; 253
    1808:	20 83       	st	Z, r18
    180a:	f7 01       	movw	r30, r14
    180c:	e0 5e       	subi	r30, 0xE0	; 224
    180e:	fd 4f       	sbci	r31, 0xFD	; 253
    1810:	90 83       	st	Z, r25
    1812:	f7 01       	movw	r30, r14
    1814:	ef 5d       	subi	r30, 0xDF	; 223
    1816:	fd 4f       	sbci	r31, 0xFD	; 253
    1818:	80 83       	st	Z, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    181a:	f7 01       	movw	r30, r14
    181c:	22 89       	ldd	r18, Z+18	; 0x12
    181e:	33 89       	ldd	r19, Z+19	; 0x13
    1820:	44 89       	ldd	r20, Z+20	; 0x14
    1822:	55 89       	ldd	r21, Z+21	; 0x15
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	b8 01       	movw	r22, r16
    1828:	01 e0       	ldi	r16, 0x01	; 1
    182a:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
			fs->fsi_flag = 0;
    182e:	f7 01       	movw	r30, r14
    1830:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    1832:	f7 01       	movw	r30, r14
    1834:	81 81       	ldd	r24, Z+1	; 0x01
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	0e 94 02 03 	call	0x604	; 0x604 <disk_ioctl>
    1840:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
    1842:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
    1844:	8c 2f       	mov	r24, r28
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret

00001852 <get_fattime>:
#include "diskio.h"		/* Declarations of low level disk I/O functions */

DWORD get_fattime( void )
{
	return 0;
}
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	cb 01       	movw	r24, r22
    1858:	08 95       	ret

0000185a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	ec 01       	movw	r28, r24
    1864:	db 01       	movw	r26, r22
    1866:	ca 01       	movw	r24, r20
	clst -= 2;
    1868:	02 97       	sbiw	r24, 0x02	; 2
    186a:	a1 09       	sbc	r26, r1
    186c:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    186e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1870:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1872:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1874:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1876:	42 50       	subi	r20, 0x02	; 2
    1878:	50 40       	sbci	r21, 0x00	; 0
    187a:	60 40       	sbci	r22, 0x00	; 0
    187c:	70 40       	sbci	r23, 0x00	; 0
    187e:	84 17       	cp	r24, r20
    1880:	95 07       	cpc	r25, r21
    1882:	a6 07       	cpc	r26, r22
    1884:	b7 07       	cpc	r27, r23
    1886:	98 f4       	brcc	.+38     	; 0x18ae <clust2sect+0x54>
	return clst * fs->csize + fs->database;
    1888:	2a 81       	ldd	r18, Y+2	; 0x02
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 20 24 	call	0x4840	; 0x4840 <__mulsi3>
    1898:	8b 01       	movw	r16, r22
    189a:	9c 01       	movw	r18, r24
    189c:	8a a5       	lds	r24, 0x6a
    189e:	9b a5       	lds	r25, 0x6b
    18a0:	ac a5       	lds	r26, 0x6c
    18a2:	bd a5       	lds	r27, 0x6d
    18a4:	08 0f       	add	r16, r24
    18a6:	19 1f       	adc	r17, r25
    18a8:	2a 1f       	adc	r18, r26
    18aa:	3b 1f       	adc	r19, r27
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    18ae:	00 e0       	ldi	r16, 0x00	; 0
    18b0:	10 e0       	ldi	r17, 0x00	; 0
    18b2:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
    18b4:	60 2f       	mov	r22, r16
    18b6:	71 2f       	mov	r23, r17
    18b8:	82 2f       	mov	r24, r18
    18ba:	93 2f       	mov	r25, r19
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ec 01       	movw	r28, r24
    18da:	6a 01       	movw	r12, r20
    18dc:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    18de:	42 30       	cpi	r20, 0x02	; 2
    18e0:	51 05       	cpc	r21, r1
    18e2:	61 05       	cpc	r22, r1
    18e4:	71 05       	cpc	r23, r1
    18e6:	08 f4       	brcc	.+2      	; 0x18ea <get_fat+0x24>
    18e8:	cf c0       	rjmp	.+414    	; 0x1a88 <get_fat+0x1c2>
    18ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ee:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18f0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18f2:	48 17       	cp	r20, r24
    18f4:	59 07       	cpc	r21, r25
    18f6:	6a 07       	cpc	r22, r26
    18f8:	7b 07       	cpc	r23, r27
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <get_fat+0x38>
    18fc:	ca c0       	rjmp	.+404    	; 0x1a92 <get_fat+0x1cc>
		return 1;

	switch (fs->fs_type) {
    18fe:	88 81       	ld	r24, Y
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	09 f4       	brne	.+2      	; 0x1906 <get_fat+0x40>
    1904:	5c c0       	rjmp	.+184    	; 0x19be <get_fat+0xf8>
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	09 f4       	brne	.+2      	; 0x190c <get_fat+0x46>
    190a:	7b c0       	rjmp	.+246    	; 0x1a02 <get_fat+0x13c>
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	09 f0       	breq	.+2      	; 0x1912 <get_fat+0x4c>
    1910:	c5 c0       	rjmp	.+394    	; 0x1a9c <get_fat+0x1d6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1912:	9a 01       	movw	r18, r20
    1914:	36 95       	lsr	r19
    1916:	27 95       	ror	r18
    1918:	89 01       	movw	r16, r18
    191a:	04 0f       	add	r16, r20
    191c:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    191e:	a8 01       	movw	r20, r16
    1920:	45 2f       	mov	r20, r21
    1922:	55 27       	eor	r21, r21
    1924:	46 95       	lsr	r20
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	8a a1       	lds	r24, 0x4a
    192c:	9b a1       	lds	r25, 0x4b
    192e:	ac a1       	lds	r26, 0x4c
    1930:	bd a1       	lds	r27, 0x4d
    1932:	48 0f       	add	r20, r24
    1934:	59 1f       	adc	r21, r25
    1936:	6a 1f       	adc	r22, r26
    1938:	7b 1f       	adc	r23, r27
    193a:	ce 01       	movw	r24, r28
    193c:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    1940:	88 23       	and	r24, r24
    1942:	09 f0       	breq	.+2      	; 0x1946 <get_fat+0x80>
    1944:	af c0       	rjmp	.+350    	; 0x1aa4 <get_fat+0x1de>
		wc = fs->win[bc % SS(fs)]; bc++;
    1946:	f8 01       	movw	r30, r16
    1948:	f1 70       	andi	r31, 0x01	; 1
    194a:	ec 0f       	add	r30, r28
    194c:	fd 1f       	adc	r31, r29
    194e:	b2 a8       	sts	0x82, r27
    1950:	0f 5f       	subi	r16, 0xFF	; 255
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1954:	a8 01       	movw	r20, r16
    1956:	45 2f       	mov	r20, r21
    1958:	55 27       	eor	r21, r21
    195a:	46 95       	lsr	r20
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	8a a1       	lds	r24, 0x4a
    1962:	9b a1       	lds	r25, 0x4b
    1964:	ac a1       	lds	r26, 0x4c
    1966:	bd a1       	lds	r27, 0x4d
    1968:	48 0f       	add	r20, r24
    196a:	59 1f       	adc	r21, r25
    196c:	6a 1f       	adc	r22, r26
    196e:	7b 1f       	adc	r23, r27
    1970:	ce 01       	movw	r24, r28
    1972:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    1976:	88 23       	and	r24, r24
    1978:	09 f0       	breq	.+2      	; 0x197c <get_fat+0xb6>
    197a:	98 c0       	rjmp	.+304    	; 0x1aac <get_fat+0x1e6>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    197c:	2b 2d       	mov	r18, r11
    197e:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1980:	f8 01       	movw	r30, r16
    1982:	f1 70       	andi	r31, 0x01	; 1
    1984:	ec 0f       	add	r30, r28
    1986:	fd 1f       	adc	r31, r29
    1988:	92 a9       	sts	0x42, r25
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	82 2b       	or	r24, r18
    198e:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1990:	21 e0       	ldi	r18, 0x01	; 1
    1992:	c2 22       	and	r12, r18
    1994:	dd 24       	eor	r13, r13
    1996:	c1 14       	cp	r12, r1
    1998:	d1 04       	cpc	r13, r1
    199a:	51 f0       	breq	.+20     	; 0x19b0 <get_fat+0xea>
    199c:	92 95       	swap	r25
    199e:	82 95       	swap	r24
    19a0:	8f 70       	andi	r24, 0x0F	; 15
    19a2:	89 27       	eor	r24, r25
    19a4:	9f 70       	andi	r25, 0x0F	; 15
    19a6:	89 27       	eor	r24, r25
    19a8:	8c 01       	movw	r16, r24
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	89 c0       	rjmp	.+274    	; 0x1ac2 <get_fat+0x1fc>
    19b0:	8c 01       	movw	r16, r24
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	1f 70       	andi	r17, 0x0F	; 15
    19b8:	20 70       	andi	r18, 0x00	; 0
    19ba:	30 70       	andi	r19, 0x00	; 0
    19bc:	82 c0       	rjmp	.+260    	; 0x1ac2 <get_fat+0x1fc>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    19be:	45 2f       	mov	r20, r21
    19c0:	56 2f       	mov	r21, r22
    19c2:	67 2f       	mov	r22, r23
    19c4:	77 27       	eor	r23, r23
    19c6:	8a a1       	lds	r24, 0x4a
    19c8:	9b a1       	lds	r25, 0x4b
    19ca:	ac a1       	lds	r26, 0x4c
    19cc:	bd a1       	lds	r27, 0x4d
    19ce:	48 0f       	add	r20, r24
    19d0:	59 1f       	adc	r21, r25
    19d2:	6a 1f       	adc	r22, r26
    19d4:	7b 1f       	adc	r23, r27
    19d6:	ce 01       	movw	r24, r28
    19d8:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    19dc:	88 23       	and	r24, r24
    19de:	09 f0       	breq	.+2      	; 0x19e2 <get_fat+0x11c>
    19e0:	69 c0       	rjmp	.+210    	; 0x1ab4 <get_fat+0x1ee>
		p = &fs->win[clst * 2 % SS(fs)];
    19e2:	f6 01       	movw	r30, r12
    19e4:	ee 0f       	add	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    19ea:	ce 0f       	add	r28, r30
    19ec:	df 1f       	adc	r29, r31
    19ee:	9b a9       	sts	0x4b, r25
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	0a a9       	sts	0x4a, r16
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	80 2b       	or	r24, r16
    19f8:	91 2b       	or	r25, r17
    19fa:	8c 01       	movw	r16, r24
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	60 c0       	rjmp	.+192    	; 0x1ac2 <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1a02:	68 94       	set
    1a04:	16 f8       	bld	r1, 6
    1a06:	76 95       	lsr	r23
    1a08:	67 95       	ror	r22
    1a0a:	57 95       	ror	r21
    1a0c:	47 95       	ror	r20
    1a0e:	16 94       	lsr	r1
    1a10:	d1 f7       	brne	.-12     	; 0x1a06 <get_fat+0x140>
    1a12:	8a a1       	lds	r24, 0x4a
    1a14:	9b a1       	lds	r25, 0x4b
    1a16:	ac a1       	lds	r26, 0x4c
    1a18:	bd a1       	lds	r27, 0x4d
    1a1a:	48 0f       	add	r20, r24
    1a1c:	59 1f       	adc	r21, r25
    1a1e:	6a 1f       	adc	r22, r26
    1a20:	7b 1f       	adc	r23, r27
    1a22:	ce 01       	movw	r24, r28
    1a24:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <get_fat+0x168>
    1a2c:	47 c0       	rjmp	.+142    	; 0x1abc <get_fat+0x1f6>
		p = &fs->win[clst * 4 % SS(fs)];
    1a2e:	f6 01       	movw	r30, r12
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    1a3a:	ce 0f       	add	r28, r30
    1a3c:	df 1f       	adc	r29, r31
    1a3e:	0d a9       	sts	0x4d, r16
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	30 2f       	mov	r19, r16
    1a48:	22 27       	eor	r18, r18
    1a4a:	11 27       	eor	r17, r17
    1a4c:	00 27       	eor	r16, r16
    1a4e:	8c a9       	sts	0x4c, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	99 27       	eor	r25, r25
    1a5a:	88 27       	eor	r24, r24
    1a5c:	08 2b       	or	r16, r24
    1a5e:	19 2b       	or	r17, r25
    1a60:	2a 2b       	or	r18, r26
    1a62:	3b 2b       	or	r19, r27
    1a64:	8a a9       	sts	0x4a, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e0       	ldi	r26, 0x00	; 0
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	08 2b       	or	r16, r24
    1a6e:	19 2b       	or	r17, r25
    1a70:	2a 2b       	or	r18, r26
    1a72:	3b 2b       	or	r19, r27
    1a74:	9b a9       	sts	0x4b, r25
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	08 2b       	or	r16, r24
    1a7e:	19 2b       	or	r17, r25
    1a80:	2a 2b       	or	r18, r26
    1a82:	3b 2b       	or	r19, r27
    1a84:	3f 70       	andi	r19, 0x0F	; 15
    1a86:	1d c0       	rjmp	.+58     	; 0x1ac2 <get_fat+0x1fc>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    1a88:	01 e0       	ldi	r16, 0x01	; 1
    1a8a:	10 e0       	ldi	r17, 0x00	; 0
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <get_fat+0x1fc>
    1a92:	01 e0       	ldi	r16, 0x01	; 1
    1a94:	10 e0       	ldi	r17, 0x00	; 0
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	13 c0       	rjmp	.+38     	; 0x1ac2 <get_fat+0x1fc>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    1a9c:	0f ef       	ldi	r16, 0xFF	; 255
    1a9e:	1f ef       	ldi	r17, 0xFF	; 255
    1aa0:	98 01       	movw	r18, r16
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <get_fat+0x1fc>
    1aa4:	0f ef       	ldi	r16, 0xFF	; 255
    1aa6:	1f ef       	ldi	r17, 0xFF	; 255
    1aa8:	98 01       	movw	r18, r16
    1aaa:	0b c0       	rjmp	.+22     	; 0x1ac2 <get_fat+0x1fc>
    1aac:	0f ef       	ldi	r16, 0xFF	; 255
    1aae:	1f ef       	ldi	r17, 0xFF	; 255
    1ab0:	98 01       	movw	r18, r16
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <get_fat+0x1fc>
    1ab4:	0f ef       	ldi	r16, 0xFF	; 255
    1ab6:	1f ef       	ldi	r17, 0xFF	; 255
    1ab8:	98 01       	movw	r18, r16
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <get_fat+0x1fc>
    1abc:	0f ef       	ldi	r16, 0xFF	; 255
    1abe:	1f ef       	ldi	r17, 0xFF	; 255
    1ac0:	98 01       	movw	r18, r16
}
    1ac2:	60 2f       	mov	r22, r16
    1ac4:	71 2f       	mov	r23, r17
    1ac6:	82 2f       	mov	r24, r18
    1ac8:	93 2f       	mov	r25, r19
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	08 95       	ret

00001ade <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	ec 01       	movw	r28, r24
    1aec:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1aee:	7d 83       	std	Y+5, r23	; 0x05
    1af0:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    1af2:	4e 81       	ldd	r20, Y+6	; 0x06
    1af4:	5f 81       	ldd	r21, Y+7	; 0x07
    1af6:	68 85       	ldd	r22, Y+8	; 0x08
    1af8:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1afa:	41 30       	cpi	r20, 0x01	; 1
    1afc:	51 05       	cpc	r21, r1
    1afe:	61 05       	cpc	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <dir_sdi+0x28>
    1b04:	9f c0       	rjmp	.+318    	; 0x1c44 <dir_sdi+0x166>
    1b06:	e8 81       	ld	r30, Y
    1b08:	f9 81       	ldd	r31, Y+1	; 0x01
    1b0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b0c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b0e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b10:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b12:	48 17       	cp	r20, r24
    1b14:	59 07       	cpc	r21, r25
    1b16:	6a 07       	cpc	r22, r26
    1b18:	7b 07       	cpc	r23, r27
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <dir_sdi+0x40>
    1b1c:	95 c0       	rjmp	.+298    	; 0x1c48 <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1b1e:	41 15       	cp	r20, r1
    1b20:	51 05       	cpc	r21, r1
    1b22:	61 05       	cpc	r22, r1
    1b24:	71 05       	cpc	r23, r1
    1b26:	69 f5       	brne	.+90     	; 0x1b82 <dir_sdi+0xa4>
    1b28:	80 81       	ld	r24, Z
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	49 f4       	brne	.+18     	; 0x1b40 <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    1b2e:	46 a1       	lds	r20, 0x46
    1b30:	57 a1       	lds	r21, 0x47
    1b32:	60 a5       	lds	r22, 0x60
    1b34:	71 a5       	lds	r23, 0x61

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1b36:	41 15       	cp	r20, r1
    1b38:	51 05       	cpc	r21, r1
    1b3a:	61 05       	cpc	r22, r1
    1b3c:	71 05       	cpc	r23, r1
    1b3e:	09 f5       	brne	.+66     	; 0x1b82 <dir_sdi+0xa4>
		dj->clust = clst;
    1b40:	1a 86       	std	Y+10, r1	; 0x0a
    1b42:	1b 86       	std	Y+11, r1	; 0x0b
    1b44:	1c 86       	std	Y+12, r1	; 0x0c
    1b46:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1b48:	80 85       	ldd	r24, Z+8	; 0x08
    1b4a:	91 85       	ldd	r25, Z+9	; 0x09
    1b4c:	08 17       	cp	r16, r24
    1b4e:	19 07       	cpc	r17, r25
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <dir_sdi+0x76>
    1b52:	7c c0       	rjmp	.+248    	; 0x1c4c <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1b54:	c8 01       	movw	r24, r16
    1b56:	92 95       	swap	r25
    1b58:	82 95       	swap	r24
    1b5a:	8f 70       	andi	r24, 0x0F	; 15
    1b5c:	89 27       	eor	r24, r25
    1b5e:	9f 70       	andi	r25, 0x0F	; 15
    1b60:	89 27       	eor	r24, r25
    1b62:	ac 01       	movw	r20, r24
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	86 a1       	lds	r24, 0x46
    1b6a:	97 a1       	lds	r25, 0x47
    1b6c:	a0 a5       	lds	r26, 0x60
    1b6e:	b1 a5       	lds	r27, 0x61
    1b70:	84 0f       	add	r24, r20
    1b72:	95 1f       	adc	r25, r21
    1b74:	a6 1f       	adc	r26, r22
    1b76:	b7 1f       	adc	r27, r23
    1b78:	8e 87       	std	Y+14, r24	; 0x0e
    1b7a:	9f 87       	std	Y+15, r25	; 0x0f
    1b7c:	a8 8b       	std	Y+16, r26	; 0x10
    1b7e:	b9 8b       	std	Y+17, r27	; 0x11
    1b80:	4e c0       	rjmp	.+156    	; 0x1c1e <dir_sdi+0x140>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	7c 01       	movw	r14, r24
    1b88:	ee 0c       	add	r14, r14
    1b8a:	ff 1c       	adc	r15, r15
    1b8c:	ee 0c       	add	r14, r14
    1b8e:	ff 1c       	adc	r15, r15
    1b90:	ee 0c       	add	r14, r14
    1b92:	ff 1c       	adc	r15, r15
    1b94:	ee 0c       	add	r14, r14
    1b96:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    1b98:	0e 15       	cp	r16, r14
    1b9a:	1f 05       	cpc	r17, r15
    1b9c:	28 f1       	brcs	.+74     	; 0x1be8 <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1b9e:	88 81       	ld	r24, Y
    1ba0:	99 81       	ldd	r25, Y+1	; 0x01
    1ba2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    1ba6:	ab 01       	movw	r20, r22
    1ba8:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1baa:	4f 3f       	cpi	r20, 0xFF	; 255
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	58 07       	cpc	r21, r24
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	68 07       	cpc	r22, r24
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	78 07       	cpc	r23, r24
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <dir_sdi+0xde>
    1bba:	4a c0       	rjmp	.+148    	; 0x1c50 <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1bbc:	42 30       	cpi	r20, 0x02	; 2
    1bbe:	51 05       	cpc	r21, r1
    1bc0:	61 05       	cpc	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <dir_sdi+0xea>
    1bc6:	46 c0       	rjmp	.+140    	; 0x1c54 <dir_sdi+0x176>
    1bc8:	e8 81       	ld	r30, Y
    1bca:	f9 81       	ldd	r31, Y+1	; 0x01
    1bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bce:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bd0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1bd2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1bd4:	48 17       	cp	r20, r24
    1bd6:	59 07       	cpc	r21, r25
    1bd8:	6a 07       	cpc	r22, r26
    1bda:	7b 07       	cpc	r23, r27
    1bdc:	e8 f5       	brcc	.+122    	; 0x1c58 <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    1bde:	0e 19       	sub	r16, r14
    1be0:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1be2:	0e 15       	cp	r16, r14
    1be4:	1f 05       	cpc	r17, r15
    1be6:	d8 f6       	brcc	.-74     	; 0x1b9e <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1be8:	4a 87       	std	Y+10, r20	; 0x0a
    1bea:	5b 87       	std	Y+11, r21	; 0x0b
    1bec:	6c 87       	std	Y+12, r22	; 0x0c
    1bee:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1bf0:	88 81       	ld	r24, Y
    1bf2:	99 81       	ldd	r25, Y+1	; 0x01
    1bf4:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    1bf8:	ab 01       	movw	r20, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	92 95       	swap	r25
    1c00:	82 95       	swap	r24
    1c02:	8f 70       	andi	r24, 0x0F	; 15
    1c04:	89 27       	eor	r24, r25
    1c06:	9f 70       	andi	r25, 0x0F	; 15
    1c08:	89 27       	eor	r24, r25
    1c0a:	a0 e0       	ldi	r26, 0x00	; 0
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	84 0f       	add	r24, r20
    1c10:	95 1f       	adc	r25, r21
    1c12:	a6 1f       	adc	r26, r22
    1c14:	b7 1f       	adc	r27, r23
    1c16:	8e 87       	std	Y+14, r24	; 0x0e
    1c18:	9f 87       	std	Y+15, r25	; 0x0f
    1c1a:	a8 8b       	std	Y+16, r26	; 0x10
    1c1c:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1c1e:	88 81       	ld	r24, Y
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	c2 96       	adiw	r24, 0x32	; 50
    1c24:	0f 70       	andi	r16, 0x0F	; 15
    1c26:	10 70       	andi	r17, 0x00	; 0
    1c28:	00 0f       	add	r16, r16
    1c2a:	11 1f       	adc	r17, r17
    1c2c:	02 95       	swap	r16
    1c2e:	12 95       	swap	r17
    1c30:	10 7f       	andi	r17, 0xF0	; 240
    1c32:	10 27       	eor	r17, r16
    1c34:	00 7f       	andi	r16, 0xF0	; 240
    1c36:	10 27       	eor	r17, r16
    1c38:	80 0f       	add	r24, r16
    1c3a:	91 1f       	adc	r25, r17
    1c3c:	9b 8b       	std	Y+19, r25	; 0x13
    1c3e:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	0b c0       	rjmp	.+22     	; 0x1c5a <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	09 c0       	rjmp	.+18     	; 0x1c5a <dir_sdi+0x17c>
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	07 c0       	rjmp	.+14     	; 0x1c5a <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <dir_sdi+0x17c>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	03 c0       	rjmp	.+6      	; 0x1c5a <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <dir_sdi+0x17c>
    1c58:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	08 95       	ret

00001c68 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1c6e:	6c 81       	ldd	r22, Y+4	; 0x04
    1c70:	7d 81       	ldd	r23, Y+5	; 0x05
    1c72:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
	if (res == FR_OK) {
    1c76:	88 23       	and	r24, r24
    1c78:	91 f4       	brne	.+36     	; 0x1c9e <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    1c7a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c7c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c7e:	68 89       	ldd	r22, Y+16	; 0x10
    1c80:	79 89       	ldd	r23, Y+17	; 0x11
    1c82:	88 81       	ld	r24, Y
    1c84:	99 81       	ldd	r25, Y+1	; 0x01
    1c86:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
		if (res == FR_OK) {
    1c8a:	88 23       	and	r24, r24
    1c8c:	41 f4       	brne	.+16     	; 0x1c9e <dir_remove+0x36>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    1c8e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c90:	fb 89       	ldd	r31, Y+19	; 0x13
    1c92:	95 ee       	ldi	r25, 0xE5	; 229
    1c94:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    1c96:	e8 81       	ld	r30, Y
    1c98:	f9 81       	ldd	r31, Y+1	; 0x01
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1ca4:	8f 92       	push	r8
    1ca6:	9f 92       	push	r9
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	ec 01       	movw	r28, r24
    1cbe:	6a 01       	movw	r12, r20
    1cc0:	7b 01       	movw	r14, r22
    1cc2:	48 01       	movw	r8, r16
    1cc4:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1cc6:	42 30       	cpi	r20, 0x02	; 2
    1cc8:	51 05       	cpc	r21, r1
    1cca:	61 05       	cpc	r22, r1
    1ccc:	71 05       	cpc	r23, r1
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <put_fat+0x2e>
    1cd0:	ca c0       	rjmp	.+404    	; 0x1e66 <put_fat+0x1c2>
    1cd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cd6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1cd8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1cda:	48 17       	cp	r20, r24
    1cdc:	59 07       	cpc	r21, r25
    1cde:	6a 07       	cpc	r22, r26
    1ce0:	7b 07       	cpc	r23, r27
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <put_fat+0x42>
    1ce4:	c2 c0       	rjmp	.+388    	; 0x1e6a <put_fat+0x1c6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1ce6:	88 81       	ld	r24, Y
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	09 f4       	brne	.+2      	; 0x1cee <put_fat+0x4a>
    1cec:	6a c0       	rjmp	.+212    	; 0x1dc2 <put_fat+0x11e>
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <put_fat+0x50>
    1cf2:	82 c0       	rjmp	.+260    	; 0x1df8 <put_fat+0x154>
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <put_fat+0x56>
    1cf8:	b2 c0       	rjmp	.+356    	; 0x1e5e <put_fat+0x1ba>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1cfa:	9a 01       	movw	r18, r20
    1cfc:	36 95       	lsr	r19
    1cfe:	27 95       	ror	r18
    1d00:	89 01       	movw	r16, r18
    1d02:	04 0f       	add	r16, r20
    1d04:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1d06:	a8 01       	movw	r20, r16
    1d08:	45 2f       	mov	r20, r21
    1d0a:	55 27       	eor	r21, r21
    1d0c:	46 95       	lsr	r20
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	8a a1       	lds	r24, 0x4a
    1d14:	9b a1       	lds	r25, 0x4b
    1d16:	ac a1       	lds	r26, 0x4c
    1d18:	bd a1       	lds	r27, 0x4d
    1d1a:	48 0f       	add	r20, r24
    1d1c:	59 1f       	adc	r21, r25
    1d1e:	6a 1f       	adc	r22, r26
    1d20:	7b 1f       	adc	r23, r27
    1d22:	ce 01       	movw	r24, r28
    1d24:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
			if (res != FR_OK) break;
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <put_fat+0x8a>
    1d2c:	99 c0       	rjmp	.+306    	; 0x1e60 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1d2e:	c8 01       	movw	r24, r16
    1d30:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1d32:	e1 e0       	ldi	r30, 0x01	; 1
    1d34:	ce 22       	and	r12, r30
    1d36:	dd 24       	eor	r13, r13
    1d38:	c1 14       	cp	r12, r1
    1d3a:	d1 04       	cpc	r13, r1
    1d3c:	51 f0       	breq	.+20     	; 0x1d52 <put_fat+0xae>
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e8 0f       	add	r30, r24
    1d42:	f9 1f       	adc	r31, r25
    1d44:	22 a9       	sts	0x42, r18
    1d46:	2f 70       	andi	r18, 0x0F	; 15
    1d48:	38 2d       	mov	r19, r8
    1d4a:	32 95       	swap	r19
    1d4c:	30 7f       	andi	r19, 0xF0	; 240
    1d4e:	23 2b       	or	r18, r19
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <put_fat+0xb0>
    1d52:	28 2d       	mov	r18, r8
    1d54:	fe 01       	movw	r30, r28
    1d56:	e8 0f       	add	r30, r24
    1d58:	f9 1f       	adc	r31, r25
    1d5a:	22 ab       	sts	0x52, r18
			bc++;
    1d5c:	0f 5f       	subi	r16, 0xFF	; 255
    1d5e:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1d64:	a8 01       	movw	r20, r16
    1d66:	45 2f       	mov	r20, r21
    1d68:	55 27       	eor	r21, r21
    1d6a:	46 95       	lsr	r20
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	8a a1       	lds	r24, 0x4a
    1d72:	9b a1       	lds	r25, 0x4b
    1d74:	ac a1       	lds	r26, 0x4c
    1d76:	bd a1       	lds	r27, 0x4d
    1d78:	48 0f       	add	r20, r24
    1d7a:	59 1f       	adc	r21, r25
    1d7c:	6a 1f       	adc	r22, r26
    1d7e:	7b 1f       	adc	r23, r27
    1d80:	ce 01       	movw	r24, r28
    1d82:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
			if (res != FR_OK) break;
    1d86:	88 23       	and	r24, r24
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <put_fat+0xe8>
    1d8a:	6a c0       	rjmp	.+212    	; 0x1e60 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1d8c:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1d8e:	c1 14       	cp	r12, r1
    1d90:	d1 04       	cpc	r13, r1
    1d92:	49 f0       	breq	.+18     	; 0x1da6 <put_fat+0x102>
    1d94:	68 94       	set
    1d96:	13 f8       	bld	r1, 3
    1d98:	b6 94       	lsr	r11
    1d9a:	a7 94       	ror	r10
    1d9c:	97 94       	ror	r9
    1d9e:	87 94       	ror	r8
    1da0:	16 94       	lsr	r1
    1da2:	d1 f7       	brne	.-12     	; 0x1d98 <put_fat+0xf4>
    1da4:	09 c0       	rjmp	.+18     	; 0x1db8 <put_fat+0x114>
    1da6:	fe 01       	movw	r30, r28
    1da8:	e0 0f       	add	r30, r16
    1daa:	f1 1f       	adc	r31, r17
    1dac:	22 a9       	sts	0x42, r18
    1dae:	20 7f       	andi	r18, 0xF0	; 240
    1db0:	99 2d       	mov	r25, r9
    1db2:	9f 70       	andi	r25, 0x0F	; 15
    1db4:	82 2e       	mov	r8, r18
    1db6:	89 2a       	or	r8, r25
    1db8:	0c 0f       	add	r16, r28
    1dba:	1d 1f       	adc	r17, r29
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	82 aa       	sts	0x92, r24
			break;
    1dc0:	4f c0       	rjmp	.+158    	; 0x1e60 <put_fat+0x1bc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1dc2:	45 2f       	mov	r20, r21
    1dc4:	56 2f       	mov	r21, r22
    1dc6:	67 2f       	mov	r22, r23
    1dc8:	77 27       	eor	r23, r23
    1dca:	8a a1       	lds	r24, 0x4a
    1dcc:	9b a1       	lds	r25, 0x4b
    1dce:	ac a1       	lds	r26, 0x4c
    1dd0:	bd a1       	lds	r27, 0x4d
    1dd2:	48 0f       	add	r20, r24
    1dd4:	59 1f       	adc	r21, r25
    1dd6:	6a 1f       	adc	r22, r26
    1dd8:	7b 1f       	adc	r23, r27
    1dda:	ce 01       	movw	r24, r28
    1ddc:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
			if (res != FR_OK) break;
    1de0:	88 23       	and	r24, r24
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <put_fat+0x142>
    1de4:	3d c0       	rjmp	.+122    	; 0x1e60 <put_fat+0x1bc>
			p = &fs->win[clst * 2 % SS(fs)];
    1de6:	f6 01       	movw	r30, r12
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    1dee:	ec 0f       	add	r30, r28
    1df0:	fd 1f       	adc	r31, r29
    1df2:	82 aa       	sts	0x92, r24
    1df4:	93 aa       	sts	0x93, r25
			break;
    1df6:	34 c0       	rjmp	.+104    	; 0x1e60 <put_fat+0x1bc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1df8:	68 94       	set
    1dfa:	16 f8       	bld	r1, 6
    1dfc:	76 95       	lsr	r23
    1dfe:	67 95       	ror	r22
    1e00:	57 95       	ror	r21
    1e02:	47 95       	ror	r20
    1e04:	16 94       	lsr	r1
    1e06:	d1 f7       	brne	.-12     	; 0x1dfc <put_fat+0x158>
    1e08:	8a a1       	lds	r24, 0x4a
    1e0a:	9b a1       	lds	r25, 0x4b
    1e0c:	ac a1       	lds	r26, 0x4c
    1e0e:	bd a1       	lds	r27, 0x4d
    1e10:	48 0f       	add	r20, r24
    1e12:	59 1f       	adc	r21, r25
    1e14:	6a 1f       	adc	r22, r26
    1e16:	7b 1f       	adc	r23, r27
    1e18:	ce 01       	movw	r24, r28
    1e1a:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
			if (res != FR_OK) break;
    1e1e:	88 23       	and	r24, r24
    1e20:	f9 f4       	brne	.+62     	; 0x1e60 <put_fat+0x1bc>
			p = &fs->win[clst * 4 % SS(fs)];
    1e22:	96 01       	movw	r18, r12
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	31 70       	andi	r19, 0x01	; 1
			val |= LD_DWORD(p) & 0xF0000000;
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	45 a9       	sts	0x45, r20
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	74 2f       	mov	r23, r20
    1e3e:	66 27       	eor	r22, r22
    1e40:	55 27       	eor	r21, r21
    1e42:	44 27       	eor	r20, r20
    1e44:	40 70       	andi	r20, 0x00	; 0
    1e46:	50 70       	andi	r21, 0x00	; 0
    1e48:	60 70       	andi	r22, 0x00	; 0
    1e4a:	70 7f       	andi	r23, 0xF0	; 240
    1e4c:	48 29       	or	r20, r8
    1e4e:	59 29       	or	r21, r9
    1e50:	6a 29       	or	r22, r10
    1e52:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    1e54:	42 ab       	sts	0x52, r20
    1e56:	53 ab       	sts	0x53, r21
    1e58:	64 ab       	sts	0x54, r22
    1e5a:	75 ab       	sts	0x55, r23
			break;
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <put_fat+0x1bc>

		default :
			res = FR_INT_ERR;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <put_fat+0x1c8>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <put_fat+0x1c8>
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	9f 90       	pop	r9
    1e82:	8f 90       	pop	r8
    1e84:	08 95       	ret

00001e86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1e86:	2f 92       	push	r2
    1e88:	3f 92       	push	r3
    1e8a:	4f 92       	push	r4
    1e8c:	5f 92       	push	r5
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <create_chain+0x26>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <create_chain+0x28>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	1c 01       	movw	r2, r24
    1eb4:	49 83       	std	Y+1, r20	; 0x01
    1eb6:	5a 83       	std	Y+2, r21	; 0x02
    1eb8:	6b 83       	std	Y+3, r22	; 0x03
    1eba:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1ebc:	41 15       	cp	r20, r1
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	61 05       	cpc	r22, r1
    1ec2:	71 05       	cpc	r23, r1
    1ec4:	c1 f4       	brne	.+48     	; 0x1ef6 <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	1a 96       	adiw	r26, 0x0a	; 10
    1eca:	8d 90       	ld	r8, X+
    1ecc:	9d 90       	ld	r9, X+
    1ece:	ad 90       	ld	r10, X+
    1ed0:	bc 90       	ld	r11, X
    1ed2:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1ed4:	81 14       	cp	r8, r1
    1ed6:	91 04       	cpc	r9, r1
    1ed8:	a1 04       	cpc	r10, r1
    1eda:	b1 04       	cpc	r11, r1
    1edc:	51 f1       	breq	.+84     	; 0x1f32 <create_chain+0xac>
    1ede:	5a 96       	adiw	r26, 0x1a	; 26
    1ee0:	8d 91       	ld	r24, X+
    1ee2:	9d 91       	ld	r25, X+
    1ee4:	0d 90       	ld	r0, X+
    1ee6:	bc 91       	ld	r27, X
    1ee8:	a0 2d       	mov	r26, r0
    1eea:	88 16       	cp	r8, r24
    1eec:	99 06       	cpc	r9, r25
    1eee:	aa 06       	cpc	r10, r26
    1ef0:	bb 06       	cpc	r11, r27
    1ef2:	20 f5       	brcc	.+72     	; 0x1f3c <create_chain+0xb6>
    1ef4:	27 c0       	rjmp	.+78     	; 0x1f44 <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1ef6:	49 81       	ldd	r20, Y+1	; 0x01
    1ef8:	5a 81       	ldd	r21, Y+2	; 0x02
    1efa:	6b 81       	ldd	r22, Y+3	; 0x03
    1efc:	7c 81       	ldd	r23, Y+4	; 0x04
    1efe:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    1f02:	8b 01       	movw	r16, r22
    1f04:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1f06:	62 30       	cpi	r22, 0x02	; 2
    1f08:	71 05       	cpc	r23, r1
    1f0a:	81 05       	cpc	r24, r1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	08 f4       	brcc	.+2      	; 0x1f12 <create_chain+0x8c>
    1f10:	ad c0       	rjmp	.+346    	; 0x206c <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1f12:	f1 01       	movw	r30, r2
    1f14:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f16:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f18:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f1a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f1c:	08 17       	cp	r16, r24
    1f1e:	19 07       	cpc	r17, r25
    1f20:	2a 07       	cpc	r18, r26
    1f22:	3b 07       	cpc	r19, r27
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <create_chain+0xa2>
    1f26:	b6 c0       	rjmp	.+364    	; 0x2094 <create_chain+0x20e>
		scl = clst;
    1f28:	89 80       	ldd	r8, Y+1	; 0x01
    1f2a:	9a 80       	ldd	r9, Y+2	; 0x02
    1f2c:	ab 80       	ldd	r10, Y+3	; 0x03
    1f2e:	bc 80       	ldd	r11, Y+4	; 0x04
    1f30:	09 c0       	rjmp	.+18     	; 0x1f44 <create_chain+0xbe>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1f32:	88 24       	eor	r8, r8
    1f34:	99 24       	eor	r9, r9
    1f36:	54 01       	movw	r10, r8
    1f38:	83 94       	inc	r8
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <create_chain+0xbe>
    1f3c:	88 24       	eor	r8, r8
    1f3e:	99 24       	eor	r9, r9
    1f40:	54 01       	movw	r10, r8
    1f42:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    1f44:	75 01       	movw	r14, r10
    1f46:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f48:	44 24       	eor	r4, r4
    1f4a:	55 24       	eor	r5, r5
    1f4c:	32 01       	movw	r6, r4
    1f4e:	68 94       	set
    1f50:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1f52:	08 94       	sec
    1f54:	c1 1c       	adc	r12, r1
    1f56:	d1 1c       	adc	r13, r1
    1f58:	e1 1c       	adc	r14, r1
    1f5a:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1f5c:	f1 01       	movw	r30, r2
    1f5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f60:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f62:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f64:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f66:	c8 16       	cp	r12, r24
    1f68:	d9 06       	cpc	r13, r25
    1f6a:	ea 06       	cpc	r14, r26
    1f6c:	fb 06       	cpc	r15, r27
    1f6e:	48 f0       	brcs	.+18     	; 0x1f82 <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1f70:	f2 e0       	ldi	r31, 0x02	; 2
    1f72:	8f 16       	cp	r8, r31
    1f74:	91 04       	cpc	r9, r1
    1f76:	a1 04       	cpc	r10, r1
    1f78:	b1 04       	cpc	r11, r1
    1f7a:	08 f4       	brcc	.+2      	; 0x1f7e <create_chain+0xf8>
    1f7c:	7c c0       	rjmp	.+248    	; 0x2076 <create_chain+0x1f0>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f7e:	73 01       	movw	r14, r6
    1f80:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1f82:	c1 01       	movw	r24, r2
    1f84:	b7 01       	movw	r22, r14
    1f86:	a6 01       	movw	r20, r12
    1f88:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    1f8c:	8b 01       	movw	r16, r22
    1f8e:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1f90:	61 15       	cp	r22, r1
    1f92:	71 05       	cpc	r23, r1
    1f94:	81 05       	cpc	r24, r1
    1f96:	91 05       	cpc	r25, r1
    1f98:	a9 f0       	breq	.+42     	; 0x1fc4 <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1f9a:	0f 3f       	cpi	r16, 0xFF	; 255
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	18 07       	cpc	r17, r24
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	28 07       	cpc	r18, r24
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	38 07       	cpc	r19, r24
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <create_chain+0x126>
    1faa:	74 c0       	rjmp	.+232    	; 0x2094 <create_chain+0x20e>
    1fac:	01 30       	cpi	r16, 0x01	; 1
    1fae:	11 05       	cpc	r17, r1
    1fb0:	21 05       	cpc	r18, r1
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <create_chain+0x132>
    1fb6:	6e c0       	rjmp	.+220    	; 0x2094 <create_chain+0x20e>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1fb8:	c8 14       	cp	r12, r8
    1fba:	d9 04       	cpc	r13, r9
    1fbc:	ea 04       	cpc	r14, r10
    1fbe:	fb 04       	cpc	r15, r11
    1fc0:	41 f6       	brne	.-112    	; 0x1f52 <create_chain+0xcc>
    1fc2:	5d c0       	rjmp	.+186    	; 0x207e <create_chain+0x1f8>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1fc4:	8c 2c       	mov	r8, r12
    1fc6:	4d 2c       	mov	r4, r13
    1fc8:	be 2c       	mov	r11, r14
    1fca:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1fcc:	c1 01       	movw	r24, r2
    1fce:	4c 2d       	mov	r20, r12
    1fd0:	5d 2d       	mov	r21, r13
    1fd2:	6e 2d       	mov	r22, r14
    1fd4:	7f 2d       	mov	r23, r15
    1fd6:	0f ef       	ldi	r16, 0xFF	; 255
    1fd8:	1f ef       	ldi	r17, 0xFF	; 255
    1fda:	2f ef       	ldi	r18, 0xFF	; 255
    1fdc:	3f e0       	ldi	r19, 0x0F	; 15
    1fde:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <put_fat>
	if (res == FR_OK && clst != 0) {
    1fe2:	88 23       	and	r24, r24
    1fe4:	e9 f5       	brne	.+122    	; 0x2060 <create_chain+0x1da>
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	ab 81       	ldd	r26, Y+3	; 0x03
    1fec:	bc 81       	ldd	r27, Y+4	; 0x04
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	a1 05       	cpc	r26, r1
    1ff2:	b1 05       	cpc	r27, r1
    1ff4:	69 f0       	breq	.+26     	; 0x2010 <create_chain+0x18a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1ff6:	c1 01       	movw	r24, r2
    1ff8:	49 81       	ldd	r20, Y+1	; 0x01
    1ffa:	5a 81       	ldd	r21, Y+2	; 0x02
    1ffc:	6b 81       	ldd	r22, Y+3	; 0x03
    1ffe:	7c 81       	ldd	r23, Y+4	; 0x04
    2000:	0c 2d       	mov	r16, r12
    2002:	1d 2d       	mov	r17, r13
    2004:	2e 2d       	mov	r18, r14
    2006:	3f 2d       	mov	r19, r15
    2008:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <put_fat>
	}
	if (res == FR_OK) {
    200c:	88 23       	and	r24, r24
    200e:	41 f5       	brne	.+80     	; 0x2060 <create_chain+0x1da>
		fs->last_clust = ncl;			/* Update FSINFO */
    2010:	d1 01       	movw	r26, r2
    2012:	1a 96       	adiw	r26, 0x0a	; 10
    2014:	8c 92       	st	X, r8
    2016:	1a 97       	sbiw	r26, 0x0a	; 10
    2018:	1b 96       	adiw	r26, 0x0b	; 11
    201a:	4c 92       	st	X, r4
    201c:	1b 97       	sbiw	r26, 0x0b	; 11
    201e:	1c 96       	adiw	r26, 0x0c	; 12
    2020:	bc 92       	st	X, r11
    2022:	1c 97       	sbiw	r26, 0x0c	; 12
    2024:	1d 96       	adiw	r26, 0x0d	; 13
    2026:	ac 92       	st	X, r10
    2028:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    202a:	1e 96       	adiw	r26, 0x0e	; 14
    202c:	8d 91       	ld	r24, X+
    202e:	9d 91       	ld	r25, X+
    2030:	0d 90       	ld	r0, X+
    2032:	bc 91       	ld	r27, X
    2034:	a0 2d       	mov	r26, r0
    2036:	8f 3f       	cpi	r24, 0xFF	; 255
    2038:	ef ef       	ldi	r30, 0xFF	; 255
    203a:	9e 07       	cpc	r25, r30
    203c:	ef ef       	ldi	r30, 0xFF	; 255
    203e:	ae 07       	cpc	r26, r30
    2040:	ef ef       	ldi	r30, 0xFF	; 255
    2042:	be 07       	cpc	r27, r30
    2044:	01 f1       	breq	.+64     	; 0x2086 <create_chain+0x200>
			fs->free_clust--;
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	a1 09       	sbc	r26, r1
    204a:	b1 09       	sbc	r27, r1
    204c:	f1 01       	movw	r30, r2
    204e:	86 87       	std	Z+14, r24	; 0x0e
    2050:	97 87       	std	Z+15, r25	; 0x0f
    2052:	a0 8b       	std	Z+16, r26	; 0x10
    2054:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	85 83       	std	Z+5, r24	; 0x05
    205a:	97 01       	movw	r18, r14
    205c:	86 01       	movw	r16, r12
    205e:	1a c0       	rjmp	.+52     	; 0x2094 <create_chain+0x20e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	a1 f4       	brne	.+40     	; 0x208c <create_chain+0x206>
    2064:	0f ef       	ldi	r16, 0xFF	; 255
    2066:	1f ef       	ldi	r17, 0xFF	; 255
    2068:	98 01       	movw	r18, r16
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <create_chain+0x20e>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    206c:	01 e0       	ldi	r16, 0x01	; 1
    206e:	10 e0       	ldi	r17, 0x00	; 0
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <create_chain+0x20e>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	98 01       	movw	r18, r16
    207c:	0b c0       	rjmp	.+22     	; 0x2094 <create_chain+0x20e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    207e:	00 e0       	ldi	r16, 0x00	; 0
    2080:	10 e0       	ldi	r17, 0x00	; 0
    2082:	98 01       	movw	r18, r16
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <create_chain+0x20e>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    2086:	97 01       	movw	r18, r14
    2088:	86 01       	movw	r16, r12
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <create_chain+0x20e>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    208c:	01 e0       	ldi	r16, 0x01	; 1
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    2094:	60 2f       	mov	r22, r16
    2096:	71 2f       	mov	r23, r17
    2098:	82 2f       	mov	r24, r18
    209a:	93 2f       	mov	r25, r19
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	bf 90       	pop	r11
    20b6:	af 90       	pop	r10
    20b8:	9f 90       	pop	r9
    20ba:	8f 90       	pop	r8
    20bc:	7f 90       	pop	r7
    20be:	6f 90       	pop	r6
    20c0:	5f 90       	pop	r5
    20c2:	4f 90       	pop	r4
    20c4:	3f 90       	pop	r3
    20c6:	2f 90       	pop	r2
    20c8:	08 95       	ret

000020ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	8c 01       	movw	r16, r24
    20e4:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    20e6:	dc 01       	movw	r26, r24
    20e8:	14 96       	adiw	r26, 0x04	; 4
    20ea:	ed 90       	ld	r14, X+
    20ec:	fc 90       	ld	r15, X
    20ee:	15 97       	sbiw	r26, 0x05	; 5
    20f0:	08 94       	sec
    20f2:	e1 1c       	adc	r14, r1
    20f4:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    20f6:	e1 14       	cp	r14, r1
    20f8:	f1 04       	cpc	r15, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <dir_next+0x34>
    20fc:	09 c1       	rjmp	.+530    	; 0x2310 <dir_next+0x246>
    20fe:	1e 96       	adiw	r26, 0x0e	; 14
    2100:	8d 91       	ld	r24, X+
    2102:	9d 91       	ld	r25, X+
    2104:	0d 90       	ld	r0, X+
    2106:	bc 91       	ld	r27, X
    2108:	a0 2d       	mov	r26, r0
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	a1 05       	cpc	r26, r1
    210e:	b1 05       	cpc	r27, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <dir_next+0x4a>
    2112:	00 c1       	rjmp	.+512    	; 0x2314 <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2114:	0f 2e       	mov	r0, r31
    2116:	ff e0       	ldi	r31, 0x0F	; 15
    2118:	cf 2e       	mov	r12, r31
    211a:	dd 24       	eor	r13, r13
    211c:	f0 2d       	mov	r31, r0
    211e:	ce 20       	and	r12, r14
    2120:	df 20       	and	r13, r15
    2122:	c1 14       	cp	r12, r1
    2124:	d1 04       	cpc	r13, r1
    2126:	09 f0       	breq	.+2      	; 0x212a <dir_next+0x60>
    2128:	d8 c0       	rjmp	.+432    	; 0x22da <dir_next+0x210>
		dj->sect++;					/* Next sector */
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	a1 1d       	adc	r26, r1
    212e:	b1 1d       	adc	r27, r1
    2130:	f8 01       	movw	r30, r16
    2132:	86 87       	std	Z+14, r24	; 0x0e
    2134:	97 87       	std	Z+15, r25	; 0x0f
    2136:	a0 8b       	std	Z+16, r26	; 0x10
    2138:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    213a:	42 85       	ldd	r20, Z+10	; 0x0a
    213c:	53 85       	ldd	r21, Z+11	; 0x0b
    213e:	64 85       	ldd	r22, Z+12	; 0x0c
    2140:	75 85       	ldd	r23, Z+13	; 0x0d
    2142:	41 15       	cp	r20, r1
    2144:	51 05       	cpc	r21, r1
    2146:	61 05       	cpc	r22, r1
    2148:	71 05       	cpc	r23, r1
    214a:	51 f4       	brne	.+20     	; 0x2160 <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    214c:	01 90       	ld	r0, Z+
    214e:	f0 81       	ld	r31, Z
    2150:	e0 2d       	mov	r30, r0
    2152:	80 85       	ldd	r24, Z+8	; 0x08
    2154:	91 85       	ldd	r25, Z+9	; 0x09
    2156:	e8 16       	cp	r14, r24
    2158:	f9 06       	cpc	r15, r25
    215a:	08 f0       	brcs	.+2      	; 0x215e <dir_next+0x94>
    215c:	dd c0       	rjmp	.+442    	; 0x2318 <dir_next+0x24e>
    215e:	bd c0       	rjmp	.+378    	; 0x22da <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2160:	01 90       	ld	r0, Z+
    2162:	f0 81       	ld	r31, Z
    2164:	e0 2d       	mov	r30, r0
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	97 01       	movw	r18, r14
    216e:	32 95       	swap	r19
    2170:	22 95       	swap	r18
    2172:	2f 70       	andi	r18, 0x0F	; 15
    2174:	23 27       	eor	r18, r19
    2176:	3f 70       	andi	r19, 0x0F	; 15
    2178:	23 27       	eor	r18, r19
    217a:	82 23       	and	r24, r18
    217c:	93 23       	and	r25, r19
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	09 f0       	breq	.+2      	; 0x2184 <dir_next+0xba>
    2182:	ab c0       	rjmp	.+342    	; 0x22da <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2184:	cf 01       	movw	r24, r30
    2186:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    218a:	4b 01       	movw	r8, r22
    218c:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    218e:	62 30       	cpi	r22, 0x02	; 2
    2190:	71 05       	cpc	r23, r1
    2192:	81 05       	cpc	r24, r1
    2194:	91 05       	cpc	r25, r1
    2196:	08 f4       	brcc	.+2      	; 0x219a <dir_next+0xd0>
    2198:	c1 c0       	rjmp	.+386    	; 0x231c <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    219a:	6f 3f       	cpi	r22, 0xFF	; 255
    219c:	ef ef       	ldi	r30, 0xFF	; 255
    219e:	7e 07       	cpc	r23, r30
    21a0:	ef ef       	ldi	r30, 0xFF	; 255
    21a2:	8e 07       	cpc	r24, r30
    21a4:	ef ef       	ldi	r30, 0xFF	; 255
    21a6:	9e 07       	cpc	r25, r30
    21a8:	09 f4       	brne	.+2      	; 0x21ac <dir_next+0xe2>
    21aa:	ba c0       	rjmp	.+372    	; 0x2320 <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    21ac:	d8 01       	movw	r26, r16
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    21b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    21b6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    21b8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    21ba:	88 16       	cp	r8, r24
    21bc:	99 06       	cpc	r9, r25
    21be:	aa 06       	cpc	r10, r26
    21c0:	bb 06       	cpc	r11, r27
    21c2:	08 f4       	brcc	.+2      	; 0x21c6 <dir_next+0xfc>
    21c4:	78 c0       	rjmp	.+240    	; 0x22b6 <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    21c6:	20 97       	sbiw	r28, 0x00	; 0
    21c8:	09 f4       	brne	.+2      	; 0x21cc <dir_next+0x102>
    21ca:	ac c0       	rjmp	.+344    	; 0x2324 <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    21cc:	d8 01       	movw	r26, r16
    21ce:	1a 96       	adiw	r26, 0x0a	; 10
    21d0:	4d 91       	ld	r20, X+
    21d2:	5d 91       	ld	r21, X+
    21d4:	6d 91       	ld	r22, X+
    21d6:	7c 91       	ld	r23, X
    21d8:	1d 97       	sbiw	r26, 0x0d	; 13
    21da:	cf 01       	movw	r24, r30
    21dc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <create_chain>
    21e0:	4b 01       	movw	r8, r22
    21e2:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    21e4:	61 15       	cp	r22, r1
    21e6:	71 05       	cpc	r23, r1
    21e8:	81 05       	cpc	r24, r1
    21ea:	91 05       	cpc	r25, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <dir_next+0x126>
    21ee:	9c c0       	rjmp	.+312    	; 0x2328 <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    21f0:	61 30       	cpi	r22, 0x01	; 1
    21f2:	71 05       	cpc	r23, r1
    21f4:	81 05       	cpc	r24, r1
    21f6:	91 05       	cpc	r25, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <dir_next+0x132>
    21fa:	98 c0       	rjmp	.+304    	; 0x232c <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    21fc:	6f 3f       	cpi	r22, 0xFF	; 255
    21fe:	ef ef       	ldi	r30, 0xFF	; 255
    2200:	7e 07       	cpc	r23, r30
    2202:	ef ef       	ldi	r30, 0xFF	; 255
    2204:	8e 07       	cpc	r24, r30
    2206:	ef ef       	ldi	r30, 0xFF	; 255
    2208:	9e 07       	cpc	r25, r30
    220a:	09 f4       	brne	.+2      	; 0x220e <dir_next+0x144>
    220c:	91 c0       	rjmp	.+290    	; 0x2330 <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    220e:	d8 01       	movw	r26, r16
    2210:	8d 91       	ld	r24, X+
    2212:	9c 91       	ld	r25, X
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	ba 01       	movw	r22, r20
    221a:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    221e:	88 23       	and	r24, r24
    2220:	09 f0       	breq	.+2      	; 0x2224 <dir_next+0x15a>
    2222:	88 c0       	rjmp	.+272    	; 0x2334 <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2224:	f8 01       	movw	r30, r16
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	c2 96       	adiw	r24, 0x32	; 50
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	52 e0       	ldi	r21, 0x02	; 2
    2234:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2238:	d8 01       	movw	r26, r16
    223a:	cd 91       	ld	r28, X+
    223c:	dc 91       	ld	r29, X
    223e:	ce 01       	movw	r24, r28
    2240:	b5 01       	movw	r22, r10
    2242:	a4 01       	movw	r20, r8
    2244:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8e a7       	lds	r24, 0x7e
    224e:	9f a7       	lds	r25, 0x7f
    2250:	a8 ab       	sts	0x58, r26
    2252:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2254:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    2256:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2258:	1b c0       	rjmp	.+54     	; 0x2290 <dir_next+0x1c6>
						dj->fs->wflag = 1;
    225a:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    225c:	f8 01       	movw	r30, r16
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	ba 01       	movw	r22, r20
    2268:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    226c:	88 23       	and	r24, r24
    226e:	09 f0       	breq	.+2      	; 0x2272 <dir_next+0x1a8>
    2270:	63 c0       	rjmp	.+198    	; 0x2338 <dir_next+0x26e>
						dj->fs->winsect++;
    2272:	d8 01       	movw	r26, r16
    2274:	ed 91       	ld	r30, X+
    2276:	fc 91       	ld	r31, X
    2278:	86 a5       	lds	r24, 0x66
    227a:	97 a5       	lds	r25, 0x67
    227c:	a0 a9       	sts	0x40, r26
    227e:	b1 a9       	sts	0x41, r27
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	a1 1d       	adc	r26, r1
    2284:	b1 1d       	adc	r27, r1
    2286:	86 a7       	lds	r24, 0x76
    2288:	97 a7       	lds	r25, 0x77
    228a:	a0 ab       	sts	0x50, r26
    228c:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    228e:	cf 5f       	subi	r28, 0xFF	; 255
    2290:	d8 01       	movw	r26, r16
    2292:	ed 91       	ld	r30, X+
    2294:	fc 91       	ld	r31, X
    2296:	11 97       	sbiw	r26, 0x01	; 1
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	c8 17       	cp	r28, r24
    229c:	f0 f2       	brcs	.-68     	; 0x225a <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    229e:	86 a5       	lds	r24, 0x66
    22a0:	97 a5       	lds	r25, 0x67
    22a2:	a0 a9       	sts	0x40, r26
    22a4:	b1 a9       	sts	0x41, r27
    22a6:	8c 1b       	sub	r24, r28
    22a8:	91 09       	sbc	r25, r1
    22aa:	a1 09       	sbc	r26, r1
    22ac:	b1 09       	sbc	r27, r1
    22ae:	86 a7       	lds	r24, 0x76
    22b0:	97 a7       	lds	r25, 0x77
    22b2:	a0 ab       	sts	0x50, r26
    22b4:	b1 ab       	sts	0x51, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    22b6:	f8 01       	movw	r30, r16
    22b8:	82 86       	std	Z+10, r8	; 0x0a
    22ba:	93 86       	std	Z+11, r9	; 0x0b
    22bc:	a4 86       	std	Z+12, r10	; 0x0c
    22be:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	b5 01       	movw	r22, r10
    22c6:	a4 01       	movw	r20, r8
    22c8:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	f8 01       	movw	r30, r16
    22d2:	86 87       	std	Z+14, r24	; 0x0e
    22d4:	97 87       	std	Z+15, r25	; 0x0f
    22d6:	a0 8b       	std	Z+16, r26	; 0x10
    22d8:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    22da:	d8 01       	movw	r26, r16
    22dc:	15 96       	adiw	r26, 0x05	; 5
    22de:	fc 92       	st	X, r15
    22e0:	ee 92       	st	-X, r14
    22e2:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    22e4:	8d 91       	ld	r24, X+
    22e6:	9c 91       	ld	r25, X
    22e8:	11 97       	sbiw	r26, 0x01	; 1
    22ea:	c2 96       	adiw	r24, 0x32	; 50
    22ec:	cc 0c       	add	r12, r12
    22ee:	dd 1c       	adc	r13, r13
    22f0:	cc 0c       	add	r12, r12
    22f2:	dd 1c       	adc	r13, r13
    22f4:	cc 0c       	add	r12, r12
    22f6:	dd 1c       	adc	r13, r13
    22f8:	cc 0c       	add	r12, r12
    22fa:	dd 1c       	adc	r13, r13
    22fc:	cc 0c       	add	r12, r12
    22fe:	dd 1c       	adc	r13, r13
    2300:	8c 0d       	add	r24, r12
    2302:	9d 1d       	adc	r25, r13
    2304:	53 96       	adiw	r26, 0x13	; 19
    2306:	9c 93       	st	X, r25
    2308:	8e 93       	st	-X, r24
    230a:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	15 c0       	rjmp	.+42     	; 0x233a <dir_next+0x270>


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    2310:	84 e0       	ldi	r24, 0x04	; 4
    2312:	13 c0       	rjmp	.+38     	; 0x233a <dir_next+0x270>
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	11 c0       	rjmp	.+34     	; 0x233a <dir_next+0x270>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    2318:	84 e0       	ldi	r24, 0x04	; 4
    231a:	0f c0       	rjmp	.+30     	; 0x233a <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	0d c0       	rjmp	.+26     	; 0x233a <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	0b c0       	rjmp	.+22     	; 0x233a <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2324:	84 e0       	ldi	r24, 0x04	; 4
    2326:	09 c0       	rjmp	.+18     	; 0x233a <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2328:	87 e0       	ldi	r24, 0x07	; 7
    232a:	07 c0       	rjmp	.+14     	; 0x233a <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	05 c0       	rjmp	.+10     	; 0x233a <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	03 c0       	rjmp	.+6      	; 0x233a <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	01 c0       	rjmp	.+2      	; 0x233a <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2338:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	df 90       	pop	r13
    2348:	cf 90       	pop	r12
    234a:	bf 90       	pop	r11
    234c:	af 90       	pop	r10
    234e:	9f 90       	pop	r9
    2350:	8f 90       	pop	r8
    2352:	08 95       	ret

00002354 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    2354:	2f 92       	push	r2
    2356:	3f 92       	push	r3
    2358:	4f 92       	push	r4
    235a:	5f 92       	push	r5
    235c:	6f 92       	push	r6
    235e:	7f 92       	push	r7
    2360:	8f 92       	push	r8
    2362:	9f 92       	push	r9
    2364:	af 92       	push	r10
    2366:	bf 92       	push	r11
    2368:	cf 92       	push	r12
    236a:	df 92       	push	r13
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	00 d0       	rcall	.+0      	; 0x237a <follow_path+0x26>
    237a:	00 d0       	rcall	.+0      	; 0x237c <follow_path+0x28>
    237c:	00 d0       	rcall	.+0      	; 0x237e <follow_path+0x2a>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	8c 01       	movw	r16, r24
    2384:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    2386:	db 01       	movw	r26, r22
    2388:	8c 91       	ld	r24, X
    238a:	8f 32       	cpi	r24, 0x2F	; 47
    238c:	11 f0       	breq	.+4      	; 0x2392 <follow_path+0x3e>
    238e:	8c 35       	cpi	r24, 0x5C	; 92
    2390:	49 f4       	brne	.+18     	; 0x23a4 <follow_path+0x50>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    2392:	08 94       	sec
    2394:	a1 1c       	adc	r10, r1
    2396:	b1 1c       	adc	r11, r1
    2398:	f8 01       	movw	r30, r16
    239a:	16 82       	std	Z+6, r1	; 0x06
    239c:	17 82       	std	Z+7, r1	; 0x07
    239e:	10 86       	std	Z+8, r1	; 0x08
    23a0:	11 86       	std	Z+9, r1	; 0x09
    23a2:	0c c0       	rjmp	.+24     	; 0x23bc <follow_path+0x68>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    23a4:	d8 01       	movw	r26, r16
    23a6:	ed 91       	ld	r30, X+
    23a8:	fc 91       	ld	r31, X
    23aa:	86 89       	ldd	r24, Z+22	; 0x16
    23ac:	97 89       	ldd	r25, Z+23	; 0x17
    23ae:	a0 8d       	ldd	r26, Z+24	; 0x18
    23b0:	b1 8d       	ldd	r27, Z+25	; 0x19
    23b2:	f8 01       	movw	r30, r16
    23b4:	86 83       	std	Z+6, r24	; 0x06
    23b6:	97 83       	std	Z+7, r25	; 0x07
    23b8:	a0 87       	std	Z+8, r26	; 0x08
    23ba:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    23bc:	d5 01       	movw	r26, r10
    23be:	8c 91       	ld	r24, X
    23c0:	80 32       	cpi	r24, 0x20	; 32
    23c2:	50 f4       	brcc	.+20     	; 0x23d8 <follow_path+0x84>
		res = dir_sdi(dj, 0);
    23c4:	c8 01       	movw	r24, r16
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
    23ce:	48 2f       	mov	r20, r24
		dj->dir = 0;
    23d0:	f8 01       	movw	r30, r16
    23d2:	13 8a       	std	Z+19, r1	; 0x13
    23d4:	12 8a       	std	Z+18, r1	; 0x12
    23d6:	6b c1       	rjmp	.+726    	; 0x26ae <follow_path+0x35a>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
    23d8:	0f 2e       	mov	r0, r31
    23da:	fb e0       	ldi	r31, 0x0B	; 11
    23dc:	6f 2e       	mov	r6, r31
    23de:	77 24       	eor	r7, r7
    23e0:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    23e2:	ee 24       	eor	r14, r14
    23e4:	ff 24       	eor	r15, r15
    23e6:	44 24       	eor	r4, r4
    23e8:	55 24       	eor	r5, r5
    23ea:	68 94       	set
    23ec:	43 f8       	bld	r4, 3
    23ee:	88 24       	eor	r8, r8
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    23f0:	49 82       	std	Y+1, r4	; 0x01
    23f2:	5a 82       	std	Y+2, r5	; 0x02
    23f4:	6b 82       	std	Y+3, r6	; 0x03
    23f6:	7c 82       	std	Y+4, r7	; 0x04
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    23f8:	0f 2e       	mov	r0, r31
    23fa:	f3 e0       	ldi	r31, 0x03	; 3
    23fc:	2f 2e       	mov	r2, r31
    23fe:	33 24       	eor	r3, r3
    2400:	f0 2d       	mov	r31, r0
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    2402:	f5 01       	movw	r30, r10
    2404:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2406:	81 91       	ld	r24, Z+
    2408:	8f 32       	cpi	r24, 0x2F	; 47
    240a:	e1 f3       	breq	.-8      	; 0x2404 <follow_path+0xb0>
    240c:	8c 35       	cpi	r24, 0x5C	; 92
    240e:	d1 f3       	breq	.-12     	; 0x2404 <follow_path+0xb0>
    2410:	3e 83       	std	Y+6, r19	; 0x06
    2412:	2d 83       	std	Y+5, r18	; 0x05
	sfn = dj->fn;
    2414:	d8 01       	movw	r26, r16
    2416:	54 96       	adiw	r26, 0x14	; 20
    2418:	cd 90       	ld	r12, X+
    241a:	dc 90       	ld	r13, X
    241c:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    241e:	c6 01       	movw	r24, r12
    2420:	60 e2       	ldi	r22, 0x20	; 32
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	a3 01       	movw	r20, r6
    2426:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    242a:	ed 81       	ldd	r30, Y+5	; 0x05
    242c:	fe 81       	ldd	r31, Y+6	; 0x06
    242e:	80 81       	ld	r24, Z
    2430:	8e 32       	cpi	r24, 0x2E	; 46
    2432:	49 f5       	brne	.+82     	; 0x2486 <follow_path+0x132>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    2434:	ee e2       	ldi	r30, 0x2E	; 46
    2436:	d6 01       	movw	r26, r12
    2438:	ec 93       	st	X, r30
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    243a:	ad 81       	ldd	r26, Y+5	; 0x05
    243c:	be 81       	ldd	r27, Y+6	; 0x06
    243e:	11 96       	adiw	r26, 0x01	; 1
    2440:	2c 91       	ld	r18, X
    2442:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    2444:	2e 32       	cpi	r18, 0x2E	; 46
    2446:	49 f4       	brne	.+18     	; 0x245a <follow_path+0x106>
			sfn[i++] = c;
    2448:	f6 01       	movw	r30, r12
    244a:	81 83       	std	Z+1, r24	; 0x01
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    244c:	12 96       	adiw	r26, 0x02	; 2
    244e:	2c 91       	ld	r18, X
    2450:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    2452:	2e 32       	cpi	r18, 0x2E	; 46
    2454:	49 f0       	breq	.+18     	; 0x2468 <follow_path+0x114>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2456:	c1 01       	movw	r24, r2
    2458:	02 c0       	rjmp	.+4      	; 0x245e <follow_path+0x10a>
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    245e:	2f 32       	cpi	r18, 0x2F	; 47
    2460:	41 f0       	breq	.+16     	; 0x2472 <follow_path+0x11e>
    2462:	2c 35       	cpi	r18, 0x5C	; 92
    2464:	31 f0       	breq	.+12     	; 0x2472 <follow_path+0x11e>
    2466:	01 c0       	rjmp	.+2      	; 0x246a <follow_path+0x116>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2468:	c1 01       	movw	r24, r2
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    246a:	21 32       	cpi	r18, 0x21	; 33
    246c:	08 f0       	brcs	.+2      	; 0x2470 <follow_path+0x11c>
    246e:	0e c1       	rjmp	.+540    	; 0x268c <follow_path+0x338>
    2470:	38 c1       	rjmp	.+624    	; 0x26e2 <follow_path+0x38e>
		*path = &p[si];									/* Return pointer to the next segment */
    2472:	ad 80       	ldd	r10, Y+5	; 0x05
    2474:	be 80       	ldd	r11, Y+6	; 0x06
    2476:	a8 0e       	add	r10, r24
    2478:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    247a:	80 e2       	ldi	r24, 0x20	; 32
    247c:	d6 01       	movw	r26, r12
    247e:	1b 96       	adiw	r26, 0x0b	; 11
    2480:	8c 93       	st	X, r24
    2482:	1b 97       	sbiw	r26, 0x0b	; 11
    2484:	3b c1       	rjmp	.+630    	; 0x26fc <follow_path+0x3a8>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2486:	b7 01       	movw	r22, r14
    2488:	a7 01       	movw	r20, r14
    248a:	d2 01       	movw	r26, r4
    248c:	98 2c       	mov	r9, r8
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    248e:	ed 81       	ldd	r30, Y+5	; 0x05
    2490:	fe 81       	ldd	r31, Y+6	; 0x06
    2492:	e4 0f       	add	r30, r20
    2494:	f5 1f       	adc	r31, r21
    2496:	20 81       	ld	r18, Z
    2498:	5a 01       	movw	r10, r20
    249a:	08 94       	sec
    249c:	a1 1c       	adc	r10, r1
    249e:	b1 1c       	adc	r11, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    24a0:	21 32       	cpi	r18, 0x21	; 33
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <follow_path+0x152>
    24a4:	69 c0       	rjmp	.+210    	; 0x2578 <follow_path+0x224>
    24a6:	2f 32       	cpi	r18, 0x2F	; 47
    24a8:	09 f4       	brne	.+2      	; 0x24ac <follow_path+0x158>
    24aa:	21 c1       	rjmp	.+578    	; 0x26ee <follow_path+0x39a>
    24ac:	2c 35       	cpi	r18, 0x5C	; 92
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <follow_path+0x15e>
    24b0:	1e c1       	rjmp	.+572    	; 0x26ee <follow_path+0x39a>
		if (c == '.' || i >= ni) {
    24b2:	2e 32       	cpi	r18, 0x2E	; 46
    24b4:	19 f0       	breq	.+6      	; 0x24bc <follow_path+0x168>
    24b6:	6a 17       	cp	r22, r26
    24b8:	7b 07       	cpc	r23, r27
    24ba:	78 f0       	brcs	.+30     	; 0x24da <follow_path+0x186>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    24bc:	a8 30       	cpi	r26, 0x08	; 8
    24be:	b1 05       	cpc	r27, r1
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <follow_path+0x170>
    24c2:	e6 c0       	rjmp	.+460    	; 0x2690 <follow_path+0x33c>
    24c4:	2e 32       	cpi	r18, 0x2E	; 46
    24c6:	09 f0       	breq	.+2      	; 0x24ca <follow_path+0x176>
    24c8:	e5 c0       	rjmp	.+458    	; 0x2694 <follow_path+0x340>
			i = 8; ni = 11;
			b <<= 2; continue;
    24ca:	99 0c       	add	r9, r9
    24cc:	99 0c       	add	r9, r9
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    24ce:	a5 01       	movw	r20, r10
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    24d0:	69 81       	ldd	r22, Y+1	; 0x01
    24d2:	7a 81       	ldd	r23, Y+2	; 0x02
    24d4:	ab 81       	ldd	r26, Y+3	; 0x03
    24d6:	bc 81       	ldd	r27, Y+4	; 0x04
    24d8:	da cf       	rjmp	.-76     	; 0x248e <follow_path+0x13a>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    24da:	22 23       	and	r18, r18
    24dc:	14 f4       	brge	.+4      	; 0x24e2 <follow_path+0x18e>
			b |= 3;						/* Eliminate NT flag */
    24de:	f3 e0       	ldi	r31, 0x03	; 3
    24e0:	9f 2a       	or	r9, r31
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    24e2:	82 2f       	mov	r24, r18
    24e4:	81 58       	subi	r24, 0x81	; 129
    24e6:	8f 31       	cpi	r24, 0x1F	; 31
    24e8:	18 f0       	brcs	.+6      	; 0x24f0 <follow_path+0x19c>
    24ea:	8f 55       	subi	r24, 0x5F	; 95
    24ec:	8d 31       	cpi	r24, 0x1D	; 29
    24ee:	e8 f4       	brcc	.+58     	; 0x252a <follow_path+0x1d6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    24f0:	ed 81       	ldd	r30, Y+5	; 0x05
    24f2:	fe 81       	ldd	r31, Y+6	; 0x06
    24f4:	ea 0d       	add	r30, r10
    24f6:	fb 1d       	adc	r31, r11
    24f8:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    24fa:	83 2f       	mov	r24, r19
    24fc:	80 54       	subi	r24, 0x40	; 64
    24fe:	8f 33       	cpi	r24, 0x3F	; 63
    2500:	20 f0       	brcs	.+8      	; 0x250a <follow_path+0x1b6>
    2502:	80 54       	subi	r24, 0x40	; 64
    2504:	8d 37       	cpi	r24, 0x7D	; 125
    2506:	08 f0       	brcs	.+2      	; 0x250a <follow_path+0x1b6>
    2508:	c7 c0       	rjmp	.+398    	; 0x2698 <follow_path+0x344>
    250a:	cd 01       	movw	r24, r26
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	68 17       	cp	r22, r24
    2510:	79 07       	cpc	r23, r25
    2512:	08 f0       	brcs	.+2      	; 0x2516 <follow_path+0x1c2>
    2514:	c3 c0       	rjmp	.+390    	; 0x269c <follow_path+0x348>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2516:	4e 5f       	subi	r20, 0xFE	; 254
    2518:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    251a:	f6 01       	movw	r30, r12
    251c:	e6 0f       	add	r30, r22
    251e:	f7 1f       	adc	r31, r23
    2520:	20 83       	st	Z, r18
			sfn[i++] = d;
    2522:	31 83       	std	Z+1, r19	; 0x01
    2524:	6e 5f       	subi	r22, 0xFE	; 254
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	b2 cf       	rjmp	.-156    	; 0x248e <follow_path+0x13a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    252a:	42 2f       	mov	r20, r18
    252c:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    252e:	42 32       	cpi	r20, 0x22	; 34
    2530:	51 05       	cpc	r21, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <follow_path+0x1e2>
    2534:	b5 c0       	rjmp	.+362    	; 0x26a0 <follow_path+0x34c>
    2536:	e2 e0       	ldi	r30, 0x02	; 2
    2538:	f1 e0       	ldi	r31, 0x01	; 1
    253a:	81 91       	ld	r24, Z+
    253c:	88 23       	and	r24, r24
    253e:	31 f0       	breq	.+12     	; 0x254c <follow_path+0x1f8>
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	48 17       	cp	r20, r24
    2544:	59 07       	cpc	r21, r25
    2546:	c9 f7       	brne	.-14     	; 0x253a <follow_path+0x1e6>
    2548:	46 e0       	ldi	r20, 0x06	; 6
    254a:	b1 c0       	rjmp	.+354    	; 0x26ae <follow_path+0x35a>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    254c:	82 2f       	mov	r24, r18
    254e:	81 54       	subi	r24, 0x41	; 65
    2550:	8a 31       	cpi	r24, 0x1A	; 26
    2552:	18 f4       	brcc	.+6      	; 0x255a <follow_path+0x206>
				b |= 2;
    2554:	f2 e0       	ldi	r31, 0x02	; 2
    2556:	9f 2a       	or	r9, r31
    2558:	07 c0       	rjmp	.+14     	; 0x2568 <follow_path+0x214>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    255a:	82 2f       	mov	r24, r18
    255c:	81 56       	subi	r24, 0x61	; 97
    255e:	8a 31       	cpi	r24, 0x1A	; 26
    2560:	18 f4       	brcc	.+6      	; 0x2568 <follow_path+0x214>
					b |= 1; c -= 0x20;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	98 2a       	or	r9, r24
    2566:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2568:	f6 01       	movw	r30, r12
    256a:	e6 0f       	add	r30, r22
    256c:	f7 1f       	adc	r31, r23
    256e:	20 83       	st	Z, r18
    2570:	6f 5f       	subi	r22, 0xFF	; 255
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2574:	a5 01       	movw	r20, r10
    2576:	8b cf       	rjmp	.-234    	; 0x248e <follow_path+0x13a>
    2578:	ed 81       	ldd	r30, Y+5	; 0x05
    257a:	fe 81       	ldd	r31, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    257c:	ae 0e       	add	r10, r30
    257e:	bf 1e       	adc	r11, r31
    2580:	89 2d       	mov	r24, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    2582:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2584:	61 15       	cp	r22, r1
    2586:	71 05       	cpc	r23, r1
    2588:	09 f4       	brne	.+2      	; 0x258c <follow_path+0x238>
    258a:	8c c0       	rjmp	.+280    	; 0x26a4 <follow_path+0x350>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    258c:	f6 01       	movw	r30, r12
    258e:	90 81       	ld	r25, Z
    2590:	95 3e       	cpi	r25, 0xE5	; 229
    2592:	11 f4       	brne	.+4      	; 0x2598 <follow_path+0x244>
    2594:	95 e0       	ldi	r25, 0x05	; 5
    2596:	90 83       	st	Z, r25

	if (ni == 8) b <<= 2;
    2598:	a8 30       	cpi	r26, 0x08	; 8
    259a:	b1 05       	cpc	r27, r1
    259c:	19 f4       	brne	.+6      	; 0x25a4 <follow_path+0x250>
    259e:	98 2e       	mov	r9, r24
    25a0:	99 0c       	add	r9, r9
    25a2:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    25a4:	89 2d       	mov	r24, r9
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 01       	movw	r18, r24
    25aa:	23 70       	andi	r18, 0x03	; 3
    25ac:	30 70       	andi	r19, 0x00	; 0
    25ae:	21 30       	cpi	r18, 0x01	; 1
    25b0:	31 05       	cpc	r19, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <follow_path+0x262>
    25b4:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    25b6:	8c 70       	andi	r24, 0x0C	; 12
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	91 05       	cpc	r25, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <follow_path+0x26e>
    25c0:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    25c2:	d6 01       	movw	r26, r12
    25c4:	1b 96       	adiw	r26, 0x0b	; 11
    25c6:	4c 93       	st	X, r20
    25c8:	1b 97       	sbiw	r26, 0x0b	; 11
    25ca:	98 c0       	rjmp	.+304    	; 0x26fc <follow_path+0x3a8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    25cc:	f8 01       	movw	r30, r16
    25ce:	46 85       	ldd	r20, Z+14	; 0x0e
    25d0:	57 85       	ldd	r21, Z+15	; 0x0f
    25d2:	60 89       	ldd	r22, Z+16	; 0x10
    25d4:	71 89       	ldd	r23, Z+17	; 0x11
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
		if (res != FR_OK) break;
    25de:	88 23       	and	r24, r24
    25e0:	41 f5       	brne	.+80     	; 0x2632 <follow_path+0x2de>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    25e2:	d8 01       	movw	r26, r16
    25e4:	52 96       	adiw	r26, 0x12	; 18
    25e6:	4d 91       	ld	r20, X+
    25e8:	5c 91       	ld	r21, X
    25ea:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    25ec:	fa 01       	movw	r30, r20
    25ee:	90 81       	ld	r25, Z
    25f0:	99 23       	and	r25, r25
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <follow_path+0x2a2>
    25f4:	92 c0       	rjmp	.+292    	; 0x271a <follow_path+0x3c6>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    25f6:	93 85       	ldd	r25, Z+11	; 0x0b
    25f8:	93 fd       	sbrc	r25, 3
    25fa:	13 c0       	rjmp	.+38     	; 0x2622 <follow_path+0x2ce>
    25fc:	54 96       	adiw	r26, 0x14	; 20
    25fe:	6d 91       	ld	r22, X+
    2600:	7c 91       	ld	r23, X
    2602:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    2604:	9a 01       	movw	r18, r20
    2606:	25 5f       	subi	r18, 0xF5	; 245
    2608:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    260a:	db 01       	movw	r26, r22
    260c:	6a 01       	movw	r12, r20
    260e:	48 2f       	mov	r20, r24
    2610:	04 c0       	rjmp	.+8      	; 0x261a <follow_path+0x2c6>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2612:	e2 17       	cp	r30, r18
    2614:	f3 07       	cpc	r31, r19
    2616:	09 f4       	brne	.+2      	; 0x261a <follow_path+0x2c6>
    2618:	7a c0       	rjmp	.+244    	; 0x270e <follow_path+0x3ba>
    261a:	91 91       	ld	r25, Z+
    261c:	8d 91       	ld	r24, X+
    261e:	98 17       	cp	r25, r24
    2620:	c1 f3       	breq	.-16     	; 0x2612 <follow_path+0x2be>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    2622:	c8 01       	movw	r24, r16
    2624:	b7 01       	movw	r22, r14
    2626:	0e 94 65 10 	call	0x20ca	; 0x20ca <dir_next>
	} while (res == FR_OK);
    262a:	88 23       	and	r24, r24
    262c:	79 f2       	breq	.-98     	; 0x25cc <follow_path+0x278>
    262e:	48 2f       	mov	r20, r24
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <follow_path+0x2e0>
    2632:	48 2f       	mov	r20, r24
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    2634:	d8 01       	movw	r26, r16
    2636:	54 96       	adiw	r26, 0x14	; 20
    2638:	ed 91       	ld	r30, X+
    263a:	fc 91       	ld	r31, X
    263c:	55 97       	sbiw	r26, 0x15	; 21
    263e:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    2640:	44 30       	cpi	r20, 0x04	; 4
    2642:	a9 f5       	brne	.+106    	; 0x26ae <follow_path+0x35a>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    2644:	85 ff       	sbrs	r24, 5
    2646:	0b c0       	rjmp	.+22     	; 0x265e <follow_path+0x30a>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    2648:	f8 01       	movw	r30, r16
    264a:	16 82       	std	Z+6, r1	; 0x06
    264c:	17 82       	std	Z+7, r1	; 0x07
    264e:	10 86       	std	Z+8, r1	; 0x08
    2650:	11 86       	std	Z+9, r1	; 0x09
    2652:	13 8a       	std	Z+19, r1	; 0x13
    2654:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    2656:	82 ff       	sbrs	r24, 2
    2658:	d4 ce       	rjmp	.-600    	; 0x2402 <follow_path+0xae>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	28 c0       	rjmp	.+80     	; 0x26ae <follow_path+0x35a>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    265e:	82 ff       	sbrs	r24, 2
    2660:	23 c0       	rjmp	.+70     	; 0x26a8 <follow_path+0x354>
		dj->dir = 0;
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    2662:	44 e0       	ldi	r20, 0x04	; 4
    2664:	24 c0       	rjmp	.+72     	; 0x26ae <follow_path+0x35a>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2666:	1b 96       	adiw	r26, 0x0b	; 11
    2668:	8c 91       	ld	r24, X
    266a:	1b 97       	sbiw	r26, 0x0b	; 11
    266c:	84 ff       	sbrs	r24, 4
    266e:	1e c0       	rjmp	.+60     	; 0x26ac <follow_path+0x358>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    2670:	f8 01       	movw	r30, r16
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	bd 01       	movw	r22, r26
    2678:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	86 83       	std	Z+6, r24	; 0x06
    2684:	97 83       	std	Z+7, r25	; 0x07
    2686:	a0 87       	std	Z+8, r26	; 0x08
    2688:	b1 87       	std	Z+9, r27	; 0x09
    268a:	bb ce       	rjmp	.-650    	; 0x2402 <follow_path+0xae>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    268c:	46 e0       	ldi	r20, 0x06	; 6
    268e:	0f c0       	rjmp	.+30     	; 0x26ae <follow_path+0x35a>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2690:	46 e0       	ldi	r20, 0x06	; 6
    2692:	0d c0       	rjmp	.+26     	; 0x26ae <follow_path+0x35a>
    2694:	46 e0       	ldi	r20, 0x06	; 6
    2696:	0b c0       	rjmp	.+22     	; 0x26ae <follow_path+0x35a>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2698:	46 e0       	ldi	r20, 0x06	; 6
    269a:	09 c0       	rjmp	.+18     	; 0x26ae <follow_path+0x35a>
    269c:	46 e0       	ldi	r20, 0x06	; 6
    269e:	07 c0       	rjmp	.+14     	; 0x26ae <follow_path+0x35a>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    26a0:	46 e0       	ldi	r20, 0x06	; 6
    26a2:	05 c0       	rjmp	.+10     	; 0x26ae <follow_path+0x35a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    26a4:	46 e0       	ldi	r20, 0x06	; 6
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <follow_path+0x35a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    26a8:	45 e0       	ldi	r20, 0x05	; 5
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <follow_path+0x35a>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    26ac:	45 e0       	ldi	r20, 0x05	; 5
			dj->sclust = ld_clust(dj->fs, dir);
		}
	}

	return res;
}
    26ae:	84 2f       	mov	r24, r20
    26b0:	26 96       	adiw	r28, 0x06	; 6
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	bf 90       	pop	r11
    26ce:	af 90       	pop	r10
    26d0:	9f 90       	pop	r9
    26d2:	8f 90       	pop	r8
    26d4:	7f 90       	pop	r7
    26d6:	6f 90       	pop	r6
    26d8:	5f 90       	pop	r5
    26da:	4f 90       	pop	r4
    26dc:	3f 90       	pop	r3
    26de:	2f 90       	pop	r2
    26e0:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    26e2:	ad 80       	ldd	r10, Y+5	; 0x05
    26e4:	be 80       	ldd	r11, Y+6	; 0x06
    26e6:	a8 0e       	add	r10, r24
    26e8:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    26ea:	84 e2       	ldi	r24, 0x24	; 36
    26ec:	c7 ce       	rjmp	.-626    	; 0x247c <follow_path+0x128>
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    26f2:	a8 0e       	add	r10, r24
    26f4:	b9 1e       	adc	r11, r25
    26f6:	89 2d       	mov	r24, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    26f8:	48 2d       	mov	r20, r8
    26fa:	44 cf       	rjmp	.-376    	; 0x2584 <follow_path+0x230>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    26fc:	c8 01       	movw	r24, r16
    26fe:	b7 01       	movw	r22, r14
    2700:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
    2704:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2706:	88 23       	and	r24, r24
    2708:	09 f4       	brne	.+2      	; 0x270c <follow_path+0x3b8>
    270a:	60 cf       	rjmp	.-320    	; 0x25cc <follow_path+0x278>
    270c:	93 cf       	rjmp	.-218    	; 0x2634 <follow_path+0x2e0>
    270e:	d6 01       	movw	r26, r12
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    2710:	fb 01       	movw	r30, r22
    2712:	83 85       	ldd	r24, Z+11	; 0x0b
    2714:	82 ff       	sbrs	r24, 2
    2716:	a7 cf       	rjmp	.-178    	; 0x2666 <follow_path+0x312>
    2718:	ca cf       	rjmp	.-108    	; 0x26ae <follow_path+0x35a>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    271a:	d8 01       	movw	r26, r16
    271c:	54 96       	adiw	r26, 0x14	; 20
    271e:	ed 91       	ld	r30, X+
    2720:	fc 91       	ld	r31, X
    2722:	55 97       	sbiw	r26, 0x15	; 21
    2724:	83 85       	ldd	r24, Z+11	; 0x0b
    2726:	8e cf       	rjmp	.-228    	; 0x2644 <follow_path+0x2f0>

00002728 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
    273c:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    273e:	88 23       	and	r24, r24
    2740:	d9 f5       	brne	.+118    	; 0x27b8 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2742:	d8 01       	movw	r26, r16
    2744:	1e 96       	adiw	r26, 0x0e	; 14
    2746:	4d 91       	ld	r20, X+
    2748:	5d 91       	ld	r21, X+
    274a:	6d 91       	ld	r22, X+
    274c:	7c 91       	ld	r23, X
    274e:	51 97       	sbiw	r26, 0x11	; 17
    2750:	8d 91       	ld	r24, X+
    2752:	9c 91       	ld	r25, X
    2754:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    2758:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    275a:	88 23       	and	r24, r24
    275c:	69 f5       	brne	.+90     	; 0x27b8 <dir_register+0x90>
			c = *dj->dir;
    275e:	d8 01       	movw	r26, r16
    2760:	52 96       	adiw	r26, 0x12	; 18
    2762:	ed 91       	ld	r30, X+
    2764:	fc 91       	ld	r31, X
    2766:	53 97       	sbiw	r26, 0x13	; 19
    2768:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    276a:	85 3e       	cpi	r24, 0xE5	; 229
    276c:	61 f1       	breq	.+88     	; 0x27c6 <dir_register+0x9e>
    276e:	88 23       	and	r24, r24
    2770:	51 f1       	breq	.+84     	; 0x27c6 <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2772:	c8 01       	movw	r24, r16
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	0e 94 65 10 	call	0x20ca	; 0x20ca <dir_next>
    277c:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    277e:	88 23       	and	r24, r24
    2780:	01 f3       	breq	.-64     	; 0x2742 <dir_register+0x1a>
    2782:	1a c0       	rjmp	.+52     	; 0x27b8 <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2784:	f8 01       	movw	r30, r16
    2786:	e2 88       	ldd	r14, Z+18	; 0x12
    2788:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    278a:	c7 01       	movw	r24, r14
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2798:	d8 01       	movw	r26, r16
    279a:	54 96       	adiw	r26, 0x14	; 20
    279c:	6d 91       	ld	r22, X+
    279e:	7c 91       	ld	r23, X
    27a0:	55 97       	sbiw	r26, 0x15	; 21
    27a2:	c7 01       	movw	r24, r14
    27a4:	4b e0       	ldi	r20, 0x0B	; 11
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    27ac:	d8 01       	movw	r26, r16
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	11 97       	sbiw	r26, 0x01	; 1
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    27b8:	8c 2f       	mov	r24, r28
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    27c6:	f8 01       	movw	r30, r16
    27c8:	46 85       	ldd	r20, Z+14	; 0x0e
    27ca:	57 85       	ldd	r21, Z+15	; 0x0f
    27cc:	60 89       	ldd	r22, Z+16	; 0x10
    27ce:	71 89       	ldd	r23, Z+17	; 0x11
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    27d8:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    27da:	88 23       	and	r24, r24
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <dir_register+0x90>
    27de:	d2 cf       	rjmp	.-92     	; 0x2784 <dir_register+0x5c>

000027e0 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    27e6:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    27e8:	17 c0       	rjmp	.+46     	; 0x2818 <dir_read+0x38>
		res = move_window(dj->fs, dj->sect);
    27ea:	88 81       	ld	r24, Y
    27ec:	99 81       	ldd	r25, Y+1	; 0x01
    27ee:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
		if (res != FR_OK) break;
    27f2:	88 23       	and	r24, r24
    27f4:	e1 f4       	brne	.+56     	; 0x282e <dir_read+0x4e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    27f6:	ea 89       	ldd	r30, Y+18	; 0x12
    27f8:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    27fa:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    27fc:	99 23       	and	r25, r25
    27fe:	f1 f0       	breq	.+60     	; 0x283c <dir_read+0x5c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    2800:	95 3e       	cpi	r25, 0xE5	; 229
    2802:	19 f0       	breq	.+6      	; 0x280a <dir_read+0x2a>
    2804:	93 85       	ldd	r25, Z+11	; 0x0b
    2806:	93 ff       	sbrs	r25, 3
    2808:	16 c0       	rjmp	.+44     	; 0x2836 <dir_read+0x56>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    280a:	ce 01       	movw	r24, r28
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	0e 94 65 10 	call	0x20ca	; 0x20ca <dir_next>
		if (res != FR_OK) break;
    2814:	88 23       	and	r24, r24
    2816:	59 f4       	brne	.+22     	; 0x282e <dir_read+0x4e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2818:	4e 85       	ldd	r20, Y+14	; 0x0e
    281a:	5f 85       	ldd	r21, Y+15	; 0x0f
    281c:	68 89       	ldd	r22, Y+16	; 0x10
    281e:	79 89       	ldd	r23, Y+17	; 0x11
    2820:	41 15       	cp	r20, r1
    2822:	51 05       	cpc	r21, r1
    2824:	61 05       	cpc	r22, r1
    2826:	71 05       	cpc	r23, r1
    2828:	01 f7       	brne	.-64     	; 0x27ea <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    282a:	88 23       	and	r24, r24
    282c:	21 f0       	breq	.+8      	; 0x2836 <dir_read+0x56>
    282e:	1e 86       	std	Y+14, r1	; 0x0e
    2830:	1f 86       	std	Y+15, r1	; 0x0f
    2832:	18 8a       	std	Y+16, r1	; 0x10
    2834:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    283c:	84 e0       	ldi	r24, 0x04	; 4
    283e:	f7 cf       	rjmp	.-18     	; 0x282e <dir_read+0x4e>

00002840 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    2840:	7f 92       	push	r7
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	cf 92       	push	r12
    284c:	df 92       	push	r13
    284e:	ef 92       	push	r14
    2850:	ff 92       	push	r15
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	ec 01       	movw	r28, r24
    285c:	4a 01       	movw	r8, r20
    285e:	5b 01       	movw	r10, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2860:	42 30       	cpi	r20, 0x02	; 2
    2862:	51 05       	cpc	r21, r1
    2864:	61 05       	cpc	r22, r1
    2866:	71 05       	cpc	r23, r1
    2868:	08 f4       	brcc	.+2      	; 0x286c <remove_chain+0x2c>
    286a:	55 c0       	rjmp	.+170    	; 0x2916 <remove_chain+0xd6>
    286c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    286e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2870:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2872:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2874:	48 17       	cp	r20, r24
    2876:	59 07       	cpc	r21, r25
    2878:	6a 07       	cpc	r22, r26
    287a:	7b 07       	cpc	r23, r27
    287c:	08 f0       	brcs	.+2      	; 0x2880 <remove_chain+0x40>
    287e:	4d c0       	rjmp	.+154    	; 0x291a <remove_chain+0xda>
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2882:	46 01       	movw	r8, r12
    2884:	57 01       	movw	r10, r14
    2886:	02 c0       	rjmp	.+4      	; 0x288c <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    2888:	77 24       	eor	r7, r7
    288a:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    288c:	ce 01       	movw	r24, r28
    288e:	b5 01       	movw	r22, r10
    2890:	a4 01       	movw	r20, r8
    2892:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    2896:	6b 01       	movw	r12, r22
    2898:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    289a:	61 15       	cp	r22, r1
    289c:	71 05       	cpc	r23, r1
    289e:	81 05       	cpc	r24, r1
    28a0:	91 05       	cpc	r25, r1
    28a2:	e9 f1       	breq	.+122    	; 0x291e <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	c9 16       	cp	r12, r25
    28a8:	d1 04       	cpc	r13, r1
    28aa:	e1 04       	cpc	r14, r1
    28ac:	f1 04       	cpc	r15, r1
    28ae:	c9 f1       	breq	.+114    	; 0x2922 <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	c8 16       	cp	r12, r24
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	d8 06       	cpc	r13, r24
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	e8 06       	cpc	r14, r24
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	f8 06       	cpc	r15, r24
    28c0:	91 f1       	breq	.+100    	; 0x2926 <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    28c2:	ce 01       	movw	r24, r28
    28c4:	b5 01       	movw	r22, r10
    28c6:	a4 01       	movw	r20, r8
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	10 e0       	ldi	r17, 0x00	; 0
    28cc:	98 01       	movw	r18, r16
    28ce:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <put_fat>
			if (res != FR_OK) break;
    28d2:	88 23       	and	r24, r24
    28d4:	49 f5       	brne	.+82     	; 0x2928 <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    28d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    28d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    28da:	68 89       	ldd	r22, Y+16	; 0x10
    28dc:	79 89       	ldd	r23, Y+17	; 0x11
    28de:	4f 3f       	cpi	r20, 0xFF	; 255
    28e0:	9f ef       	ldi	r25, 0xFF	; 255
    28e2:	59 07       	cpc	r21, r25
    28e4:	9f ef       	ldi	r25, 0xFF	; 255
    28e6:	69 07       	cpc	r22, r25
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	79 07       	cpc	r23, r25
    28ec:	49 f0       	breq	.+18     	; 0x2900 <remove_chain+0xc0>
				fs->free_clust++;
    28ee:	4f 5f       	subi	r20, 0xFF	; 255
    28f0:	5f 4f       	sbci	r21, 0xFF	; 255
    28f2:	6f 4f       	sbci	r22, 0xFF	; 255
    28f4:	7f 4f       	sbci	r23, 0xFF	; 255
    28f6:	4e 87       	std	Y+14, r20	; 0x0e
    28f8:	5f 87       	std	Y+15, r21	; 0x0f
    28fa:	68 8b       	std	Y+16, r22	; 0x10
    28fc:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    28fe:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2900:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2902:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2904:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2906:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2908:	c4 16       	cp	r12, r20
    290a:	d5 06       	cpc	r13, r21
    290c:	e6 06       	cpc	r14, r22
    290e:	f7 06       	cpc	r15, r23
    2910:	08 f4       	brcc	.+2      	; 0x2914 <remove_chain+0xd4>
    2912:	b7 cf       	rjmp	.-146    	; 0x2882 <remove_chain+0x42>
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <remove_chain+0xe8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	07 c0       	rjmp	.+14     	; 0x2928 <remove_chain+0xe8>
    291a:	82 e0       	ldi	r24, 0x02	; 2
    291c:	05 c0       	rjmp	.+10     	; 0x2928 <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	03 c0       	rjmp	.+6      	; 0x2928 <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	01 c0       	rjmp	.+2      	; 0x2928 <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2926:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	7f 90       	pop	r7
    2942:	08 95       	ret

00002944 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    2944:	88 23       	and	r24, r24
    2946:	91 f4       	brne	.+36     	; 0x296c <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    2948:	e0 91 2d 01 	lds	r30, 0x012D
    294c:	f0 91 2e 01 	lds	r31, 0x012E

	if (rfs) {
    2950:	30 97       	sbiw	r30, 0x00	; 0
    2952:	09 f0       	breq	.+2      	; 0x2956 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    2954:	10 82       	st	Z, r1
	}

	if (fs) {
    2956:	61 15       	cp	r22, r1
    2958:	71 05       	cpc	r23, r1
    295a:	11 f0       	breq	.+4      	; 0x2960 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    295c:	fb 01       	movw	r30, r22
    295e:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    2960:	70 93 2e 01 	sts	0x012E, r23
    2964:	60 93 2d 01 	sts	0x012D, r22

	return FR_OK;
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    296c:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    296e:	08 95       	ret

00002970 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2970:	4f 92       	push	r4
    2972:	5f 92       	push	r5
    2974:	6f 92       	push	r6
    2976:	7f 92       	push	r7
    2978:	8f 92       	push	r8
    297a:	9f 92       	push	r9
    297c:	af 92       	push	r10
    297e:	bf 92       	push	r11
    2980:	cf 92       	push	r12
    2982:	df 92       	push	r13
    2984:	ef 92       	push	r14
    2986:	ff 92       	push	r15
    2988:	0f 93       	push	r16
    298a:	1f 93       	push	r17
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	a4 97       	sbiw	r28, 0x24	; 36
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	7c 01       	movw	r14, r24
    29a2:	7c a3       	lds	r23, 0x5c
    29a4:	6b a3       	lds	r22, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	09 f4       	brne	.+2      	; 0x29ac <f_open+0x3c>
    29aa:	ea c0       	rjmp	.+468    	; 0x2b80 <f_open+0x210>
	fp->fs = 0;			/* Clear file object */
    29ac:	fc 01       	movw	r30, r24
    29ae:	11 82       	std	Z+1, r1	; 0x01
    29b0:	10 82       	st	Z, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    29b2:	04 2f       	mov	r16, r20
    29b4:	0f 71       	andi	r16, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    29b6:	4e 71       	andi	r20, 0x1E	; 30
    29b8:	ce 01       	movw	r24, r28
    29ba:	83 96       	adiw	r24, 0x23	; 35
    29bc:	be 01       	movw	r22, r28
    29be:	6f 5f       	subi	r22, 0xFF	; 255
    29c0:	7f 4f       	sbci	r23, 0xFF	; 255
    29c2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
    29c6:	18 2f       	mov	r17, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
    29c8:	88 23       	and	r24, r24
    29ca:	09 f0       	breq	.+2      	; 0x29ce <f_open+0x5e>
    29cc:	da c0       	rjmp	.+436    	; 0x2b82 <f_open+0x212>
		INIT_BUF(dj);
    29ce:	ce 01       	movw	r24, r28
    29d0:	47 96       	adiw	r24, 0x17	; 23
    29d2:	9e 8b       	std	Y+22, r25	; 0x16
    29d4:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    29d6:	6b a1       	lds	r22, 0x4b
    29d8:	7c a1       	lds	r23, 0x4c
    29da:	ce 01       	movw	r24, r28
    29dc:	01 96       	adiw	r24, 0x01	; 1
    29de:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		dir = dj.dir;
    29e2:	cb 88       	ldd	r12, Y+19	; 0x13
    29e4:	dc 88       	ldd	r13, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    29e6:	88 23       	and	r24, r24
    29e8:	21 f4       	brne	.+8      	; 0x29f2 <f_open+0x82>
			if (!dir)	/* Current dir itself */
    29ea:	c1 14       	cp	r12, r1
    29ec:	d1 04       	cpc	r13, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <f_open+0x82>
				res = FR_INVALID_NAME;
    29f0:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    29f2:	40 2f       	mov	r20, r16
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	9a 01       	movw	r18, r20
    29f8:	2c 71       	andi	r18, 0x1C	; 28
    29fa:	30 70       	andi	r19, 0x00	; 0
    29fc:	21 15       	cp	r18, r1
    29fe:	31 05       	cpc	r19, r1
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <f_open+0x94>
    2a02:	5b c0       	rjmp	.+182    	; 0x2aba <f_open+0x14a>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    2a04:	88 23       	and	r24, r24
    2a06:	71 f0       	breq	.+28     	; 0x2a24 <f_open+0xb4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2a08:	84 30       	cpi	r24, 0x04	; 4
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <f_open+0x9e>
    2a0c:	b7 c0       	rjmp	.+366    	; 0x2b7c <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    2a0e:	ce 01       	movw	r24, r28
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	0e 94 94 13 	call	0x2728	; 0x2728 <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    2a16:	cb 88       	ldd	r12, Y+19	; 0x13
    2a18:	dc 88       	ldd	r13, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2a1a:	88 23       	and	r24, r24
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <f_open+0xb0>
    2a1e:	ae c0       	rjmp	.+348    	; 0x2b7c <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2a20:	08 60       	ori	r16, 0x08	; 8
    2a22:	07 c0       	rjmp	.+14     	; 0x2a32 <f_open+0xc2>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2a24:	f6 01       	movw	r30, r12
    2a26:	83 85       	ldd	r24, Z+11	; 0x0b
    2a28:	81 71       	andi	r24, 0x11	; 17
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <f_open+0xbe>
    2a2c:	c2 c0       	rjmp	.+388    	; 0x2bb2 <f_open+0x242>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    2a2e:	02 fd       	sbrc	r16, 2
    2a30:	c2 c0       	rjmp	.+388    	; 0x2bb6 <f_open+0x246>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2a32:	03 ff       	sbrs	r16, 3
    2a34:	c6 c0       	rjmp	.+396    	; 0x2bc2 <f_open+0x252>
				dw = get_fattime();					/* Created time */
    2a36:	0e 94 29 0c 	call	0x1852	; 0x1852 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	66 87       	std	Z+14, r22	; 0x0e
    2a3e:	77 87       	std	Z+15, r23	; 0x0f
    2a40:	80 8b       	std	Z+16, r24	; 0x10
    2a42:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;					/* Reset attribute */
    2a44:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    2a46:	14 8e       	std	Z+28, r1	; 0x1c
    2a48:	15 8e       	std	Z+29, r1	; 0x1d
    2a4a:	16 8e       	std	Z+30, r1	; 0x1e
    2a4c:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	b6 01       	movw	r22, r12
    2a54:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    2a58:	4b 01       	movw	r8, r22
    2a5a:	5c 01       	movw	r10, r24
				st_clust(dir, 0);					/* cluster = 0 */
    2a5c:	c6 01       	movw	r24, r12
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	ba 01       	movw	r22, r20
    2a64:	0e 94 4e 05 	call	0xa9c	; 0xa9c <st_clust>
				dj.fs->wflag = 1;
    2a68:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {							/* Remove the cluster chain if exist */
    2a70:	81 14       	cp	r8, r1
    2a72:	91 04       	cpc	r9, r1
    2a74:	a1 04       	cpc	r10, r1
    2a76:	b1 04       	cpc	r11, r1
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <f_open+0x10c>
    2a7a:	a3 c0       	rjmp	.+326    	; 0x2bc2 <f_open+0x252>
					dw = dj.fs->winsect;
    2a7c:	46 a4       	lds	r20, 0xa6
    2a7e:	57 a4       	lds	r21, 0xa7
    2a80:	60 a8       	sts	0x00, r22
    2a82:	71 a8       	sts	0x81, r23
					res = remove_chain(dj.fs, cl);
    2a84:	cf 01       	movw	r24, r30
    2a86:	b5 01       	movw	r22, r10
    2a88:	a4 01       	movw	r20, r8
    2a8a:	0e 94 20 14 	call	0x2840	; 0x2840 <remove_chain>
					if (res == FR_OK) {
    2a8e:	88 23       	and	r24, r24
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <f_open+0x124>
    2a92:	74 c0       	rjmp	.+232    	; 0x2b7c <f_open+0x20c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2a94:	e9 81       	ldd	r30, Y+1	; 0x01
    2a96:	fa 81       	ldd	r31, Y+2	; 0x02
    2a98:	d5 01       	movw	r26, r10
    2a9a:	c4 01       	movw	r24, r8
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	a1 09       	sbc	r26, r1
    2aa0:	b1 09       	sbc	r27, r1
    2aa2:	82 87       	std	Z+10, r24	; 0x0a
    2aa4:	93 87       	std	Z+11, r25	; 0x0b
    2aa6:	a4 87       	std	Z+12, r26	; 0x0c
    2aa8:	b5 87       	std	Z+13, r27	; 0x0d
						res = move_window(dj.fs, dw);
    2aaa:	cf 01       	movw	r24, r30
    2aac:	b3 01       	movw	r22, r6
    2aae:	a2 01       	movw	r20, r4
    2ab0:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2ab4:	88 23       	and	r24, r24
    2ab6:	69 f0       	breq	.+26     	; 0x2ad2 <f_open+0x162>
    2ab8:	61 c0       	rjmp	.+194    	; 0x2b7c <f_open+0x20c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    2aba:	88 23       	and	r24, r24
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <f_open+0x150>
    2abe:	5e c0       	rjmp	.+188    	; 0x2b7c <f_open+0x20c>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	83 85       	ldd	r24, Z+11	; 0x0b
    2ac4:	84 fd       	sbrc	r24, 4
    2ac6:	79 c0       	rjmp	.+242    	; 0x2bba <f_open+0x24a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2ac8:	01 ff       	sbrs	r16, 1
    2aca:	7b c0       	rjmp	.+246    	; 0x2bc2 <f_open+0x252>
    2acc:	80 fd       	sbrc	r24, 0
    2ace:	77 c0       	rjmp	.+238    	; 0x2bbe <f_open+0x24e>
    2ad0:	78 c0       	rjmp	.+240    	; 0x2bc2 <f_open+0x252>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
    2ad2:	00 62       	ori	r16, 0x20	; 32
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2ad4:	a9 80       	ldd	r10, Y+1	; 0x01
    2ad6:	ba 80       	ldd	r11, Y+2	; 0x02
    2ad8:	f5 01       	movw	r30, r10
    2ada:	86 a5       	lds	r24, 0x66
    2adc:	97 a5       	lds	r25, 0x67
    2ade:	a0 a9       	sts	0x40, r26
    2ae0:	b1 a9       	sts	0x41, r27
    2ae2:	f7 01       	movw	r30, r14
    2ae4:	82 8f       	std	Z+26, r24	; 0x1a
    2ae6:	93 8f       	std	Z+27, r25	; 0x1b
    2ae8:	a4 8f       	std	Z+28, r26	; 0x1c
    2aea:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    2aec:	d7 8e       	std	Z+31, r13	; 0x1f
    2aee:	c6 8e       	std	Z+30, r12	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    2af0:	04 83       	std	Z+4, r16	; 0x04
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2af2:	c5 01       	movw	r24, r10
    2af4:	b6 01       	movw	r22, r12
    2af6:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	f7 01       	movw	r30, r14
    2b00:	86 87       	std	Z+14, r24	; 0x0e
    2b02:	97 87       	std	Z+15, r25	; 0x0f
    2b04:	a0 8b       	std	Z+16, r26	; 0x10
    2b06:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2b08:	f6 01       	movw	r30, r12
    2b0a:	87 8d       	ldd	r24, Z+31	; 0x1f
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a0 e0       	ldi	r26, 0x00	; 0
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	78 2f       	mov	r23, r24
    2b14:	66 27       	eor	r22, r22
    2b16:	55 27       	eor	r21, r21
    2b18:	44 27       	eor	r20, r20
    2b1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a0 e0       	ldi	r26, 0x00	; 0
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	dc 01       	movw	r26, r24
    2b24:	99 27       	eor	r25, r25
    2b26:	88 27       	eor	r24, r24
    2b28:	48 2b       	or	r20, r24
    2b2a:	59 2b       	or	r21, r25
    2b2c:	6a 2b       	or	r22, r26
    2b2e:	7b 2b       	or	r23, r27
    2b30:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	48 2b       	or	r20, r24
    2b3a:	59 2b       	or	r21, r25
    2b3c:	6a 2b       	or	r22, r26
    2b3e:	7b 2b       	or	r23, r27
    2b40:	95 8d       	ldd	r25, Z+29	; 0x1d
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	a0 e0       	ldi	r26, 0x00	; 0
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	84 2b       	or	r24, r20
    2b4a:	95 2b       	or	r25, r21
    2b4c:	a6 2b       	or	r26, r22
    2b4e:	b7 2b       	or	r27, r23
    2b50:	f7 01       	movw	r30, r14
    2b52:	82 87       	std	Z+10, r24	; 0x0a
    2b54:	93 87       	std	Z+11, r25	; 0x0b
    2b56:	a4 87       	std	Z+12, r26	; 0x0c
    2b58:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    2b5a:	16 82       	std	Z+6, r1	; 0x06
    2b5c:	17 82       	std	Z+7, r1	; 0x07
    2b5e:	10 86       	std	Z+8, r1	; 0x08
    2b60:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    2b62:	16 8a       	std	Z+22, r1	; 0x16
    2b64:	17 8a       	std	Z+23, r1	; 0x17
    2b66:	10 8e       	std	Z+24, r1	; 0x18
    2b68:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2b6a:	b1 82       	std	Z+1, r11	; 0x01
    2b6c:	a0 82       	st	Z, r10
    2b6e:	f5 01       	movw	r30, r10
    2b70:	86 81       	ldd	r24, Z+6	; 0x06
    2b72:	97 81       	ldd	r25, Z+7	; 0x07
    2b74:	f7 01       	movw	r30, r14
    2b76:	93 83       	std	Z+3, r25	; 0x03
    2b78:	82 83       	std	Z+2, r24	; 0x02
    2b7a:	03 c0       	rjmp	.+6      	; 0x2b82 <f_open+0x212>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2b7c:	18 2f       	mov	r17, r24
    2b7e:	01 c0       	rjmp	.+2      	; 0x2b82 <f_open+0x212>
    2b80:	19 e0       	ldi	r17, 0x09	; 9
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2b82:	81 2f       	mov	r24, r17
    2b84:	a4 96       	adiw	r28, 0x24	; 36
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	ff 90       	pop	r15
    2b9a:	ef 90       	pop	r14
    2b9c:	df 90       	pop	r13
    2b9e:	cf 90       	pop	r12
    2ba0:	bf 90       	pop	r11
    2ba2:	af 90       	pop	r10
    2ba4:	9f 90       	pop	r9
    2ba6:	8f 90       	pop	r8
    2ba8:	7f 90       	pop	r7
    2baa:	6f 90       	pop	r6
    2bac:	5f 90       	pop	r5
    2bae:	4f 90       	pop	r4
    2bb0:	08 95       	ret
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    2bb2:	87 e0       	ldi	r24, 0x07	; 7
    2bb4:	e3 cf       	rjmp	.-58     	; 0x2b7c <f_open+0x20c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    2bb6:	88 e0       	ldi	r24, 0x08	; 8
    2bb8:	e1 cf       	rjmp	.-62     	; 0x2b7c <f_open+0x20c>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    2bba:	84 e0       	ldi	r24, 0x04	; 4
    2bbc:	df cf       	rjmp	.-66     	; 0x2b7c <f_open+0x20c>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2bbe:	87 e0       	ldi	r24, 0x07	; 7
    2bc0:	dd cf       	rjmp	.-70     	; 0x2b7c <f_open+0x20c>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2bc2:	03 ff       	sbrs	r16, 3
    2bc4:	87 cf       	rjmp	.-242    	; 0x2ad4 <f_open+0x164>
    2bc6:	85 cf       	rjmp	.-246    	; 0x2ad2 <f_open+0x162>

00002bc8 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2bc8:	2f 92       	push	r2
    2bca:	3f 92       	push	r3
    2bcc:	4f 92       	push	r4
    2bce:	5f 92       	push	r5
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <f_read+0x24>
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <f_read+0x26>
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <f_read+0x28>
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	06 2f       	mov	r16, r22
    2bfa:	17 2f       	mov	r17, r23
    2bfc:	6a 01       	movw	r12, r20
    2bfe:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    2c00:	d9 01       	movw	r26, r18
    2c02:	1d 92       	st	X+, r1
    2c04:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    2c06:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <validate>
    2c0a:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2c0c:	88 23       	and	r24, r24
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <f_read+0x4a>
    2c10:	a0 c1       	rjmp	.+832    	; 0x2f52 <f_read+0x38a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    2c12:	ed 81       	ldd	r30, Y+5	; 0x05
    2c14:	fe 81       	ldd	r31, Y+6	; 0x06
    2c16:	84 81       	ldd	r24, Z+4	; 0x04
    2c18:	88 23       	and	r24, r24
    2c1a:	0c f4       	brge	.+2      	; 0x2c1e <f_read+0x56>
    2c1c:	92 c1       	rjmp	.+804    	; 0x2f42 <f_read+0x37a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    2c1e:	80 ff       	sbrs	r24, 0
    2c20:	94 c1       	rjmp	.+808    	; 0x2f4a <f_read+0x382>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2c22:	82 85       	ldd	r24, Z+10	; 0x0a
    2c24:	93 85       	ldd	r25, Z+11	; 0x0b
    2c26:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c28:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c2a:	46 81       	ldd	r20, Z+6	; 0x06
    2c2c:	57 81       	ldd	r21, Z+7	; 0x07
    2c2e:	60 85       	ldd	r22, Z+8	; 0x08
    2c30:	71 85       	ldd	r23, Z+9	; 0x09
    2c32:	84 1b       	sub	r24, r20
    2c34:	95 0b       	sbc	r25, r21
    2c36:	a6 0b       	sbc	r26, r22
    2c38:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    2c3a:	a6 01       	movw	r20, r12
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	84 17       	cp	r24, r20
    2c42:	95 07       	cpc	r25, r21
    2c44:	a6 07       	cpc	r26, r22
    2c46:	b7 07       	cpc	r27, r23
    2c48:	08 f4       	brcc	.+2      	; 0x2c4c <f_read+0x84>
    2c4a:	6c 01       	movw	r12, r24

	for ( ;  btr;								/* Repeat until all data read */
    2c4c:	c1 14       	cp	r12, r1
    2c4e:	d1 04       	cpc	r13, r1
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <f_read+0x8c>
    2c52:	7f c1       	rjmp	.+766    	; 0x2f52 <f_read+0x38a>
    2c54:	09 83       	std	Y+1, r16	; 0x01
    2c56:	1a 83       	std	Y+2, r17	; 0x02
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2c58:	2d 81       	ldd	r18, Y+5	; 0x05
    2c5a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c5c:	20 5e       	subi	r18, 0xE0	; 224
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	3c 83       	std	Y+4, r19	; 0x04
    2c62:	2b 83       	std	Y+3, r18	; 0x03
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    2c64:	ad 81       	ldd	r26, Y+5	; 0x05
    2c66:	be 81       	ldd	r27, Y+6	; 0x06
    2c68:	16 96       	adiw	r26, 0x06	; 6
    2c6a:	4d 91       	ld	r20, X+
    2c6c:	5d 91       	ld	r21, X+
    2c6e:	6d 91       	ld	r22, X+
    2c70:	7c 91       	ld	r23, X
    2c72:	19 97       	sbiw	r26, 0x09	; 9
    2c74:	db 01       	movw	r26, r22
    2c76:	ca 01       	movw	r24, r20
    2c78:	91 70       	andi	r25, 0x01	; 1
    2c7a:	a0 70       	andi	r26, 0x00	; 0
    2c7c:	b0 70       	andi	r27, 0x00	; 0
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	a1 05       	cpc	r26, r1
    2c82:	b1 05       	cpc	r27, r1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <f_read+0xc0>
    2c86:	1a c1       	rjmp	.+564    	; 0x2ebc <f_read+0x2f4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2c88:	ad 81       	ldd	r26, Y+5	; 0x05
    2c8a:	be 81       	ldd	r27, Y+6	; 0x06
    2c8c:	ed 91       	ld	r30, X+
    2c8e:	fc 91       	ld	r31, X
    2c90:	db 01       	movw	r26, r22
    2c92:	ca 01       	movw	r24, r20
    2c94:	07 2e       	mov	r0, r23
    2c96:	79 e0       	ldi	r23, 0x09	; 9
    2c98:	b6 95       	lsr	r27
    2c9a:	a7 95       	ror	r26
    2c9c:	97 95       	ror	r25
    2c9e:	87 95       	ror	r24
    2ca0:	7a 95       	dec	r23
    2ca2:	d1 f7       	brne	.-12     	; 0x2c98 <f_read+0xd0>
    2ca4:	70 2d       	mov	r23, r0
    2ca6:	12 81       	ldd	r17, Z+2	; 0x02
    2ca8:	11 50       	subi	r17, 0x01	; 1
    2caa:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <f_read+0xe8>
    2cae:	41 c0       	rjmp	.+130    	; 0x2d32 <f_read+0x16a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2cb0:	41 15       	cp	r20, r1
    2cb2:	51 05       	cpc	r21, r1
    2cb4:	61 05       	cpc	r22, r1
    2cb6:	71 05       	cpc	r23, r1
    2cb8:	39 f4       	brne	.+14     	; 0x2cc8 <f_read+0x100>
					clst = fp->sclust;			/* Follow from the origin */
    2cba:	ed 81       	ldd	r30, Y+5	; 0x05
    2cbc:	fe 81       	ldd	r31, Y+6	; 0x06
    2cbe:	86 85       	ldd	r24, Z+14	; 0x0e
    2cc0:	97 85       	ldd	r25, Z+15	; 0x0f
    2cc2:	a0 89       	ldd	r26, Z+16	; 0x10
    2cc4:	b1 89       	ldd	r27, Z+17	; 0x11
    2cc6:	0d c0       	rjmp	.+26     	; 0x2ce2 <f_read+0x11a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2cc8:	ad 81       	ldd	r26, Y+5	; 0x05
    2cca:	be 81       	ldd	r27, Y+6	; 0x06
    2ccc:	52 96       	adiw	r26, 0x12	; 18
    2cce:	4d 91       	ld	r20, X+
    2cd0:	5d 91       	ld	r21, X+
    2cd2:	6d 91       	ld	r22, X+
    2cd4:	7c 91       	ld	r23, X
    2cd6:	55 97       	sbiw	r26, 0x15	; 21
    2cd8:	cf 01       	movw	r24, r30
    2cda:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    2ce2:	82 30       	cpi	r24, 0x02	; 2
    2ce4:	91 05       	cpc	r25, r1
    2ce6:	a1 05       	cpc	r26, r1
    2ce8:	b1 05       	cpc	r27, r1
    2cea:	48 f4       	brcc	.+18     	; 0x2cfe <f_read+0x136>
    2cec:	ed 81       	ldd	r30, Y+5	; 0x05
    2cee:	fe 81       	ldd	r31, Y+6	; 0x06
    2cf0:	84 81       	ldd	r24, Z+4	; 0x04
    2cf2:	80 68       	ori	r24, 0x80	; 128
    2cf4:	84 83       	std	Z+4, r24	; 0x04
    2cf6:	ff 24       	eor	r15, r15
    2cf8:	68 94       	set
    2cfa:	f1 f8       	bld	r15, 1
    2cfc:	2a c1       	rjmp	.+596    	; 0x2f52 <f_read+0x38a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    2d00:	ff ef       	ldi	r31, 0xFF	; 255
    2d02:	9f 07       	cpc	r25, r31
    2d04:	ff ef       	ldi	r31, 0xFF	; 255
    2d06:	af 07       	cpc	r26, r31
    2d08:	ff ef       	ldi	r31, 0xFF	; 255
    2d0a:	bf 07       	cpc	r27, r31
    2d0c:	61 f4       	brne	.+24     	; 0x2d26 <f_read+0x15e>
    2d0e:	ad 81       	ldd	r26, Y+5	; 0x05
    2d10:	be 81       	ldd	r27, Y+6	; 0x06
    2d12:	14 96       	adiw	r26, 0x04	; 4
    2d14:	8c 91       	ld	r24, X
    2d16:	14 97       	sbiw	r26, 0x04	; 4
    2d18:	80 68       	ori	r24, 0x80	; 128
    2d1a:	14 96       	adiw	r26, 0x04	; 4
    2d1c:	8c 93       	st	X, r24
    2d1e:	14 97       	sbiw	r26, 0x04	; 4
    2d20:	ff 24       	eor	r15, r15
    2d22:	f3 94       	inc	r15
    2d24:	16 c1       	rjmp	.+556    	; 0x2f52 <f_read+0x38a>
				fp->clust = clst;				/* Update current cluster */
    2d26:	ed 81       	ldd	r30, Y+5	; 0x05
    2d28:	fe 81       	ldd	r31, Y+6	; 0x06
    2d2a:	82 8b       	std	Z+18, r24	; 0x12
    2d2c:	93 8b       	std	Z+19, r25	; 0x13
    2d2e:	a4 8b       	std	Z+20, r26	; 0x14
    2d30:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2d32:	ad 81       	ldd	r26, Y+5	; 0x05
    2d34:	be 81       	ldd	r27, Y+6	; 0x06
    2d36:	4d 90       	ld	r4, X+
    2d38:	5c 90       	ld	r5, X
    2d3a:	11 97       	sbiw	r26, 0x01	; 1
    2d3c:	52 96       	adiw	r26, 0x12	; 18
    2d3e:	4d 91       	ld	r20, X+
    2d40:	5d 91       	ld	r21, X+
    2d42:	6d 91       	ld	r22, X+
    2d44:	7c 91       	ld	r23, X
    2d46:	55 97       	sbiw	r26, 0x15	; 21
    2d48:	c2 01       	movw	r24, r4
    2d4a:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	a1 05       	cpc	r26, r1
    2d56:	b1 05       	cpc	r27, r1
    2d58:	49 f4       	brne	.+18     	; 0x2d6c <f_read+0x1a4>
    2d5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2d5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2d5e:	84 81       	ldd	r24, Z+4	; 0x04
    2d60:	80 68       	ori	r24, 0x80	; 128
    2d62:	84 83       	std	Z+4, r24	; 0x04
    2d64:	ff 24       	eor	r15, r15
    2d66:	68 94       	set
    2d68:	f1 f8       	bld	r15, 1
    2d6a:	f3 c0       	rjmp	.+486    	; 0x2f52 <f_read+0x38a>
			sect += csect;
    2d6c:	4c 01       	movw	r8, r24
    2d6e:	5d 01       	movw	r10, r26
    2d70:	81 0e       	add	r8, r17
    2d72:	91 1c       	adc	r9, r1
    2d74:	a1 1c       	adc	r10, r1
    2d76:	b1 1c       	adc	r11, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    2d78:	36 01       	movw	r6, r12
    2d7a:	67 2c       	mov	r6, r7
    2d7c:	77 24       	eor	r7, r7
    2d7e:	66 94       	lsr	r6
			if (cc) {							/* Read maximum contiguous sectors directly */
    2d80:	61 14       	cp	r6, r1
    2d82:	71 04       	cpc	r7, r1
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <f_read+0x1c0>
    2d86:	4e c0       	rjmp	.+156    	; 0x2e24 <f_read+0x25c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2d88:	d2 01       	movw	r26, r4
    2d8a:	12 96       	adiw	r26, 0x02	; 2
    2d8c:	4c 91       	ld	r20, X
    2d8e:	12 97       	sbiw	r26, 0x02	; 2
    2d90:	c3 01       	movw	r24, r6
    2d92:	81 0f       	add	r24, r17
    2d94:	91 1d       	adc	r25, r1
    2d96:	24 2f       	mov	r18, r20
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	28 17       	cp	r18, r24
    2d9c:	39 07       	cpc	r19, r25
    2d9e:	20 f4       	brcc	.+8      	; 0x2da8 <f_read+0x1e0>
					cc = fp->fs->csize - csect;
    2da0:	c9 01       	movw	r24, r18
    2da2:	3c 01       	movw	r6, r24
    2da4:	61 1a       	sub	r6, r17
    2da6:	71 08       	sbc	r7, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    2da8:	f2 01       	movw	r30, r4
    2daa:	81 81       	ldd	r24, Z+1	; 0x01
    2dac:	69 81       	ldd	r22, Y+1	; 0x01
    2dae:	7a 81       	ldd	r23, Y+2	; 0x02
    2db0:	a5 01       	movw	r20, r10
    2db2:	94 01       	movw	r18, r8
    2db4:	06 2d       	mov	r16, r6
    2db6:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
    2dba:	88 23       	and	r24, r24
    2dbc:	61 f0       	breq	.+24     	; 0x2dd6 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
    2dbe:	ad 81       	ldd	r26, Y+5	; 0x05
    2dc0:	be 81       	ldd	r27, Y+6	; 0x06
    2dc2:	14 96       	adiw	r26, 0x04	; 4
    2dc4:	8c 91       	ld	r24, X
    2dc6:	14 97       	sbiw	r26, 0x04	; 4
    2dc8:	80 68       	ori	r24, 0x80	; 128
    2dca:	14 96       	adiw	r26, 0x04	; 4
    2dcc:	8c 93       	st	X, r24
    2dce:	14 97       	sbiw	r26, 0x04	; 4
    2dd0:	ff 24       	eor	r15, r15
    2dd2:	f3 94       	inc	r15
    2dd4:	be c0       	rjmp	.+380    	; 0x2f52 <f_read+0x38a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    2dd6:	ed 81       	ldd	r30, Y+5	; 0x05
    2dd8:	fe 81       	ldd	r31, Y+6	; 0x06
    2dda:	84 81       	ldd	r24, Z+4	; 0x04
    2ddc:	86 ff       	sbrs	r24, 6
    2dde:	1d c0       	rjmp	.+58     	; 0x2e1a <f_read+0x252>
    2de0:	86 89       	ldd	r24, Z+22	; 0x16
    2de2:	97 89       	ldd	r25, Z+23	; 0x17
    2de4:	a0 8d       	ldd	r26, Z+24	; 0x18
    2de6:	b1 8d       	ldd	r27, Z+25	; 0x19
    2de8:	88 19       	sub	r24, r8
    2dea:	99 09       	sbc	r25, r9
    2dec:	aa 09       	sbc	r26, r10
    2dee:	bb 09       	sbc	r27, r11
    2df0:	a3 01       	movw	r20, r6
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	84 17       	cp	r24, r20
    2df8:	95 07       	cpc	r25, r21
    2dfa:	a6 07       	cpc	r26, r22
    2dfc:	b7 07       	cpc	r27, r23
    2dfe:	68 f4       	brcc	.+26     	; 0x2e1a <f_read+0x252>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    2e00:	98 2f       	mov	r25, r24
    2e02:	88 27       	eor	r24, r24
    2e04:	99 0f       	add	r25, r25
    2e06:	29 81       	ldd	r18, Y+1	; 0x01
    2e08:	3a 81       	ldd	r19, Y+2	; 0x02
    2e0a:	82 0f       	add	r24, r18
    2e0c:	93 1f       	adc	r25, r19
    2e0e:	6b 81       	ldd	r22, Y+3	; 0x03
    2e10:	7c 81       	ldd	r23, Y+4	; 0x04
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	52 e0       	ldi	r21, 0x02	; 2
    2e16:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    2e1a:	83 01       	movw	r16, r6
    2e1c:	10 2f       	mov	r17, r16
    2e1e:	00 27       	eor	r16, r16
    2e20:	11 0f       	add	r17, r17
				continue;
    2e22:	6a c0       	rjmp	.+212    	; 0x2ef8 <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    2e24:	ad 81       	ldd	r26, Y+5	; 0x05
    2e26:	be 81       	ldd	r27, Y+6	; 0x06
    2e28:	56 96       	adiw	r26, 0x16	; 22
    2e2a:	0d 91       	ld	r16, X+
    2e2c:	1d 91       	ld	r17, X+
    2e2e:	2d 91       	ld	r18, X+
    2e30:	3c 91       	ld	r19, X
    2e32:	59 97       	sbiw	r26, 0x19	; 25
    2e34:	08 15       	cp	r16, r8
    2e36:	19 05       	cpc	r17, r9
    2e38:	2a 05       	cpc	r18, r10
    2e3a:	3b 05       	cpc	r19, r11
    2e3c:	b9 f1       	breq	.+110    	; 0x2eac <f_read+0x2e4>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    2e3e:	14 96       	adiw	r26, 0x04	; 4
    2e40:	8c 91       	ld	r24, X
    2e42:	14 97       	sbiw	r26, 0x04	; 4
    2e44:	86 ff       	sbrs	r24, 6
    2e46:	1c c0       	rjmp	.+56     	; 0x2e80 <f_read+0x2b8>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2e48:	f2 01       	movw	r30, r4
    2e4a:	81 81       	ldd	r24, Z+1	; 0x01
    2e4c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e4e:	7c 81       	ldd	r23, Y+4	; 0x04
    2e50:	a9 01       	movw	r20, r18
    2e52:	98 01       	movw	r18, r16
    2e54:	01 e0       	ldi	r16, 0x01	; 1
    2e56:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
    2e5a:	88 23       	and	r24, r24
    2e5c:	61 f0       	breq	.+24     	; 0x2e76 <f_read+0x2ae>
						ABORT(fp->fs, FR_DISK_ERR);
    2e5e:	ad 81       	ldd	r26, Y+5	; 0x05
    2e60:	be 81       	ldd	r27, Y+6	; 0x06
    2e62:	14 96       	adiw	r26, 0x04	; 4
    2e64:	8c 91       	ld	r24, X
    2e66:	14 97       	sbiw	r26, 0x04	; 4
    2e68:	80 68       	ori	r24, 0x80	; 128
    2e6a:	14 96       	adiw	r26, 0x04	; 4
    2e6c:	8c 93       	st	X, r24
    2e6e:	14 97       	sbiw	r26, 0x04	; 4
    2e70:	ff 24       	eor	r15, r15
    2e72:	f3 94       	inc	r15
    2e74:	6e c0       	rjmp	.+220    	; 0x2f52 <f_read+0x38a>
					fp->flag &= ~FA__DIRTY;
    2e76:	ed 81       	ldd	r30, Y+5	; 0x05
    2e78:	fe 81       	ldd	r31, Y+6	; 0x06
    2e7a:	84 81       	ldd	r24, Z+4	; 0x04
    2e7c:	8f 7b       	andi	r24, 0xBF	; 191
    2e7e:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2e80:	ad 81       	ldd	r26, Y+5	; 0x05
    2e82:	be 81       	ldd	r27, Y+6	; 0x06
    2e84:	ed 91       	ld	r30, X+
    2e86:	fc 91       	ld	r31, X
    2e88:	81 81       	ldd	r24, Z+1	; 0x01
    2e8a:	6b 81       	ldd	r22, Y+3	; 0x03
    2e8c:	7c 81       	ldd	r23, Y+4	; 0x04
    2e8e:	a5 01       	movw	r20, r10
    2e90:	94 01       	movw	r18, r8
    2e92:	01 e0       	ldi	r16, 0x01	; 1
    2e94:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
    2e98:	88 23       	and	r24, r24
    2e9a:	41 f0       	breq	.+16     	; 0x2eac <f_read+0x2e4>
					ABORT(fp->fs, FR_DISK_ERR);
    2e9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2ea0:	84 81       	ldd	r24, Z+4	; 0x04
    2ea2:	80 68       	ori	r24, 0x80	; 128
    2ea4:	84 83       	std	Z+4, r24	; 0x04
    2ea6:	ff 24       	eor	r15, r15
    2ea8:	f3 94       	inc	r15
    2eaa:	53 c0       	rjmp	.+166    	; 0x2f52 <f_read+0x38a>
			}
#endif
			fp->dsect = sect;
    2eac:	ad 81       	ldd	r26, Y+5	; 0x05
    2eae:	be 81       	ldd	r27, Y+6	; 0x06
    2eb0:	56 96       	adiw	r26, 0x16	; 22
    2eb2:	8d 92       	st	X+, r8
    2eb4:	9d 92       	st	X+, r9
    2eb6:	ad 92       	st	X+, r10
    2eb8:	bc 92       	st	X, r11
    2eba:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2ebc:	ed 81       	ldd	r30, Y+5	; 0x05
    2ebe:	fe 81       	ldd	r31, Y+6	; 0x06
    2ec0:	46 81       	ldd	r20, Z+6	; 0x06
    2ec2:	57 81       	ldd	r21, Z+7	; 0x07
    2ec4:	60 85       	ldd	r22, Z+8	; 0x08
    2ec6:	71 85       	ldd	r23, Z+9	; 0x09
    2ec8:	ca 01       	movw	r24, r20
    2eca:	91 70       	andi	r25, 0x01	; 1
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	32 e0       	ldi	r19, 0x02	; 2
    2ed0:	28 1b       	sub	r18, r24
    2ed2:	39 0b       	sbc	r19, r25
    2ed4:	86 01       	movw	r16, r12
    2ed6:	2c 15       	cp	r18, r12
    2ed8:	3d 05       	cpc	r19, r13
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <f_read+0x316>
    2edc:	89 01       	movw	r16, r18
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2ede:	ba 01       	movw	r22, r20
    2ee0:	71 70       	andi	r23, 0x01	; 1
    2ee2:	60 5e       	subi	r22, 0xE0	; 224
    2ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	68 0f       	add	r22, r24
    2eec:	79 1f       	adc	r23, r25
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef2:	a8 01       	movw	r20, r16
    2ef4:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2ef8:	a9 81       	ldd	r26, Y+1	; 0x01
    2efa:	ba 81       	ldd	r27, Y+2	; 0x02
    2efc:	a0 0f       	add	r26, r16
    2efe:	b1 1f       	adc	r27, r17
    2f00:	ba 83       	std	Y+2, r27	; 0x02
    2f02:	a9 83       	std	Y+1, r26	; 0x01
    2f04:	a8 01       	movw	r20, r16
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	70 e0       	ldi	r23, 0x00	; 0
    2f0a:	ed 81       	ldd	r30, Y+5	; 0x05
    2f0c:	fe 81       	ldd	r31, Y+6	; 0x06
    2f0e:	86 81       	ldd	r24, Z+6	; 0x06
    2f10:	97 81       	ldd	r25, Z+7	; 0x07
    2f12:	a0 85       	ldd	r26, Z+8	; 0x08
    2f14:	b1 85       	ldd	r27, Z+9	; 0x09
    2f16:	84 0f       	add	r24, r20
    2f18:	95 1f       	adc	r25, r21
    2f1a:	a6 1f       	adc	r26, r22
    2f1c:	b7 1f       	adc	r27, r23
    2f1e:	86 83       	std	Z+6, r24	; 0x06
    2f20:	97 83       	std	Z+7, r25	; 0x07
    2f22:	a0 87       	std	Z+8, r26	; 0x08
    2f24:	b1 87       	std	Z+9, r27	; 0x09
    2f26:	d1 01       	movw	r26, r2
    2f28:	8d 91       	ld	r24, X+
    2f2a:	9c 91       	ld	r25, X
    2f2c:	11 97       	sbiw	r26, 0x01	; 1
    2f2e:	80 0f       	add	r24, r16
    2f30:	91 1f       	adc	r25, r17
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	9c 93       	st	X, r25
    2f36:	8e 93       	st	-X, r24
    2f38:	c0 1a       	sub	r12, r16
    2f3a:	d1 0a       	sbc	r13, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <f_read+0x378>
    2f3e:	92 ce       	rjmp	.-732    	; 0x2c64 <f_read+0x9c>
    2f40:	08 c0       	rjmp	.+16     	; 0x2f52 <f_read+0x38a>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2f42:	ff 24       	eor	r15, r15
    2f44:	68 94       	set
    2f46:	f1 f8       	bld	r15, 1
    2f48:	04 c0       	rjmp	.+8      	; 0x2f52 <f_read+0x38a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2f4a:	0f 2e       	mov	r0, r31
    2f4c:	f7 e0       	ldi	r31, 0x07	; 7
    2f4e:	ff 2e       	mov	r15, r31
    2f50:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2f52:	8f 2d       	mov	r24, r15
    2f54:	26 96       	adiw	r28, 0x06	; 6
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	ff 90       	pop	r15
    2f6a:	df 90       	pop	r13
    2f6c:	cf 90       	pop	r12
    2f6e:	bf 90       	pop	r11
    2f70:	af 90       	pop	r10
    2f72:	9f 90       	pop	r9
    2f74:	8f 90       	pop	r8
    2f76:	7f 90       	pop	r7
    2f78:	6f 90       	pop	r6
    2f7a:	5f 90       	pop	r5
    2f7c:	4f 90       	pop	r4
    2f7e:	3f 90       	pop	r3
    2f80:	2f 90       	pop	r2
    2f82:	08 95       	ret

00002f84 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2f84:	2f 92       	push	r2
    2f86:	3f 92       	push	r3
    2f88:	4f 92       	push	r4
    2f8a:	5f 92       	push	r5
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	af 92       	push	r10
    2f96:	bf 92       	push	r11
    2f98:	cf 92       	push	r12
    2f9a:	df 92       	push	r13
    2f9c:	ef 92       	push	r14
    2f9e:	ff 92       	push	r15
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <f_write+0x26>
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <f_write+0x28>
    2fac:	0f 92       	push	r0
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	7c 01       	movw	r14, r24
    2fb4:	86 2e       	mov	r8, r22
    2fb6:	67 2e       	mov	r6, r23
    2fb8:	6a 01       	movw	r12, r20
    2fba:	29 01       	movw	r4, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2fbc:	d9 01       	movw	r26, r18
    2fbe:	1d 92       	st	X+, r1
    2fc0:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    2fc2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <validate>
    2fc6:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2fc8:	88 23       	and	r24, r24
    2fca:	09 f0       	breq	.+2      	; 0x2fce <f_write+0x4a>
    2fcc:	c6 c1       	rjmp	.+908    	; 0x335a <f_write+0x3d6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2fce:	f7 01       	movw	r30, r14
    2fd0:	84 81       	ldd	r24, Z+4	; 0x04
    2fd2:	88 23       	and	r24, r24
    2fd4:	0c f4       	brge	.+2      	; 0x2fd8 <f_write+0x54>
    2fd6:	be c1       	rjmp	.+892    	; 0x3354 <f_write+0x3d0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2fd8:	81 ff       	sbrs	r24, 1
    2fda:	be c1       	rjmp	.+892    	; 0x3358 <f_write+0x3d4>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2fdc:	42 85       	ldd	r20, Z+10	; 0x0a
    2fde:	53 85       	ldd	r21, Z+11	; 0x0b
    2fe0:	64 85       	ldd	r22, Z+12	; 0x0c
    2fe2:	75 85       	ldd	r23, Z+13	; 0x0d
    2fe4:	c6 01       	movw	r24, r12
    2fe6:	a0 e0       	ldi	r26, 0x00	; 0
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	84 0f       	add	r24, r20
    2fec:	95 1f       	adc	r25, r21
    2fee:	a6 1f       	adc	r26, r22
    2ff0:	b7 1f       	adc	r27, r23
    2ff2:	84 17       	cp	r24, r20
    2ff4:	95 07       	cpc	r25, r21
    2ff6:	a6 07       	cpc	r26, r22
    2ff8:	b7 07       	cpc	r27, r23
    2ffa:	08 f4       	brcc	.+2      	; 0x2ffe <f_write+0x7a>
    2ffc:	90 c1       	rjmp	.+800    	; 0x331e <f_write+0x39a>

	for ( ;  btw;							/* Repeat until all data written */
    2ffe:	c1 14       	cp	r12, r1
    3000:	d1 04       	cpc	r13, r1
    3002:	09 f4       	brne	.+2      	; 0x3006 <f_write+0x82>
    3004:	8c c1       	rjmp	.+792    	; 0x331e <f_write+0x39a>
    3006:	89 82       	std	Y+1, r8	; 0x01
    3008:	6a 82       	std	Y+2, r6	; 0x02
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    300a:	97 01       	movw	r18, r14
    300c:	20 5e       	subi	r18, 0xE0	; 224
    300e:	3f 4f       	sbci	r19, 0xFF	; 255
    3010:	3c 83       	std	Y+4, r19	; 0x04
    3012:	2b 83       	std	Y+3, r18	; 0x03
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3014:	d7 01       	movw	r26, r14
    3016:	16 96       	adiw	r26, 0x06	; 6
    3018:	4d 91       	ld	r20, X+
    301a:	5d 91       	ld	r21, X+
    301c:	6d 91       	ld	r22, X+
    301e:	7c 91       	ld	r23, X
    3020:	19 97       	sbiw	r26, 0x09	; 9
    3022:	db 01       	movw	r26, r22
    3024:	ca 01       	movw	r24, r20
    3026:	91 70       	andi	r25, 0x01	; 1
    3028:	a0 70       	andi	r26, 0x00	; 0
    302a:	b0 70       	andi	r27, 0x00	; 0
    302c:	00 97       	sbiw	r24, 0x00	; 0
    302e:	a1 05       	cpc	r26, r1
    3030:	b1 05       	cpc	r27, r1
    3032:	09 f0       	breq	.+2      	; 0x3036 <f_write+0xb2>
    3034:	30 c1       	rjmp	.+608    	; 0x3296 <f_write+0x312>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3036:	f7 01       	movw	r30, r14
    3038:	20 81       	ld	r18, Z
    303a:	31 81       	ldd	r19, Z+1	; 0x01
    303c:	db 01       	movw	r26, r22
    303e:	ca 01       	movw	r24, r20
    3040:	07 2e       	mov	r0, r23
    3042:	79 e0       	ldi	r23, 0x09	; 9
    3044:	b6 95       	lsr	r27
    3046:	a7 95       	ror	r26
    3048:	97 95       	ror	r25
    304a:	87 95       	ror	r24
    304c:	7a 95       	dec	r23
    304e:	d1 f7       	brne	.-12     	; 0x3044 <f_write+0xc0>
    3050:	70 2d       	mov	r23, r0
    3052:	f9 01       	movw	r30, r18
    3054:	82 80       	ldd	r8, Z+2	; 0x02
    3056:	e8 2d       	mov	r30, r8
    3058:	e1 50       	subi	r30, 0x01	; 1
    305a:	e8 23       	and	r30, r24
    305c:	ed 83       	std	Y+5, r30	; 0x05
			if (!csect) {					/* On the cluster boundary? */
    305e:	ee 23       	and	r30, r30
    3060:	09 f0       	breq	.+2      	; 0x3064 <f_write+0xe0>
    3062:	4f c0       	rjmp	.+158    	; 0x3102 <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3064:	41 15       	cp	r20, r1
    3066:	51 05       	cpc	r21, r1
    3068:	61 05       	cpc	r22, r1
    306a:	71 05       	cpc	r23, r1
    306c:	b9 f4       	brne	.+46     	; 0x309c <f_write+0x118>
					clst = fp->sclust;		/* Follow from the origin */
    306e:	f7 01       	movw	r30, r14
    3070:	86 85       	ldd	r24, Z+14	; 0x0e
    3072:	97 85       	ldd	r25, Z+15	; 0x0f
    3074:	a0 89       	ldd	r26, Z+16	; 0x10
    3076:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	a1 05       	cpc	r26, r1
    307c:	b1 05       	cpc	r27, r1
    307e:	f9 f4       	brne	.+62     	; 0x30be <f_write+0x13a>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3080:	c9 01       	movw	r24, r18
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	ba 01       	movw	r22, r20
    3088:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <create_chain>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	f7 01       	movw	r30, r14
    3092:	86 87       	std	Z+14, r24	; 0x0e
    3094:	97 87       	std	Z+15, r25	; 0x0f
    3096:	a0 8b       	std	Z+16, r26	; 0x10
    3098:	b1 8b       	std	Z+17, r27	; 0x11
    309a:	0c c0       	rjmp	.+24     	; 0x30b4 <f_write+0x130>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    309c:	d7 01       	movw	r26, r14
    309e:	52 96       	adiw	r26, 0x12	; 18
    30a0:	4d 91       	ld	r20, X+
    30a2:	5d 91       	ld	r21, X+
    30a4:	6d 91       	ld	r22, X+
    30a6:	7c 91       	ld	r23, X
    30a8:	55 97       	sbiw	r26, 0x15	; 21
    30aa:	c9 01       	movw	r24, r18
    30ac:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <create_chain>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	a1 05       	cpc	r26, r1
    30b8:	b1 05       	cpc	r27, r1
    30ba:	09 f4       	brne	.+2      	; 0x30be <f_write+0x13a>
    30bc:	30 c1       	rjmp	.+608    	; 0x331e <f_write+0x39a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    30be:	81 30       	cpi	r24, 0x01	; 1
    30c0:	91 05       	cpc	r25, r1
    30c2:	a1 05       	cpc	r26, r1
    30c4:	b1 05       	cpc	r27, r1
    30c6:	31 f4       	brne	.+12     	; 0x30d4 <f_write+0x150>
    30c8:	f7 01       	movw	r30, r14
    30ca:	84 81       	ldd	r24, Z+4	; 0x04
    30cc:	80 68       	ori	r24, 0x80	; 128
    30ce:	84 83       	std	Z+4, r24	; 0x04
    30d0:	12 e0       	ldi	r17, 0x02	; 2
    30d2:	43 c1       	rjmp	.+646    	; 0x335a <f_write+0x3d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    30d4:	8f 3f       	cpi	r24, 0xFF	; 255
    30d6:	ff ef       	ldi	r31, 0xFF	; 255
    30d8:	9f 07       	cpc	r25, r31
    30da:	ff ef       	ldi	r31, 0xFF	; 255
    30dc:	af 07       	cpc	r26, r31
    30de:	ff ef       	ldi	r31, 0xFF	; 255
    30e0:	bf 07       	cpc	r27, r31
    30e2:	51 f4       	brne	.+20     	; 0x30f8 <f_write+0x174>
    30e4:	d7 01       	movw	r26, r14
    30e6:	14 96       	adiw	r26, 0x04	; 4
    30e8:	8c 91       	ld	r24, X
    30ea:	14 97       	sbiw	r26, 0x04	; 4
    30ec:	80 68       	ori	r24, 0x80	; 128
    30ee:	14 96       	adiw	r26, 0x04	; 4
    30f0:	8c 93       	st	X, r24
    30f2:	14 97       	sbiw	r26, 0x04	; 4
    30f4:	11 e0       	ldi	r17, 0x01	; 1
    30f6:	31 c1       	rjmp	.+610    	; 0x335a <f_write+0x3d6>
				fp->clust = clst;			/* Update current cluster */
    30f8:	f7 01       	movw	r30, r14
    30fa:	82 8b       	std	Z+18, r24	; 0x12
    30fc:	93 8b       	std	Z+19, r25	; 0x13
    30fe:	a4 8b       	std	Z+20, r26	; 0x14
    3100:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    3102:	d7 01       	movw	r26, r14
    3104:	14 96       	adiw	r26, 0x04	; 4
    3106:	8c 91       	ld	r24, X
    3108:	14 97       	sbiw	r26, 0x04	; 4
    310a:	86 ff       	sbrs	r24, 6
    310c:	1e c0       	rjmp	.+60     	; 0x314a <f_write+0x1c6>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    310e:	ed 91       	ld	r30, X+
    3110:	fc 91       	ld	r31, X
    3112:	11 97       	sbiw	r26, 0x01	; 1
    3114:	56 96       	adiw	r26, 0x16	; 22
    3116:	2d 91       	ld	r18, X+
    3118:	3d 91       	ld	r19, X+
    311a:	4d 91       	ld	r20, X+
    311c:	5c 91       	ld	r21, X
    311e:	59 97       	sbiw	r26, 0x19	; 25
    3120:	81 81       	ldd	r24, Z+1	; 0x01
    3122:	6b 81       	ldd	r22, Y+3	; 0x03
    3124:	7c 81       	ldd	r23, Y+4	; 0x04
    3126:	01 e0       	ldi	r16, 0x01	; 1
    3128:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
    312c:	88 23       	and	r24, r24
    312e:	31 f0       	breq	.+12     	; 0x313c <f_write+0x1b8>
					ABORT(fp->fs, FR_DISK_ERR);
    3130:	f7 01       	movw	r30, r14
    3132:	84 81       	ldd	r24, Z+4	; 0x04
    3134:	80 68       	ori	r24, 0x80	; 128
    3136:	84 83       	std	Z+4, r24	; 0x04
    3138:	11 e0       	ldi	r17, 0x01	; 1
    313a:	0f c1       	rjmp	.+542    	; 0x335a <f_write+0x3d6>
				fp->flag &= ~FA__DIRTY;
    313c:	d7 01       	movw	r26, r14
    313e:	14 96       	adiw	r26, 0x04	; 4
    3140:	8c 91       	ld	r24, X
    3142:	14 97       	sbiw	r26, 0x04	; 4
    3144:	8f 7b       	andi	r24, 0xBF	; 191
    3146:	14 96       	adiw	r26, 0x04	; 4
    3148:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    314a:	f7 01       	movw	r30, r14
    314c:	20 80       	ld	r2, Z
    314e:	31 80       	ldd	r3, Z+1	; 0x01
    3150:	42 89       	ldd	r20, Z+18	; 0x12
    3152:	53 89       	ldd	r21, Z+19	; 0x13
    3154:	64 89       	ldd	r22, Z+20	; 0x14
    3156:	75 89       	ldd	r23, Z+21	; 0x15
    3158:	c1 01       	movw	r24, r2
    315a:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	a1 05       	cpc	r26, r1
    3166:	b1 05       	cpc	r27, r1
    3168:	51 f4       	brne	.+20     	; 0x317e <f_write+0x1fa>
    316a:	d7 01       	movw	r26, r14
    316c:	14 96       	adiw	r26, 0x04	; 4
    316e:	8c 91       	ld	r24, X
    3170:	14 97       	sbiw	r26, 0x04	; 4
    3172:	80 68       	ori	r24, 0x80	; 128
    3174:	14 96       	adiw	r26, 0x04	; 4
    3176:	8c 93       	st	X, r24
    3178:	14 97       	sbiw	r26, 0x04	; 4
    317a:	12 e0       	ldi	r17, 0x02	; 2
    317c:	ee c0       	rjmp	.+476    	; 0x335a <f_write+0x3d6>
			sect += csect;
    317e:	4c 01       	movw	r8, r24
    3180:	5d 01       	movw	r10, r26
    3182:	ed 81       	ldd	r30, Y+5	; 0x05
    3184:	8e 0e       	add	r8, r30
    3186:	91 1c       	adc	r9, r1
    3188:	a1 1c       	adc	r10, r1
    318a:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    318c:	36 01       	movw	r6, r12
    318e:	67 2c       	mov	r6, r7
    3190:	77 24       	eor	r7, r7
    3192:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    3194:	61 14       	cp	r6, r1
    3196:	71 04       	cpc	r7, r1
    3198:	09 f4       	brne	.+2      	; 0x319c <f_write+0x218>
    319a:	4d c0       	rjmp	.+154    	; 0x3236 <f_write+0x2b2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    319c:	d1 01       	movw	r26, r2
    319e:	12 96       	adiw	r26, 0x02	; 2
    31a0:	4c 91       	ld	r20, X
    31a2:	12 97       	sbiw	r26, 0x02	; 2
    31a4:	c3 01       	movw	r24, r6
    31a6:	8e 0f       	add	r24, r30
    31a8:	91 1d       	adc	r25, r1
    31aa:	24 2f       	mov	r18, r20
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	28 17       	cp	r18, r24
    31b0:	39 07       	cpc	r19, r25
    31b2:	20 f4       	brcc	.+8      	; 0x31bc <f_write+0x238>
					cc = fp->fs->csize - csect;
    31b4:	c9 01       	movw	r24, r18
    31b6:	3c 01       	movw	r6, r24
    31b8:	6e 1a       	sub	r6, r30
    31ba:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    31bc:	d1 01       	movw	r26, r2
    31be:	11 96       	adiw	r26, 0x01	; 1
    31c0:	8c 91       	ld	r24, X
    31c2:	69 81       	ldd	r22, Y+1	; 0x01
    31c4:	7a 81       	ldd	r23, Y+2	; 0x02
    31c6:	a5 01       	movw	r20, r10
    31c8:	94 01       	movw	r18, r8
    31ca:	06 2d       	mov	r16, r6
    31cc:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
    31d0:	88 23       	and	r24, r24
    31d2:	31 f0       	breq	.+12     	; 0x31e0 <f_write+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
    31d4:	f7 01       	movw	r30, r14
    31d6:	84 81       	ldd	r24, Z+4	; 0x04
    31d8:	80 68       	ori	r24, 0x80	; 128
    31da:	84 83       	std	Z+4, r24	; 0x04
    31dc:	11 e0       	ldi	r17, 0x01	; 1
    31de:	bd c0       	rjmp	.+378    	; 0x335a <f_write+0x3d6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    31e0:	f7 01       	movw	r30, r14
    31e2:	86 89       	ldd	r24, Z+22	; 0x16
    31e4:	97 89       	ldd	r25, Z+23	; 0x17
    31e6:	a0 8d       	ldd	r26, Z+24	; 0x18
    31e8:	b1 8d       	ldd	r27, Z+25	; 0x19
    31ea:	88 19       	sub	r24, r8
    31ec:	99 09       	sbc	r25, r9
    31ee:	aa 09       	sbc	r26, r10
    31f0:	bb 09       	sbc	r27, r11
    31f2:	a3 01       	movw	r20, r6
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	84 17       	cp	r24, r20
    31fa:	95 07       	cpc	r25, r21
    31fc:	a6 07       	cpc	r26, r22
    31fe:	b7 07       	cpc	r27, r23
    3200:	b0 f4       	brcc	.+44     	; 0x322e <f_write+0x2aa>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    3202:	bc 01       	movw	r22, r24
    3204:	76 2f       	mov	r23, r22
    3206:	66 27       	eor	r22, r22
    3208:	77 0f       	add	r23, r23
    320a:	29 81       	ldd	r18, Y+1	; 0x01
    320c:	3a 81       	ldd	r19, Y+2	; 0x02
    320e:	62 0f       	add	r22, r18
    3210:	73 1f       	adc	r23, r19
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	52 e0       	ldi	r21, 0x02	; 2
    321a:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    321e:	d7 01       	movw	r26, r14
    3220:	14 96       	adiw	r26, 0x04	; 4
    3222:	8c 91       	ld	r24, X
    3224:	14 97       	sbiw	r26, 0x04	; 4
    3226:	8f 7b       	andi	r24, 0xBF	; 191
    3228:	14 96       	adiw	r26, 0x04	; 4
    322a:	8c 93       	st	X, r24
    322c:	14 97       	sbiw	r26, 0x04	; 4
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    322e:	76 2c       	mov	r7, r6
    3230:	66 24       	eor	r6, r6
    3232:	77 0c       	add	r7, r7
				continue;
    3234:	51 c0       	rjmp	.+162    	; 0x32d8 <f_write+0x354>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    3236:	f7 01       	movw	r30, r14
    3238:	86 89       	ldd	r24, Z+22	; 0x16
    323a:	97 89       	ldd	r25, Z+23	; 0x17
    323c:	a0 8d       	ldd	r26, Z+24	; 0x18
    323e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3240:	88 15       	cp	r24, r8
    3242:	99 05       	cpc	r25, r9
    3244:	aa 05       	cpc	r26, r10
    3246:	bb 05       	cpc	r27, r11
    3248:	f9 f0       	breq	.+62     	; 0x3288 <f_write+0x304>
				if (fp->fptr < fp->fsize &&
    324a:	86 81       	ldd	r24, Z+6	; 0x06
    324c:	97 81       	ldd	r25, Z+7	; 0x07
    324e:	a0 85       	ldd	r26, Z+8	; 0x08
    3250:	b1 85       	ldd	r27, Z+9	; 0x09
    3252:	42 85       	ldd	r20, Z+10	; 0x0a
    3254:	53 85       	ldd	r21, Z+11	; 0x0b
    3256:	64 85       	ldd	r22, Z+12	; 0x0c
    3258:	75 85       	ldd	r23, Z+13	; 0x0d
    325a:	84 17       	cp	r24, r20
    325c:	95 07       	cpc	r25, r21
    325e:	a6 07       	cpc	r26, r22
    3260:	b7 07       	cpc	r27, r23
    3262:	90 f4       	brcc	.+36     	; 0x3288 <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3264:	d1 01       	movw	r26, r2
    3266:	11 96       	adiw	r26, 0x01	; 1
    3268:	8c 91       	ld	r24, X
    326a:	6b 81       	ldd	r22, Y+3	; 0x03
    326c:	7c 81       	ldd	r23, Y+4	; 0x04
    326e:	a5 01       	movw	r20, r10
    3270:	94 01       	movw	r18, r8
    3272:	01 e0       	ldi	r16, 0x01	; 1
    3274:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    3278:	88 23       	and	r24, r24
    327a:	31 f0       	breq	.+12     	; 0x3288 <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    327c:	f7 01       	movw	r30, r14
    327e:	84 81       	ldd	r24, Z+4	; 0x04
    3280:	80 68       	ori	r24, 0x80	; 128
    3282:	84 83       	std	Z+4, r24	; 0x04
    3284:	11 e0       	ldi	r17, 0x01	; 1
    3286:	69 c0       	rjmp	.+210    	; 0x335a <f_write+0x3d6>
			}
#endif
			fp->dsect = sect;
    3288:	d7 01       	movw	r26, r14
    328a:	56 96       	adiw	r26, 0x16	; 22
    328c:	8d 92       	st	X+, r8
    328e:	9d 92       	st	X+, r9
    3290:	ad 92       	st	X+, r10
    3292:	bc 92       	st	X, r11
    3294:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3296:	f7 01       	movw	r30, r14
    3298:	46 81       	ldd	r20, Z+6	; 0x06
    329a:	57 81       	ldd	r21, Z+7	; 0x07
    329c:	60 85       	ldd	r22, Z+8	; 0x08
    329e:	71 85       	ldd	r23, Z+9	; 0x09
    32a0:	ca 01       	movw	r24, r20
    32a2:	91 70       	andi	r25, 0x01	; 1
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	32 e0       	ldi	r19, 0x02	; 2
    32a8:	28 1b       	sub	r18, r24
    32aa:	39 0b       	sbc	r19, r25
    32ac:	36 01       	movw	r6, r12
    32ae:	2c 15       	cp	r18, r12
    32b0:	3d 05       	cpc	r19, r13
    32b2:	08 f4       	brcc	.+2      	; 0x32b6 <f_write+0x332>
    32b4:	39 01       	movw	r6, r18
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    32b6:	ca 01       	movw	r24, r20
    32b8:	91 70       	andi	r25, 0x01	; 1
    32ba:	80 96       	adiw	r24, 0x20	; 32
    32bc:	8e 0d       	add	r24, r14
    32be:	9f 1d       	adc	r25, r15
    32c0:	69 81       	ldd	r22, Y+1	; 0x01
    32c2:	7a 81       	ldd	r23, Y+2	; 0x02
    32c4:	a3 01       	movw	r20, r6
    32c6:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
		fp->flag |= FA__DIRTY;
    32ca:	d7 01       	movw	r26, r14
    32cc:	14 96       	adiw	r26, 0x04	; 4
    32ce:	8c 91       	ld	r24, X
    32d0:	14 97       	sbiw	r26, 0x04	; 4
    32d2:	80 64       	ori	r24, 0x40	; 64
    32d4:	14 96       	adiw	r26, 0x04	; 4
    32d6:	8c 93       	st	X, r24
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    32d8:	e9 81       	ldd	r30, Y+1	; 0x01
    32da:	fa 81       	ldd	r31, Y+2	; 0x02
    32dc:	e6 0d       	add	r30, r6
    32de:	f7 1d       	adc	r31, r7
    32e0:	fa 83       	std	Y+2, r31	; 0x02
    32e2:	e9 83       	std	Y+1, r30	; 0x01
    32e4:	a3 01       	movw	r20, r6
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	f7 01       	movw	r30, r14
    32ec:	86 81       	ldd	r24, Z+6	; 0x06
    32ee:	97 81       	ldd	r25, Z+7	; 0x07
    32f0:	a0 85       	ldd	r26, Z+8	; 0x08
    32f2:	b1 85       	ldd	r27, Z+9	; 0x09
    32f4:	84 0f       	add	r24, r20
    32f6:	95 1f       	adc	r25, r21
    32f8:	a6 1f       	adc	r26, r22
    32fa:	b7 1f       	adc	r27, r23
    32fc:	86 83       	std	Z+6, r24	; 0x06
    32fe:	97 83       	std	Z+7, r25	; 0x07
    3300:	a0 87       	std	Z+8, r26	; 0x08
    3302:	b1 87       	std	Z+9, r27	; 0x09
    3304:	d2 01       	movw	r26, r4
    3306:	8d 91       	ld	r24, X+
    3308:	9c 91       	ld	r25, X
    330a:	11 97       	sbiw	r26, 0x01	; 1
    330c:	86 0d       	add	r24, r6
    330e:	97 1d       	adc	r25, r7
    3310:	11 96       	adiw	r26, 0x01	; 1
    3312:	9c 93       	st	X, r25
    3314:	8e 93       	st	-X, r24
    3316:	c6 18       	sub	r12, r6
    3318:	d7 08       	sbc	r13, r7
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    331a:	09 f0       	breq	.+2      	; 0x331e <f_write+0x39a>
    331c:	7b ce       	rjmp	.-778    	; 0x3014 <f_write+0x90>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    331e:	f7 01       	movw	r30, r14
    3320:	86 81       	ldd	r24, Z+6	; 0x06
    3322:	97 81       	ldd	r25, Z+7	; 0x07
    3324:	a0 85       	ldd	r26, Z+8	; 0x08
    3326:	b1 85       	ldd	r27, Z+9	; 0x09
    3328:	42 85       	ldd	r20, Z+10	; 0x0a
    332a:	53 85       	ldd	r21, Z+11	; 0x0b
    332c:	64 85       	ldd	r22, Z+12	; 0x0c
    332e:	75 85       	ldd	r23, Z+13	; 0x0d
    3330:	48 17       	cp	r20, r24
    3332:	59 07       	cpc	r21, r25
    3334:	6a 07       	cpc	r22, r26
    3336:	7b 07       	cpc	r23, r27
    3338:	20 f4       	brcc	.+8      	; 0x3342 <f_write+0x3be>
    333a:	82 87       	std	Z+10, r24	; 0x0a
    333c:	93 87       	std	Z+11, r25	; 0x0b
    333e:	a4 87       	std	Z+12, r26	; 0x0c
    3340:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3342:	d7 01       	movw	r26, r14
    3344:	14 96       	adiw	r26, 0x04	; 4
    3346:	8c 91       	ld	r24, X
    3348:	14 97       	sbiw	r26, 0x04	; 4
    334a:	80 62       	ori	r24, 0x20	; 32
    334c:	14 96       	adiw	r26, 0x04	; 4
    334e:	8c 93       	st	X, r24
    3350:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    3352:	03 c0       	rjmp	.+6      	; 0x335a <f_write+0x3d6>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3354:	12 e0       	ldi	r17, 0x02	; 2
    3356:	01 c0       	rjmp	.+2      	; 0x335a <f_write+0x3d6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    3358:	17 e0       	ldi	r17, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    335a:	81 2f       	mov	r24, r17
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	bf 90       	pop	r11
    3378:	af 90       	pop	r10
    337a:	9f 90       	pop	r9
    337c:	8f 90       	pop	r8
    337e:	7f 90       	pop	r7
    3380:	6f 90       	pop	r6
    3382:	5f 90       	pop	r5
    3384:	4f 90       	pop	r4
    3386:	3f 90       	pop	r3
    3388:	2f 90       	pop	r2
    338a:	08 95       	ret

0000338c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3396:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <validate>
	if (res == FR_OK) {
    339a:	88 23       	and	r24, r24
    339c:	09 f0       	breq	.+2      	; 0x33a0 <f_sync+0x14>
    339e:	4c c0       	rjmp	.+152    	; 0x3438 <f_sync+0xac>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    33a0:	9c 81       	ldd	r25, Y+4	; 0x04
    33a2:	95 ff       	sbrs	r25, 5
    33a4:	49 c0       	rjmp	.+146    	; 0x3438 <f_sync+0xac>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    33a6:	96 ff       	sbrs	r25, 6
    33a8:	12 c0       	rjmp	.+36     	; 0x33ce <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    33aa:	e8 81       	ld	r30, Y
    33ac:	f9 81       	ldd	r31, Y+1	; 0x01
    33ae:	be 01       	movw	r22, r28
    33b0:	60 5e       	subi	r22, 0xE0	; 224
    33b2:	7f 4f       	sbci	r23, 0xFF	; 255
    33b4:	2e 89       	ldd	r18, Y+22	; 0x16
    33b6:	3f 89       	ldd	r19, Y+23	; 0x17
    33b8:	48 8d       	ldd	r20, Y+24	; 0x18
    33ba:	59 8d       	ldd	r21, Y+25	; 0x19
    33bc:	81 81       	ldd	r24, Z+1	; 0x01
    33be:	01 e0       	ldi	r16, 0x01	; 1
    33c0:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
    33c4:	88 23       	and	r24, r24
    33c6:	b9 f5       	brne	.+110    	; 0x3436 <f_sync+0xaa>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    33c8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ca:	8f 7b       	andi	r24, 0xBF	; 191
    33cc:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    33ce:	4a 8d       	ldd	r20, Y+26	; 0x1a
    33d0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    33d2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    33d4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    33d6:	88 81       	ld	r24, Y
    33d8:	99 81       	ldd	r25, Y+1	; 0x01
    33da:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
			if (res == FR_OK) {
    33de:	88 23       	and	r24, r24
    33e0:	59 f5       	brne	.+86     	; 0x3438 <f_sync+0xac>
				dir = fp->dir_ptr;
    33e2:	0e 8d       	ldd	r16, Y+30	; 0x1e
    33e4:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    33e6:	f8 01       	movw	r30, r16
    33e8:	83 85       	ldd	r24, Z+11	; 0x0b
    33ea:	80 62       	ori	r24, 0x20	; 32
    33ec:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    33ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    33f0:	84 8f       	std	Z+28, r24	; 0x1c
    33f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f4:	85 8f       	std	Z+29, r24	; 0x1d
    33f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    33f8:	86 8f       	std	Z+30, r24	; 0x1e
    33fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fc:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    33fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    3400:	5f 85       	ldd	r21, Y+15	; 0x0f
    3402:	68 89       	ldd	r22, Y+16	; 0x10
    3404:	79 89       	ldd	r23, Y+17	; 0x11
    3406:	c8 01       	movw	r24, r16
    3408:	0e 94 4e 05 	call	0xa9c	; 0xa9c <st_clust>
				tim = get_fattime();						/* Update updated time */
    340c:	0e 94 29 0c 	call	0x1852	; 0x1852 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    3410:	f8 01       	movw	r30, r16
    3412:	66 8b       	std	Z+22, r22	; 0x16
    3414:	77 8b       	std	Z+23, r23	; 0x17
    3416:	80 8f       	std	Z+24, r24	; 0x18
    3418:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    341a:	12 8a       	std	Z+18, r1	; 0x12
    341c:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
    3420:	8f 7d       	andi	r24, 0xDF	; 223
    3422:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3424:	e8 81       	ld	r30, Y
    3426:	f9 81       	ldd	r31, Y+1	; 0x01
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    342c:	88 81       	ld	r24, Y
    342e:	99 81       	ldd	r25, Y+1	; 0x01
    3430:	0e 94 9d 0b 	call	0x173a	; 0x173a <sync>
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <f_sync+0xac>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    3436:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	08 95       	ret

00003442 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    3448:	0e 94 c6 19 	call	0x338c	; 0x338c <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    344c:	88 23       	and	r24, r24
    344e:	11 f4       	brne	.+4      	; 0x3454 <f_close+0x12>
    3450:	19 82       	std	Y+1, r1	; 0x01
    3452:	18 82       	st	Y, r1
	return res;
#endif
}
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret

0000345a <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    345a:	88 23       	and	r24, r24
    345c:	19 f4       	brne	.+6      	; 0x3464 <f_chdrive+0xa>

	CurrVol = drv;
    345e:	10 92 2f 01 	sts	0x012F, r1

	return FR_OK;
    3462:	08 95       	ret

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    3464:	8b e0       	ldi	r24, 0x0B	; 11

	CurrVol = drv;

	return FR_OK;
}
    3466:	08 95       	ret

00003468 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    3468:	ef 92       	push	r14
    346a:	ff 92       	push	r15
    346c:	1f 93       	push	r17
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	a4 97       	sbiw	r28, 0x24	; 36
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	cd bf       	out	0x3d, r28	; 61
    3482:	9c a3       	lds	r25, 0x5c
    3484:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3486:	ce 01       	movw	r24, r28
    3488:	83 96       	adiw	r24, 0x23	; 35
    348a:	be 01       	movw	r22, r28
    348c:	6f 5f       	subi	r22, 0xFF	; 255
    348e:	7f 4f       	sbci	r23, 0xFF	; 255
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
    3496:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3498:	88 23       	and	r24, r24
    349a:	81 f5       	brne	.+96     	; 0x34fc <f_chdir+0x94>
		INIT_BUF(dj);
    349c:	ce 01       	movw	r24, r28
    349e:	47 96       	adiw	r24, 0x17	; 23
    34a0:	9e 8b       	std	Y+22, r25	; 0x16
    34a2:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    34a4:	6b a1       	lds	r22, 0x4b
    34a6:	7c a1       	lds	r23, 0x4c
    34a8:	ce 01       	movw	r24, r28
    34aa:	01 96       	adiw	r24, 0x01	; 1
    34ac:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
    34b0:	18 2f       	mov	r17, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    34b2:	88 23       	and	r24, r24
    34b4:	01 f5       	brne	.+64     	; 0x34f6 <f_chdir+0x8e>
			if (!dj.dir) {
    34b6:	eb 89       	ldd	r30, Y+19	; 0x13
    34b8:	fc 89       	ldd	r31, Y+20	; 0x14
    34ba:	30 97       	sbiw	r30, 0x00	; 0
    34bc:	59 f4       	brne	.+22     	; 0x34d4 <f_chdir+0x6c>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    34be:	e9 81       	ldd	r30, Y+1	; 0x01
    34c0:	fa 81       	ldd	r31, Y+2	; 0x02
    34c2:	8f 81       	ldd	r24, Y+7	; 0x07
    34c4:	98 85       	ldd	r25, Y+8	; 0x08
    34c6:	a9 85       	ldd	r26, Y+9	; 0x09
    34c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    34ca:	86 8b       	std	Z+22, r24	; 0x16
    34cc:	97 8b       	std	Z+23, r25	; 0x17
    34ce:	a0 8f       	std	Z+24, r26	; 0x18
    34d0:	b1 8f       	std	Z+25, r27	; 0x19
    34d2:	14 c0       	rjmp	.+40     	; 0x34fc <f_chdir+0x94>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    34d4:	83 85       	ldd	r24, Z+11	; 0x0b
    34d6:	84 ff       	sbrs	r24, 4
    34d8:	1e c0       	rjmp	.+60     	; 0x3516 <f_chdir+0xae>
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
    34da:	e9 80       	ldd	r14, Y+1	; 0x01
    34dc:	fa 80       	ldd	r15, Y+2	; 0x02
    34de:	c7 01       	movw	r24, r14
    34e0:	bf 01       	movw	r22, r30
    34e2:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	f7 01       	movw	r30, r14
    34ec:	86 8b       	std	Z+22, r24	; 0x16
    34ee:	97 8b       	std	Z+23, r25	; 0x17
    34f0:	a0 8f       	std	Z+24, r26	; 0x18
    34f2:	b1 8f       	std	Z+25, r27	; 0x19
    34f4:	03 c0       	rjmp	.+6      	; 0x34fc <f_chdir+0x94>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    34f6:	84 30       	cpi	r24, 0x04	; 4
    34f8:	09 f4       	brne	.+2      	; 0x34fc <f_chdir+0x94>
    34fa:	15 e0       	ldi	r17, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    34fc:	81 2f       	mov	r24, r17
    34fe:	a4 96       	adiw	r28, 0x24	; 36
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	ff 90       	pop	r15
    3512:	ef 90       	pop	r14
    3514:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    3516:	15 e0       	ldi	r17, 0x05	; 5
    3518:	f1 cf       	rjmp	.-30     	; 0x34fc <f_chdir+0x94>

0000351a <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    351a:	2f 92       	push	r2
    351c:	3f 92       	push	r3
    351e:	4f 92       	push	r4
    3520:	5f 92       	push	r5
    3522:	6f 92       	push	r6
    3524:	7f 92       	push	r7
    3526:	8f 92       	push	r8
    3528:	9f 92       	push	r9
    352a:	af 92       	push	r10
    352c:	bf 92       	push	r11
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	00 d0       	rcall	.+0      	; 0x3540 <f_lseek+0x26>
    3540:	00 d0       	rcall	.+0      	; 0x3542 <f_lseek+0x28>
    3542:	00 d0       	rcall	.+0      	; 0x3544 <f_lseek+0x2a>
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	8d 83       	std	Y+5, r24	; 0x05
    354c:	6a 01       	movw	r12, r20
    354e:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    3550:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <validate>
    3554:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3556:	88 23       	and	r24, r24
    3558:	09 f0       	breq	.+2      	; 0x355c <f_lseek+0x42>
    355a:	e6 c1       	rjmp	.+972    	; 0x3928 <f_lseek+0x40e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    355c:	ad 81       	ldd	r26, Y+5	; 0x05
    355e:	be 81       	ldd	r27, Y+6	; 0x06
    3560:	14 96       	adiw	r26, 0x04	; 4
    3562:	2c 91       	ld	r18, X
    3564:	14 97       	sbiw	r26, 0x04	; 4
    3566:	22 23       	and	r18, r18
    3568:	0c f4       	brge	.+2      	; 0x356c <f_lseek+0x52>
    356a:	dd c1       	rjmp	.+954    	; 0x3926 <f_lseek+0x40c>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    356c:	1a 96       	adiw	r26, 0x0a	; 10
    356e:	8d 91       	ld	r24, X+
    3570:	9d 91       	ld	r25, X+
    3572:	0d 90       	ld	r0, X+
    3574:	bc 91       	ld	r27, X
    3576:	a0 2d       	mov	r26, r0
    3578:	8c 15       	cp	r24, r12
    357a:	9d 05       	cpc	r25, r13
    357c:	ae 05       	cpc	r26, r14
    357e:	bf 05       	cpc	r27, r15
    3580:	20 f4       	brcc	.+8      	; 0x358a <f_lseek+0x70>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    3582:	21 fd       	sbrc	r18, 1
    3584:	02 c0       	rjmp	.+4      	; 0x358a <f_lseek+0x70>
#endif
			) ofs = fp->fsize;
    3586:	6c 01       	movw	r12, r24
    3588:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    358a:	ed 81       	ldd	r30, Y+5	; 0x05
    358c:	fe 81       	ldd	r31, Y+6	; 0x06
    358e:	46 81       	ldd	r20, Z+6	; 0x06
    3590:	57 81       	ldd	r21, Z+7	; 0x07
    3592:	60 85       	ldd	r22, Z+8	; 0x08
    3594:	71 85       	ldd	r23, Z+9	; 0x09
		fp->fptr = nsect = 0;
    3596:	16 82       	std	Z+6, r1	; 0x06
    3598:	17 82       	std	Z+7, r1	; 0x07
    359a:	10 86       	std	Z+8, r1	; 0x08
    359c:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    359e:	c1 14       	cp	r12, r1
    35a0:	d1 04       	cpc	r13, r1
    35a2:	e1 04       	cpc	r14, r1
    35a4:	f1 04       	cpc	r15, r1
    35a6:	09 f4       	brne	.+2      	; 0x35aa <f_lseek+0x90>
    35a8:	bf c1       	rjmp	.+894    	; 0x3928 <f_lseek+0x40e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    35aa:	20 80       	ld	r2, Z
    35ac:	31 80       	ldd	r3, Z+1	; 0x01
    35ae:	f1 01       	movw	r30, r2
    35b0:	82 81       	ldd	r24, Z+2	; 0x02
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	a0 e0       	ldi	r26, 0x00	; 0
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	4c 01       	movw	r8, r24
    35ba:	5d 01       	movw	r10, r26
    35bc:	07 2e       	mov	r0, r23
    35be:	79 e0       	ldi	r23, 0x09	; 9
    35c0:	88 0c       	add	r8, r8
    35c2:	99 1c       	adc	r9, r9
    35c4:	aa 1c       	adc	r10, r10
    35c6:	bb 1c       	adc	r11, r11
    35c8:	7a 95       	dec	r23
    35ca:	d1 f7       	brne	.-12     	; 0x35c0 <f_lseek+0xa6>
    35cc:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    35ce:	41 15       	cp	r20, r1
    35d0:	51 05       	cpc	r21, r1
    35d2:	61 05       	cpc	r22, r1
    35d4:	71 05       	cpc	r23, r1
    35d6:	f1 f1       	breq	.+124    	; 0x3654 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    35d8:	2a 01       	movw	r4, r20
    35da:	3b 01       	movw	r6, r22
    35dc:	08 94       	sec
    35de:	41 08       	sbc	r4, r1
    35e0:	51 08       	sbc	r5, r1
    35e2:	61 08       	sbc	r6, r1
    35e4:	71 08       	sbc	r7, r1
    35e6:	c7 01       	movw	r24, r14
    35e8:	b6 01       	movw	r22, r12
    35ea:	61 50       	subi	r22, 0x01	; 1
    35ec:	70 40       	sbci	r23, 0x00	; 0
    35ee:	80 40       	sbci	r24, 0x00	; 0
    35f0:	90 40       	sbci	r25, 0x00	; 0
    35f2:	a5 01       	movw	r20, r10
    35f4:	94 01       	movw	r18, r8
    35f6:	0e 94 3f 24 	call	0x487e	; 0x487e <__udivmodsi4>
    35fa:	29 83       	std	Y+1, r18	; 0x01
    35fc:	3a 83       	std	Y+2, r19	; 0x02
    35fe:	4b 83       	std	Y+3, r20	; 0x03
    3600:	5c 83       	std	Y+4, r21	; 0x04
    3602:	c3 01       	movw	r24, r6
    3604:	b2 01       	movw	r22, r4
    3606:	a5 01       	movw	r20, r10
    3608:	94 01       	movw	r18, r8
    360a:	0e 94 3f 24 	call	0x487e	; 0x487e <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	9a 81       	ldd	r25, Y+2	; 0x02
    3612:	ab 81       	ldd	r26, Y+3	; 0x03
    3614:	bc 81       	ldd	r27, Y+4	; 0x04
    3616:	82 17       	cp	r24, r18
    3618:	93 07       	cpc	r25, r19
    361a:	a4 07       	cpc	r26, r20
    361c:	b5 07       	cpc	r27, r21
    361e:	d0 f0       	brcs	.+52     	; 0x3654 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3620:	88 27       	eor	r24, r24
    3622:	99 27       	eor	r25, r25
    3624:	dc 01       	movw	r26, r24
    3626:	88 19       	sub	r24, r8
    3628:	99 09       	sbc	r25, r9
    362a:	aa 09       	sbc	r26, r10
    362c:	bb 09       	sbc	r27, r11
    362e:	84 21       	and	r24, r4
    3630:	95 21       	and	r25, r5
    3632:	a6 21       	and	r26, r6
    3634:	b7 21       	and	r27, r7
    3636:	ed 81       	ldd	r30, Y+5	; 0x05
    3638:	fe 81       	ldd	r31, Y+6	; 0x06
    363a:	86 83       	std	Z+6, r24	; 0x06
    363c:	97 83       	std	Z+7, r25	; 0x07
    363e:	a0 87       	std	Z+8, r26	; 0x08
    3640:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    3642:	c8 1a       	sub	r12, r24
    3644:	d9 0a       	sbc	r13, r25
    3646:	ea 0a       	sbc	r14, r26
    3648:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    364a:	42 89       	ldd	r20, Z+18	; 0x12
    364c:	53 89       	ldd	r21, Z+19	; 0x13
    364e:	64 89       	ldd	r22, Z+20	; 0x14
    3650:	75 89       	ldd	r23, Z+21	; 0x15
    3652:	42 c0       	rjmp	.+132    	; 0x36d8 <f_lseek+0x1be>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    3654:	ad 81       	ldd	r26, Y+5	; 0x05
    3656:	be 81       	ldd	r27, Y+6	; 0x06
    3658:	1e 96       	adiw	r26, 0x0e	; 14
    365a:	4d 91       	ld	r20, X+
    365c:	5d 91       	ld	r21, X+
    365e:	6d 91       	ld	r22, X+
    3660:	7c 91       	ld	r23, X
    3662:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3664:	41 15       	cp	r20, r1
    3666:	51 05       	cpc	r21, r1
    3668:	61 05       	cpc	r22, r1
    366a:	71 05       	cpc	r23, r1
    366c:	69 f5       	brne	.+90     	; 0x36c8 <f_lseek+0x1ae>
					clst = create_chain(fp->fs, 0);
    366e:	c1 01       	movw	r24, r2
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	50 e0       	ldi	r21, 0x00	; 0
    3674:	ba 01       	movw	r22, r20
    3676:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <create_chain>
    367a:	ab 01       	movw	r20, r22
    367c:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    367e:	41 30       	cpi	r20, 0x01	; 1
    3680:	51 05       	cpc	r21, r1
    3682:	61 05       	cpc	r22, r1
    3684:	71 05       	cpc	r23, r1
    3686:	39 f4       	brne	.+14     	; 0x3696 <f_lseek+0x17c>
    3688:	ed 81       	ldd	r30, Y+5	; 0x05
    368a:	fe 81       	ldd	r31, Y+6	; 0x06
    368c:	84 81       	ldd	r24, Z+4	; 0x04
    368e:	80 68       	ori	r24, 0x80	; 128
    3690:	84 83       	std	Z+4, r24	; 0x04
    3692:	12 e0       	ldi	r17, 0x02	; 2
    3694:	49 c1       	rjmp	.+658    	; 0x3928 <f_lseek+0x40e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3696:	4f 3f       	cpi	r20, 0xFF	; 255
    3698:	ff ef       	ldi	r31, 0xFF	; 255
    369a:	5f 07       	cpc	r21, r31
    369c:	ff ef       	ldi	r31, 0xFF	; 255
    369e:	6f 07       	cpc	r22, r31
    36a0:	ff ef       	ldi	r31, 0xFF	; 255
    36a2:	7f 07       	cpc	r23, r31
    36a4:	59 f4       	brne	.+22     	; 0x36bc <f_lseek+0x1a2>
    36a6:	ad 81       	ldd	r26, Y+5	; 0x05
    36a8:	be 81       	ldd	r27, Y+6	; 0x06
    36aa:	14 96       	adiw	r26, 0x04	; 4
    36ac:	8c 91       	ld	r24, X
    36ae:	14 97       	sbiw	r26, 0x04	; 4
    36b0:	80 68       	ori	r24, 0x80	; 128
    36b2:	14 96       	adiw	r26, 0x04	; 4
    36b4:	8c 93       	st	X, r24
    36b6:	14 97       	sbiw	r26, 0x04	; 4
    36b8:	11 e0       	ldi	r17, 0x01	; 1
    36ba:	36 c1       	rjmp	.+620    	; 0x3928 <f_lseek+0x40e>
					fp->sclust = clst;
    36bc:	ed 81       	ldd	r30, Y+5	; 0x05
    36be:	fe 81       	ldd	r31, Y+6	; 0x06
    36c0:	46 87       	std	Z+14, r20	; 0x0e
    36c2:	57 87       	std	Z+15, r21	; 0x0f
    36c4:	60 8b       	std	Z+16, r22	; 0x10
    36c6:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    36c8:	ad 81       	ldd	r26, Y+5	; 0x05
    36ca:	be 81       	ldd	r27, Y+6	; 0x06
    36cc:	52 96       	adiw	r26, 0x12	; 18
    36ce:	4d 93       	st	X+, r20
    36d0:	5d 93       	st	X+, r21
    36d2:	6d 93       	st	X+, r22
    36d4:	7c 93       	st	X, r23
    36d6:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    36d8:	41 15       	cp	r20, r1
    36da:	51 05       	cpc	r21, r1
    36dc:	61 05       	cpc	r22, r1
    36de:	71 05       	cpc	r23, r1
    36e0:	09 f4       	brne	.+2      	; 0x36e4 <f_lseek+0x1ca>
    36e2:	aa c0       	rjmp	.+340    	; 0x3838 <f_lseek+0x31e>
				while (ofs > bcs) {						/* Cluster following loop */
    36e4:	8c 14       	cp	r8, r12
    36e6:	9d 04       	cpc	r9, r13
    36e8:	ae 04       	cpc	r10, r14
    36ea:	bf 04       	cpc	r11, r15
    36ec:	08 f0       	brcs	.+2      	; 0x36f0 <f_lseek+0x1d6>
    36ee:	68 c0       	rjmp	.+208    	; 0x37c0 <f_lseek+0x2a6>
    36f0:	4d 80       	ldd	r4, Y+5	; 0x05
    36f2:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    36f4:	f2 01       	movw	r30, r4
    36f6:	84 81       	ldd	r24, Z+4	; 0x04
    36f8:	81 ff       	sbrs	r24, 1
    36fa:	0c c0       	rjmp	.+24     	; 0x3714 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <create_chain>
    3704:	ab 01       	movw	r20, r22
    3706:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    3708:	41 15       	cp	r20, r1
    370a:	51 05       	cpc	r21, r1
    370c:	61 05       	cpc	r22, r1
    370e:	71 05       	cpc	r23, r1
    3710:	39 f4       	brne	.+14     	; 0x3720 <f_lseek+0x206>
    3712:	52 c0       	rjmp	.+164    	; 0x37b8 <f_lseek+0x29e>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    371c:	ab 01       	movw	r20, r22
    371e:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3720:	4f 3f       	cpi	r20, 0xFF	; 255
    3722:	bf ef       	ldi	r27, 0xFF	; 255
    3724:	5b 07       	cpc	r21, r27
    3726:	bf ef       	ldi	r27, 0xFF	; 255
    3728:	6b 07       	cpc	r22, r27
    372a:	bf ef       	ldi	r27, 0xFF	; 255
    372c:	7b 07       	cpc	r23, r27
    372e:	41 f4       	brne	.+16     	; 0x3740 <f_lseek+0x226>
    3730:	5e 82       	std	Y+6, r5	; 0x06
    3732:	4d 82       	std	Y+5, r4	; 0x05
    3734:	f2 01       	movw	r30, r4
    3736:	84 81       	ldd	r24, Z+4	; 0x04
    3738:	80 68       	ori	r24, 0x80	; 128
    373a:	84 83       	std	Z+4, r24	; 0x04
    373c:	11 e0       	ldi	r17, 0x01	; 1
    373e:	f4 c0       	rjmp	.+488    	; 0x3928 <f_lseek+0x40e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3740:	42 30       	cpi	r20, 0x02	; 2
    3742:	51 05       	cpc	r21, r1
    3744:	61 05       	cpc	r22, r1
    3746:	71 05       	cpc	r23, r1
    3748:	60 f0       	brcs	.+24     	; 0x3762 <f_lseek+0x248>
    374a:	d2 01       	movw	r26, r4
    374c:	ed 91       	ld	r30, X+
    374e:	fc 91       	ld	r31, X
    3750:	82 8d       	ldd	r24, Z+26	; 0x1a
    3752:	93 8d       	ldd	r25, Z+27	; 0x1b
    3754:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3756:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3758:	48 17       	cp	r20, r24
    375a:	59 07       	cpc	r21, r25
    375c:	6a 07       	cpc	r22, r26
    375e:	7b 07       	cpc	r23, r27
    3760:	40 f0       	brcs	.+16     	; 0x3772 <f_lseek+0x258>
    3762:	5e 82       	std	Y+6, r5	; 0x06
    3764:	4d 82       	std	Y+5, r4	; 0x05
    3766:	f2 01       	movw	r30, r4
    3768:	84 81       	ldd	r24, Z+4	; 0x04
    376a:	80 68       	ori	r24, 0x80	; 128
    376c:	84 83       	std	Z+4, r24	; 0x04
    376e:	12 e0       	ldi	r17, 0x02	; 2
    3770:	db c0       	rjmp	.+438    	; 0x3928 <f_lseek+0x40e>
					fp->clust = clst;
    3772:	d2 01       	movw	r26, r4
    3774:	52 96       	adiw	r26, 0x12	; 18
    3776:	4d 93       	st	X+, r20
    3778:	5d 93       	st	X+, r21
    377a:	6d 93       	st	X+, r22
    377c:	7c 93       	st	X, r23
    377e:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    3780:	16 96       	adiw	r26, 0x06	; 6
    3782:	8d 91       	ld	r24, X+
    3784:	9d 91       	ld	r25, X+
    3786:	0d 90       	ld	r0, X+
    3788:	bc 91       	ld	r27, X
    378a:	a0 2d       	mov	r26, r0
    378c:	88 0d       	add	r24, r8
    378e:	99 1d       	adc	r25, r9
    3790:	aa 1d       	adc	r26, r10
    3792:	bb 1d       	adc	r27, r11
    3794:	f2 01       	movw	r30, r4
    3796:	86 83       	std	Z+6, r24	; 0x06
    3798:	97 83       	std	Z+7, r25	; 0x07
    379a:	a0 87       	std	Z+8, r26	; 0x08
    379c:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    379e:	c8 18       	sub	r12, r8
    37a0:	d9 08       	sbc	r13, r9
    37a2:	ea 08       	sbc	r14, r10
    37a4:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    37a6:	8c 14       	cp	r8, r12
    37a8:	9d 04       	cpc	r9, r13
    37aa:	ae 04       	cpc	r10, r14
    37ac:	bf 04       	cpc	r11, r15
    37ae:	08 f4       	brcc	.+2      	; 0x37b2 <f_lseek+0x298>
    37b0:	a1 cf       	rjmp	.-190    	; 0x36f4 <f_lseek+0x1da>
    37b2:	5e 82       	std	Y+6, r5	; 0x06
    37b4:	4d 82       	std	Y+5, r4	; 0x05
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <f_lseek+0x2a6>
    37b8:	5e 82       	std	Y+6, r5	; 0x06
    37ba:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    37bc:	75 01       	movw	r14, r10
    37be:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    37c0:	ed 81       	ldd	r30, Y+5	; 0x05
    37c2:	fe 81       	ldd	r31, Y+6	; 0x06
    37c4:	86 81       	ldd	r24, Z+6	; 0x06
    37c6:	97 81       	ldd	r25, Z+7	; 0x07
    37c8:	a0 85       	ldd	r26, Z+8	; 0x08
    37ca:	b1 85       	ldd	r27, Z+9	; 0x09
    37cc:	8c 0d       	add	r24, r12
    37ce:	9d 1d       	adc	r25, r13
    37d0:	ae 1d       	adc	r26, r14
    37d2:	bf 1d       	adc	r27, r15
    37d4:	86 83       	std	Z+6, r24	; 0x06
    37d6:	97 83       	std	Z+7, r25	; 0x07
    37d8:	a0 87       	std	Z+8, r26	; 0x08
    37da:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    37dc:	d7 01       	movw	r26, r14
    37de:	c6 01       	movw	r24, r12
    37e0:	91 70       	andi	r25, 0x01	; 1
    37e2:	a0 70       	andi	r26, 0x00	; 0
    37e4:	b0 70       	andi	r27, 0x00	; 0
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	a1 05       	cpc	r26, r1
    37ea:	b1 05       	cpc	r27, r1
    37ec:	49 f1       	breq	.+82     	; 0x3840 <f_lseek+0x326>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	a1 05       	cpc	r26, r1
    37fe:	b1 05       	cpc	r27, r1
    3800:	59 f4       	brne	.+22     	; 0x3818 <f_lseek+0x2fe>
    3802:	ad 81       	ldd	r26, Y+5	; 0x05
    3804:	be 81       	ldd	r27, Y+6	; 0x06
    3806:	14 96       	adiw	r26, 0x04	; 4
    3808:	8c 91       	ld	r24, X
    380a:	14 97       	sbiw	r26, 0x04	; 4
    380c:	80 68       	ori	r24, 0x80	; 128
    380e:	14 96       	adiw	r26, 0x04	; 4
    3810:	8c 93       	st	X, r24
    3812:	14 97       	sbiw	r26, 0x04	; 4
    3814:	12 e0       	ldi	r17, 0x02	; 2
    3816:	88 c0       	rjmp	.+272    	; 0x3928 <f_lseek+0x40e>
					nsect += ofs / SS(fp->fs);
    3818:	46 01       	movw	r8, r12
    381a:	57 01       	movw	r10, r14
    381c:	07 2e       	mov	r0, r23
    381e:	79 e0       	ldi	r23, 0x09	; 9
    3820:	b6 94       	lsr	r11
    3822:	a7 94       	ror	r10
    3824:	97 94       	ror	r9
    3826:	87 94       	ror	r8
    3828:	7a 95       	dec	r23
    382a:	d1 f7       	brne	.-12     	; 0x3820 <f_lseek+0x306>
    382c:	70 2d       	mov	r23, r0
    382e:	88 0e       	add	r8, r24
    3830:	99 1e       	adc	r9, r25
    3832:	aa 1e       	adc	r10, r26
    3834:	bb 1e       	adc	r11, r27
    3836:	07 c0       	rjmp	.+14     	; 0x3846 <f_lseek+0x32c>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3838:	88 24       	eor	r8, r8
    383a:	99 24       	eor	r9, r9
    383c:	54 01       	movw	r10, r8
    383e:	03 c0       	rjmp	.+6      	; 0x3846 <f_lseek+0x32c>
    3840:	88 24       	eor	r8, r8
    3842:	99 24       	eor	r9, r9
    3844:	54 01       	movw	r10, r8
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3846:	ed 81       	ldd	r30, Y+5	; 0x05
    3848:	fe 81       	ldd	r31, Y+6	; 0x06
    384a:	86 81       	ldd	r24, Z+6	; 0x06
    384c:	97 81       	ldd	r25, Z+7	; 0x07
    384e:	a0 85       	ldd	r26, Z+8	; 0x08
    3850:	b1 85       	ldd	r27, Z+9	; 0x09
    3852:	91 70       	andi	r25, 0x01	; 1
    3854:	a0 70       	andi	r26, 0x00	; 0
    3856:	b0 70       	andi	r27, 0x00	; 0
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	a1 05       	cpc	r26, r1
    385c:	b1 05       	cpc	r27, r1
    385e:	09 f4       	brne	.+2      	; 0x3862 <f_lseek+0x348>
    3860:	4b c0       	rjmp	.+150    	; 0x38f8 <f_lseek+0x3de>
    3862:	c6 88       	ldd	r12, Z+22	; 0x16
    3864:	d7 88       	ldd	r13, Z+23	; 0x17
    3866:	e0 8c       	ldd	r14, Z+24	; 0x18
    3868:	f1 8c       	ldd	r15, Z+25	; 0x19
    386a:	c8 14       	cp	r12, r8
    386c:	d9 04       	cpc	r13, r9
    386e:	ea 04       	cpc	r14, r10
    3870:	fb 04       	cpc	r15, r11
    3872:	09 f4       	brne	.+2      	; 0x3876 <f_lseek+0x35c>
    3874:	41 c0       	rjmp	.+130    	; 0x38f8 <f_lseek+0x3de>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    3876:	84 81       	ldd	r24, Z+4	; 0x04
    3878:	86 ff       	sbrs	r24, 6
    387a:	1f c0       	rjmp	.+62     	; 0x38ba <f_lseek+0x3a0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    387c:	01 90       	ld	r0, Z+
    387e:	f0 81       	ld	r31, Z
    3880:	e0 2d       	mov	r30, r0
    3882:	6d 81       	ldd	r22, Y+5	; 0x05
    3884:	7e 81       	ldd	r23, Y+6	; 0x06
    3886:	60 5e       	subi	r22, 0xE0	; 224
    3888:	7f 4f       	sbci	r23, 0xFF	; 255
    388a:	81 81       	ldd	r24, Z+1	; 0x01
    388c:	a7 01       	movw	r20, r14
    388e:	96 01       	movw	r18, r12
    3890:	01 e0       	ldi	r16, 0x01	; 1
    3892:	0e 94 8f 02 	call	0x51e	; 0x51e <disk_write>
    3896:	88 23       	and	r24, r24
    3898:	59 f0       	breq	.+22     	; 0x38b0 <f_lseek+0x396>
					ABORT(fp->fs, FR_DISK_ERR);
    389a:	ad 81       	ldd	r26, Y+5	; 0x05
    389c:	be 81       	ldd	r27, Y+6	; 0x06
    389e:	14 96       	adiw	r26, 0x04	; 4
    38a0:	8c 91       	ld	r24, X
    38a2:	14 97       	sbiw	r26, 0x04	; 4
    38a4:	80 68       	ori	r24, 0x80	; 128
    38a6:	14 96       	adiw	r26, 0x04	; 4
    38a8:	8c 93       	st	X, r24
    38aa:	14 97       	sbiw	r26, 0x04	; 4
    38ac:	11 e0       	ldi	r17, 0x01	; 1
    38ae:	3c c0       	rjmp	.+120    	; 0x3928 <f_lseek+0x40e>
				fp->flag &= ~FA__DIRTY;
    38b0:	ed 81       	ldd	r30, Y+5	; 0x05
    38b2:	fe 81       	ldd	r31, Y+6	; 0x06
    38b4:	84 81       	ldd	r24, Z+4	; 0x04
    38b6:	8f 7b       	andi	r24, 0xBF	; 191
    38b8:	84 83       	std	Z+4, r24	; 0x04
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    38ba:	ad 81       	ldd	r26, Y+5	; 0x05
    38bc:	be 81       	ldd	r27, Y+6	; 0x06
    38be:	ed 91       	ld	r30, X+
    38c0:	fc 91       	ld	r31, X
    38c2:	11 97       	sbiw	r26, 0x01	; 1
    38c4:	bd 01       	movw	r22, r26
    38c6:	60 5e       	subi	r22, 0xE0	; 224
    38c8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ca:	81 81       	ldd	r24, Z+1	; 0x01
    38cc:	a5 01       	movw	r20, r10
    38ce:	94 01       	movw	r18, r8
    38d0:	01 e0       	ldi	r16, 0x01	; 1
    38d2:	0e 94 39 02 	call	0x472	; 0x472 <disk_read>
    38d6:	88 23       	and	r24, r24
    38d8:	39 f0       	breq	.+14     	; 0x38e8 <f_lseek+0x3ce>
				ABORT(fp->fs, FR_DISK_ERR);
    38da:	ed 81       	ldd	r30, Y+5	; 0x05
    38dc:	fe 81       	ldd	r31, Y+6	; 0x06
    38de:	84 81       	ldd	r24, Z+4	; 0x04
    38e0:	80 68       	ori	r24, 0x80	; 128
    38e2:	84 83       	std	Z+4, r24	; 0x04
    38e4:	11 e0       	ldi	r17, 0x01	; 1
    38e6:	20 c0       	rjmp	.+64     	; 0x3928 <f_lseek+0x40e>
#endif
			fp->dsect = nsect;
    38e8:	ad 81       	ldd	r26, Y+5	; 0x05
    38ea:	be 81       	ldd	r27, Y+6	; 0x06
    38ec:	56 96       	adiw	r26, 0x16	; 22
    38ee:	8d 92       	st	X+, r8
    38f0:	9d 92       	st	X+, r9
    38f2:	ad 92       	st	X+, r10
    38f4:	bc 92       	st	X, r11
    38f6:	59 97       	sbiw	r26, 0x19	; 25
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    38f8:	ed 81       	ldd	r30, Y+5	; 0x05
    38fa:	fe 81       	ldd	r31, Y+6	; 0x06
    38fc:	86 81       	ldd	r24, Z+6	; 0x06
    38fe:	97 81       	ldd	r25, Z+7	; 0x07
    3900:	a0 85       	ldd	r26, Z+8	; 0x08
    3902:	b1 85       	ldd	r27, Z+9	; 0x09
    3904:	42 85       	ldd	r20, Z+10	; 0x0a
    3906:	53 85       	ldd	r21, Z+11	; 0x0b
    3908:	64 85       	ldd	r22, Z+12	; 0x0c
    390a:	75 85       	ldd	r23, Z+13	; 0x0d
    390c:	48 17       	cp	r20, r24
    390e:	59 07       	cpc	r21, r25
    3910:	6a 07       	cpc	r22, r26
    3912:	7b 07       	cpc	r23, r27
    3914:	48 f4       	brcc	.+18     	; 0x3928 <f_lseek+0x40e>
			fp->fsize = fp->fptr;
    3916:	82 87       	std	Z+10, r24	; 0x0a
    3918:	93 87       	std	Z+11, r25	; 0x0b
    391a:	a4 87       	std	Z+12, r26	; 0x0c
    391c:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    391e:	84 81       	ldd	r24, Z+4	; 0x04
    3920:	80 62       	ori	r24, 0x20	; 32
    3922:	84 83       	std	Z+4, r24	; 0x04
    3924:	01 c0       	rjmp	.+2      	; 0x3928 <f_lseek+0x40e>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3926:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3928:	81 2f       	mov	r24, r17
    392a:	26 96       	adiw	r28, 0x06	; 6
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	ff 90       	pop	r15
    3940:	ef 90       	pop	r14
    3942:	df 90       	pop	r13
    3944:	cf 90       	pop	r12
    3946:	bf 90       	pop	r11
    3948:	af 90       	pop	r10
    394a:	9f 90       	pop	r9
    394c:	8f 90       	pop	r8
    394e:	7f 90       	pop	r7
    3950:	6f 90       	pop	r6
    3952:	5f 90       	pop	r5
    3954:	4f 90       	pop	r4
    3956:	3f 90       	pop	r3
    3958:	2f 90       	pop	r2
    395a:	08 95       	ret

0000395c <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	2e 97       	sbiw	r28, 0x0e	; 14
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	8c 01       	movw	r16, r24
    397a:	7e 87       	std	Y+14, r23	; 0x0e
    397c:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    397e:	00 97       	sbiw	r24, 0x00	; 0
    3980:	09 f4       	brne	.+2      	; 0x3984 <f_opendir+0x28>
    3982:	4c c0       	rjmp	.+152    	; 0x3a1c <f_opendir+0xc0>

	res = chk_mounted(&path, &dj->fs, 0);
    3984:	ce 01       	movw	r24, r28
    3986:	0d 96       	adiw	r24, 0x0d	; 13
    3988:	b8 01       	movw	r22, r16
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
	fs = dj->fs;
    3990:	d8 01       	movw	r26, r16
    3992:	ed 90       	ld	r14, X+
    3994:	fc 90       	ld	r15, X
    3996:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    3998:	88 23       	and	r24, r24
    399a:	e1 f5       	brne	.+120    	; 0x3a14 <f_opendir+0xb8>
		INIT_BUF(*dj);
    399c:	ce 01       	movw	r24, r28
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	55 96       	adiw	r26, 0x15	; 21
    39a2:	9c 93       	st	X, r25
    39a4:	8e 93       	st	-X, r24
    39a6:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    39a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    39aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    39ac:	c8 01       	movw	r24, r16
    39ae:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    39b2:	88 23       	and	r24, r24
    39b4:	11 f5       	brne	.+68     	; 0x39fa <f_opendir+0x9e>
			if (dj->dir) {						/* It is not the root dir */
    39b6:	d8 01       	movw	r26, r16
    39b8:	52 96       	adiw	r26, 0x12	; 18
    39ba:	ed 91       	ld	r30, X+
    39bc:	fc 91       	ld	r31, X
    39be:	53 97       	sbiw	r26, 0x13	; 19
    39c0:	30 97       	sbiw	r30, 0x00	; 0
    39c2:	71 f0       	breq	.+28     	; 0x39e0 <f_opendir+0x84>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    39c4:	83 85       	ldd	r24, Z+11	; 0x0b
    39c6:	84 ff       	sbrs	r24, 4
    39c8:	1b c0       	rjmp	.+54     	; 0x3a00 <f_opendir+0xa4>
					dj->sclust = ld_clust(fs, dj->dir);
    39ca:	c7 01       	movw	r24, r14
    39cc:	bf 01       	movw	r22, r30
    39ce:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	f8 01       	movw	r30, r16
    39d8:	86 83       	std	Z+6, r24	; 0x06
    39da:	97 83       	std	Z+7, r25	; 0x07
    39dc:	a0 87       	std	Z+8, r26	; 0x08
    39de:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    39e0:	d7 01       	movw	r26, r14
    39e2:	16 96       	adiw	r26, 0x06	; 6
    39e4:	8d 91       	ld	r24, X+
    39e6:	9c 91       	ld	r25, X
    39e8:	17 97       	sbiw	r26, 0x07	; 7
    39ea:	f8 01       	movw	r30, r16
    39ec:	93 83       	std	Z+3, r25	; 0x03
    39ee:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dj, 0);			/* Rewind dir */
    39f0:	c8 01       	movw	r24, r16
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    39fa:	84 30       	cpi	r24, 0x04	; 4
    39fc:	11 f4       	brne	.+4      	; 0x3a02 <f_opendir+0xa6>
    39fe:	04 c0       	rjmp	.+8      	; 0x3a08 <f_opendir+0xac>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ld_clust(fs, dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    3a00:	85 e0       	ldi	r24, 0x05	; 5
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    3a02:	88 23       	and	r24, r24
    3a04:	61 f0       	breq	.+24     	; 0x3a1e <f_opendir+0xc2>
    3a06:	01 c0       	rjmp	.+2      	; 0x3a0a <f_opendir+0xae>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3a08:	85 e0       	ldi	r24, 0x05	; 5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    3a0a:	d8 01       	movw	r26, r16
    3a0c:	11 96       	adiw	r26, 0x01	; 1
    3a0e:	1c 92       	st	X, r1
    3a10:	1e 92       	st	-X, r1
    3a12:	05 c0       	rjmp	.+10     	; 0x3a1e <f_opendir+0xc2>
	} else {
		dj->fs = 0;
    3a14:	f8 01       	movw	r30, r16
    3a16:	11 82       	std	Z+1, r1	; 0x01
    3a18:	10 82       	st	Z, r1
    3a1a:	01 c0       	rjmp	.+2      	; 0x3a1e <f_opendir+0xc2>
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    3a1c:	89 e0       	ldi	r24, 0x09	; 9
	} else {
		dj->fs = 0;
	}

	LEAVE_FF(fs, res);
}
    3a1e:	2e 96       	adiw	r28, 0x0e	; 14
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	08 95       	ret

00003a38 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3a38:	cf 92       	push	r12
    3a3a:	df 92       	push	r13
    3a3c:	ef 92       	push	r14
    3a3e:	ff 92       	push	r15
    3a40:	1f 93       	push	r17
    3a42:	cf 93       	push	r28
    3a44:	df 93       	push	r29
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
    3a4a:	2c 97       	sbiw	r28, 0x0c	; 12
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	7c 01       	movw	r14, r24
    3a58:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj);						/* Check validity of the object */
    3a5a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <validate>
    3a5e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3a60:	88 23       	and	r24, r24
    3a62:	81 f5       	brne	.+96     	; 0x3ac4 <f_readdir+0x8c>
		if (!fno) {
    3a64:	c1 14       	cp	r12, r1
    3a66:	d1 04       	cpc	r13, r1
    3a68:	39 f4       	brne	.+14     	; 0x3a78 <f_readdir+0x40>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    3a6a:	c7 01       	movw	r24, r14
    3a6c:	60 e0       	ldi	r22, 0x00	; 0
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
    3a74:	18 2f       	mov	r17, r24
    3a76:	26 c0       	rjmp	.+76     	; 0x3ac4 <f_readdir+0x8c>
		} else {
			INIT_BUF(*dj);
    3a78:	ce 01       	movw	r24, r28
    3a7a:	01 96       	adiw	r24, 0x01	; 1
    3a7c:	f7 01       	movw	r30, r14
    3a7e:	95 8b       	std	Z+21, r25	; 0x15
    3a80:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    3a82:	c7 01       	movw	r24, r14
    3a84:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    3a88:	84 30       	cpi	r24, 0x04	; 4
    3a8a:	31 f4       	brne	.+12     	; 0x3a98 <f_readdir+0x60>
				dj->sect = 0;
    3a8c:	f7 01       	movw	r30, r14
    3a8e:	16 86       	std	Z+14, r1	; 0x0e
    3a90:	17 86       	std	Z+15, r1	; 0x0f
    3a92:	10 8a       	std	Z+16, r1	; 0x10
    3a94:	11 8a       	std	Z+17, r1	; 0x11
    3a96:	02 c0       	rjmp	.+4      	; 0x3a9c <f_readdir+0x64>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3a98:	88 23       	and	r24, r24
    3a9a:	89 f4       	brne	.+34     	; 0x3abe <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    3a9c:	c7 01       	movw	r24, r14
    3a9e:	b6 01       	movw	r22, r12
    3aa0:	0e 94 57 05 	call	0xaae	; 0xaae <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    3aa4:	c7 01       	movw	r24, r14
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	0e 94 65 10 	call	0x20ca	; 0x20ca <dir_next>
				if (res == FR_NO_FILE) {
    3aae:	84 30       	cpi	r24, 0x04	; 4
    3ab0:	41 f4       	brne	.+16     	; 0x3ac2 <f_readdir+0x8a>
					dj->sect = 0;
    3ab2:	f7 01       	movw	r30, r14
    3ab4:	16 86       	std	Z+14, r1	; 0x0e
    3ab6:	17 86       	std	Z+15, r1	; 0x0f
    3ab8:	10 8a       	std	Z+16, r1	; 0x10
    3aba:	11 8a       	std	Z+17, r1	; 0x11
    3abc:	03 c0       	rjmp	.+6      	; 0x3ac4 <f_readdir+0x8c>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    3abe:	18 2f       	mov	r17, r24
    3ac0:	01 c0       	rjmp	.+2      	; 0x3ac4 <f_readdir+0x8c>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    3ac2:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3ac4:	81 2f       	mov	r24, r17
    3ac6:	2c 96       	adiw	r28, 0x0c	; 12
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	ff 90       	pop	r15
    3ada:	ef 90       	pop	r14
    3adc:	df 90       	pop	r13
    3ade:	cf 90       	pop	r12
    3ae0:	08 95       	ret

00003ae2 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3ae2:	ef 92       	push	r14
    3ae4:	ff 92       	push	r15
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	a4 97       	sbiw	r28, 0x24	; 36
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	cd bf       	out	0x3d, r28	; 61
    3afc:	9c a3       	lds	r25, 0x5c
    3afe:	8b a3       	lds	r24, 0x5b
    3b00:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3b02:	ce 01       	movw	r24, r28
    3b04:	83 96       	adiw	r24, 0x23	; 35
    3b06:	be 01       	movw	r22, r28
    3b08:	6f 5f       	subi	r22, 0xFF	; 255
    3b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
    3b12:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3b14:	88 23       	and	r24, r24
    3b16:	c1 f4       	brne	.+48     	; 0x3b48 <f_stat+0x66>
		INIT_BUF(dj);
    3b18:	ce 01       	movw	r24, r28
    3b1a:	47 96       	adiw	r24, 0x17	; 23
    3b1c:	9e 8b       	std	Y+22, r25	; 0x16
    3b1e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3b20:	6b a1       	lds	r22, 0x4b
    3b22:	7c a1       	lds	r23, 0x4c
    3b24:	ce 01       	movw	r24, r28
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
    3b2c:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    3b2e:	88 23       	and	r24, r24
    3b30:	59 f4       	brne	.+22     	; 0x3b48 <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    3b32:	8b 89       	ldd	r24, Y+19	; 0x13
    3b34:	9c 89       	ldd	r25, Y+20	; 0x14
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	31 f0       	breq	.+12     	; 0x3b46 <f_stat+0x64>
				get_fileinfo(&dj, fno);
    3b3a:	ce 01       	movw	r24, r28
    3b3c:	01 96       	adiw	r24, 0x01	; 1
    3b3e:	b7 01       	movw	r22, r14
    3b40:	0e 94 57 05 	call	0xaae	; 0xaae <get_fileinfo>
    3b44:	01 c0       	rjmp	.+2      	; 0x3b48 <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    3b46:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3b48:	81 2f       	mov	r24, r17
    3b4a:	a4 96       	adiw	r28, 0x24	; 36
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	ff 90       	pop	r15
    3b5e:	ef 90       	pop	r14
    3b60:	08 95       	ret

00003b62 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3b62:	2f 92       	push	r2
    3b64:	3f 92       	push	r3
    3b66:	4f 92       	push	r4
    3b68:	5f 92       	push	r5
    3b6a:	6f 92       	push	r6
    3b6c:	7f 92       	push	r7
    3b6e:	8f 92       	push	r8
    3b70:	9f 92       	push	r9
    3b72:	af 92       	push	r10
    3b74:	bf 92       	push	r11
    3b76:	cf 92       	push	r12
    3b78:	df 92       	push	r13
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	2c 97       	sbiw	r28, 0x0c	; 12
    3b8c:	0f b6       	in	r0, 0x3f	; 63
    3b8e:	f8 94       	cli
    3b90:	de bf       	out	0x3e, r29	; 62
    3b92:	0f be       	out	0x3f, r0	; 63
    3b94:	cd bf       	out	0x3d, r28	; 61
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	89 83       	std	Y+1, r24	; 0x01
    3b9a:	1b 01       	movw	r2, r22
    3b9c:	8a 01       	movw	r16, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	01 96       	adiw	r24, 0x01	; 1
    3ba2:	ba 01       	movw	r22, r20
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
    3baa:	b8 2e       	mov	r11, r24
	fs = *fatfs;
    3bac:	d8 01       	movw	r26, r16
    3bae:	0d 91       	ld	r16, X+
    3bb0:	1c 91       	ld	r17, X
    3bb2:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    3bb4:	88 23       	and	r24, r24
    3bb6:	09 f0       	breq	.+2      	; 0x3bba <f_getfree+0x58>
    3bb8:	02 c1       	rjmp	.+516    	; 0x3dbe <f_getfree+0x25c>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
    3bba:	f8 01       	movw	r30, r16
    3bbc:	86 85       	ldd	r24, Z+14	; 0x0e
    3bbe:	97 85       	ldd	r25, Z+15	; 0x0f
    3bc0:	a0 89       	ldd	r26, Z+16	; 0x10
    3bc2:	b1 89       	ldd	r27, Z+17	; 0x11
    3bc4:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3bc6:	d3 8c       	ldd	r13, Z+27	; 0x1b
    3bc8:	e4 8c       	ldd	r14, Z+28	; 0x1c
    3bca:	f5 8c       	ldd	r15, Z+29	; 0x1d
    3bcc:	b7 01       	movw	r22, r14
    3bce:	a6 01       	movw	r20, r12
    3bd0:	42 50       	subi	r20, 0x02	; 2
    3bd2:	50 40       	sbci	r21, 0x00	; 0
    3bd4:	60 40       	sbci	r22, 0x00	; 0
    3bd6:	70 40       	sbci	r23, 0x00	; 0
    3bd8:	48 17       	cp	r20, r24
    3bda:	59 07       	cpc	r21, r25
    3bdc:	6a 07       	cpc	r22, r26
    3bde:	7b 07       	cpc	r23, r27
    3be0:	30 f0       	brcs	.+12     	; 0x3bee <f_getfree+0x8c>
			*nclst = fs->free_clust;
    3be2:	f1 01       	movw	r30, r2
    3be4:	80 83       	st	Z, r24
    3be6:	91 83       	std	Z+1, r25	; 0x01
    3be8:	a2 83       	std	Z+2, r26	; 0x02
    3bea:	b3 83       	std	Z+3, r27	; 0x03
    3bec:	e8 c0       	rjmp	.+464    	; 0x3dbe <f_getfree+0x25c>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
    3bee:	a0 80       	ld	r10, Z
			n = 0;
			if (fat == FS_FAT12) {
    3bf0:	b1 e0       	ldi	r27, 0x01	; 1
    3bf2:	ab 16       	cp	r10, r27
    3bf4:	d9 f5       	brne	.+118    	; 0x3c6c <f_getfree+0x10a>
    3bf6:	cc 24       	eor	r12, r12
    3bf8:	dd 24       	eor	r13, r13
    3bfa:	76 01       	movw	r14, r12
    3bfc:	68 94       	set
    3bfe:	c1 f8       	bld	r12, 1
    3c00:	44 24       	eor	r4, r4
    3c02:	55 24       	eor	r5, r5
    3c04:	32 01       	movw	r6, r4
				clst = 2;
				do {
					stat = get_fat(fs, clst);
    3c06:	c8 01       	movw	r24, r16
    3c08:	b7 01       	movw	r22, r14
    3c0a:	a6 01       	movw	r20, r12
    3c0c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3c14:	8f 3f       	cpi	r24, 0xFF	; 255
    3c16:	ef ef       	ldi	r30, 0xFF	; 255
    3c18:	9e 07       	cpc	r25, r30
    3c1a:	ef ef       	ldi	r30, 0xFF	; 255
    3c1c:	ae 07       	cpc	r26, r30
    3c1e:	ef ef       	ldi	r30, 0xFF	; 255
    3c20:	be 07       	cpc	r27, r30
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <f_getfree+0xc4>
    3c24:	ae c0       	rjmp	.+348    	; 0x3d82 <f_getfree+0x220>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3c26:	81 30       	cpi	r24, 0x01	; 1
    3c28:	91 05       	cpc	r25, r1
    3c2a:	a1 05       	cpc	r26, r1
    3c2c:	b1 05       	cpc	r27, r1
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <f_getfree+0xd0>
    3c30:	ab c0       	rjmp	.+342    	; 0x3d88 <f_getfree+0x226>
					if (stat == 0) n++;
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	a1 05       	cpc	r26, r1
    3c36:	b1 05       	cpc	r27, r1
    3c38:	29 f4       	brne	.+10     	; 0x3c44 <f_getfree+0xe2>
    3c3a:	08 94       	sec
    3c3c:	41 1c       	adc	r4, r1
    3c3e:	51 1c       	adc	r5, r1
    3c40:	61 1c       	adc	r6, r1
    3c42:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    3c44:	08 94       	sec
    3c46:	c1 1c       	adc	r12, r1
    3c48:	d1 1c       	adc	r13, r1
    3c4a:	e1 1c       	adc	r14, r1
    3c4c:	f1 1c       	adc	r15, r1
    3c4e:	f8 01       	movw	r30, r16
    3c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c52:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c54:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c56:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c58:	c8 16       	cp	r12, r24
    3c5a:	d9 06       	cpc	r13, r25
    3c5c:	ea 06       	cpc	r14, r26
    3c5e:	fb 06       	cpc	r15, r27
    3c60:	90 f2       	brcs	.-92     	; 0x3c06 <f_getfree+0xa4>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    3c62:	46 86       	std	Z+14, r4	; 0x0e
    3c64:	57 86       	std	Z+15, r5	; 0x0f
    3c66:	60 8a       	std	Z+16, r6	; 0x10
    3c68:	71 8a       	std	Z+17, r7	; 0x11
    3c6a:	a4 c0       	rjmp	.+328    	; 0x3db4 <f_getfree+0x252>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    3c6c:	82 a1       	lds	r24, 0x42
    3c6e:	93 a1       	lds	r25, 0x43
    3c70:	a4 a1       	lds	r26, 0x44
    3c72:	b5 a1       	lds	r27, 0x45
    3c74:	8b 83       	std	Y+3, r24	; 0x03
    3c76:	9c 83       	std	Y+4, r25	; 0x04
    3c78:	ad 83       	std	Y+5, r26	; 0x05
    3c7a:	be 83       	std	Y+6, r27	; 0x06
				i = 0; p = 0;
    3c7c:	e0 e0       	ldi	r30, 0x00	; 0
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
    3c84:	44 24       	eor	r4, r4
    3c86:	55 24       	eor	r5, r5
    3c88:	32 01       	movw	r6, r4
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
    3c8a:	a8 01       	movw	r20, r16
    3c8c:	4e 5c       	subi	r20, 0xCE	; 206
    3c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c90:	5a 87       	std	Y+10, r21	; 0x0a
    3c92:	49 87       	std	Y+9, r20	; 0x09
						i = SS(fs);
    3c94:	3c 86       	std	Y+12, r3	; 0x0c
    3c96:	2b 86       	std	Y+11, r2	; 0x0b
    3c98:	18 01       	movw	r2, r16
    3c9a:	0a 2d       	mov	r16, r10
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    3c9c:	21 15       	cp	r18, r1
    3c9e:	31 05       	cpc	r19, r1
    3ca0:	c9 f4       	brne	.+50     	; 0x3cd4 <f_getfree+0x172>
						res = move_window(fs, sect++);
    3ca2:	c1 01       	movw	r24, r2
    3ca4:	4b 81       	ldd	r20, Y+3	; 0x03
    3ca6:	5c 81       	ldd	r21, Y+4	; 0x04
    3ca8:	6d 81       	ldd	r22, Y+5	; 0x05
    3caa:	7e 81       	ldd	r23, Y+6	; 0x06
    3cac:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
						if (res != FR_OK) break;
    3cb0:	88 23       	and	r24, r24
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <f_getfree+0x154>
    3cb4:	6d c0       	rjmp	.+218    	; 0x3d90 <f_getfree+0x22e>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	ad 81       	ldd	r26, Y+5	; 0x05
    3cbc:	be 81       	ldd	r27, Y+6	; 0x06
    3cbe:	01 96       	adiw	r24, 0x01	; 1
    3cc0:	a1 1d       	adc	r26, r1
    3cc2:	b1 1d       	adc	r27, r1
    3cc4:	8b 83       	std	Y+3, r24	; 0x03
    3cc6:	9c 83       	std	Y+4, r25	; 0x04
    3cc8:	ad 83       	std	Y+5, r26	; 0x05
    3cca:	be 83       	std	Y+6, r27	; 0x06
						if (res != FR_OK) break;
						p = fs->win;
    3ccc:	e9 85       	ldd	r30, Y+9	; 0x09
    3cce:	fa 85       	ldd	r31, Y+10	; 0x0a
						i = SS(fs);
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    3cd4:	02 30       	cpi	r16, 0x02	; 2
    3cd6:	a1 f4       	brne	.+40     	; 0x3d00 <f_getfree+0x19e>
						if (LD_WORD(p) == 0) n++;
    3cd8:	91 81       	ldd	r25, Z+1	; 0x01
    3cda:	98 87       	std	Y+8, r25	; 0x08
    3cdc:	1f 82       	std	Y+7, r1	; 0x07
    3cde:	80 81       	ld	r24, Z
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	af 81       	ldd	r26, Y+7	; 0x07
    3ce4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ce6:	8a 2b       	or	r24, r26
    3ce8:	9b 2b       	or	r25, r27
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	29 f4       	brne	.+10     	; 0x3cf8 <f_getfree+0x196>
    3cee:	08 94       	sec
    3cf0:	41 1c       	adc	r4, r1
    3cf2:	51 1c       	adc	r5, r1
    3cf4:	61 1c       	adc	r6, r1
    3cf6:	71 1c       	adc	r7, r1
						p += 2; i -= 2;
    3cf8:	32 96       	adiw	r30, 0x02	; 2
    3cfa:	22 50       	subi	r18, 0x02	; 2
    3cfc:	30 40       	sbci	r19, 0x00	; 0
    3cfe:	31 c0       	rjmp	.+98     	; 0x3d62 <f_getfree+0x200>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3d00:	83 81       	ldd	r24, Z+3	; 0x03
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	a0 e0       	ldi	r26, 0x00	; 0
    3d06:	b0 e0       	ldi	r27, 0x00	; 0
    3d08:	78 2f       	mov	r23, r24
    3d0a:	66 27       	eor	r22, r22
    3d0c:	55 27       	eor	r21, r21
    3d0e:	44 27       	eor	r20, r20
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	a0 e0       	ldi	r26, 0x00	; 0
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	dc 01       	movw	r26, r24
    3d1a:	99 27       	eor	r25, r25
    3d1c:	88 27       	eor	r24, r24
    3d1e:	48 2b       	or	r20, r24
    3d20:	59 2b       	or	r21, r25
    3d22:	6a 2b       	or	r22, r26
    3d24:	7b 2b       	or	r23, r27
    3d26:	80 81       	ld	r24, Z
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a0 e0       	ldi	r26, 0x00	; 0
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	84 2b       	or	r24, r20
    3d30:	95 2b       	or	r25, r21
    3d32:	a6 2b       	or	r26, r22
    3d34:	b7 2b       	or	r27, r23
    3d36:	91 80       	ldd	r9, Z+1	; 0x01
    3d38:	88 24       	eor	r8, r8
    3d3a:	a4 01       	movw	r20, r8
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	84 2b       	or	r24, r20
    3d42:	95 2b       	or	r25, r21
    3d44:	a6 2b       	or	r26, r22
    3d46:	b7 2b       	or	r27, r23
    3d48:	bf 70       	andi	r27, 0x0F	; 15
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	a1 05       	cpc	r26, r1
    3d4e:	b1 05       	cpc	r27, r1
    3d50:	29 f4       	brne	.+10     	; 0x3d5c <f_getfree+0x1fa>
    3d52:	08 94       	sec
    3d54:	41 1c       	adc	r4, r1
    3d56:	51 1c       	adc	r5, r1
    3d58:	61 1c       	adc	r6, r1
    3d5a:	71 1c       	adc	r7, r1
						p += 4; i -= 4;
    3d5c:	34 96       	adiw	r30, 0x04	; 4
    3d5e:	24 50       	subi	r18, 0x04	; 4
    3d60:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    3d62:	08 94       	sec
    3d64:	c1 08       	sbc	r12, r1
    3d66:	d1 08       	sbc	r13, r1
    3d68:	e1 08       	sbc	r14, r1
    3d6a:	f1 08       	sbc	r15, r1
    3d6c:	c1 14       	cp	r12, r1
    3d6e:	d1 04       	cpc	r13, r1
    3d70:	e1 04       	cpc	r14, r1
    3d72:	f1 04       	cpc	r15, r1
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <f_getfree+0x216>
    3d76:	92 cf       	rjmp	.-220    	; 0x3c9c <f_getfree+0x13a>
    3d78:	a0 2e       	mov	r10, r16
    3d7a:	81 01       	movw	r16, r2
    3d7c:	2b 84       	ldd	r2, Y+11	; 0x0b
    3d7e:	3c 84       	ldd	r3, Y+12	; 0x0c
    3d80:	0c c0       	rjmp	.+24     	; 0x3d9a <f_getfree+0x238>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3d82:	bb 24       	eor	r11, r11
    3d84:	b3 94       	inc	r11
    3d86:	09 c0       	rjmp	.+18     	; 0x3d9a <f_getfree+0x238>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3d88:	bb 24       	eor	r11, r11
    3d8a:	68 94       	set
    3d8c:	b1 f8       	bld	r11, 1
    3d8e:	05 c0       	rjmp	.+10     	; 0x3d9a <f_getfree+0x238>
    3d90:	a0 2e       	mov	r10, r16
    3d92:	81 01       	movw	r16, r2
    3d94:	2b 84       	ldd	r2, Y+11	; 0x0b
    3d96:	3c 84       	ldd	r3, Y+12	; 0x0c
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    3d98:	b8 2e       	mov	r11, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    3d9a:	f8 01       	movw	r30, r16
    3d9c:	46 86       	std	Z+14, r4	; 0x0e
    3d9e:	57 86       	std	Z+15, r5	; 0x0f
    3da0:	60 8a       	std	Z+16, r6	; 0x10
    3da2:	71 8a       	std	Z+17, r7	; 0x11
			if (fat == FS_FAT32) fs->fsi_flag = 1;
    3da4:	f3 e0       	ldi	r31, 0x03	; 3
    3da6:	af 16       	cp	r10, r31
    3da8:	29 f4       	brne	.+10     	; 0x3db4 <f_getfree+0x252>
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	d8 01       	movw	r26, r16
    3dae:	15 96       	adiw	r26, 0x05	; 5
    3db0:	8c 93       	st	X, r24
    3db2:	15 97       	sbiw	r26, 0x05	; 5
			*nclst = n;
    3db4:	f1 01       	movw	r30, r2
    3db6:	40 82       	st	Z, r4
    3db8:	51 82       	std	Z+1, r5	; 0x01
    3dba:	62 82       	std	Z+2, r6	; 0x02
    3dbc:	73 82       	std	Z+3, r7	; 0x03
		}
	}
	LEAVE_FF(fs, res);
}
    3dbe:	8b 2d       	mov	r24, r11
    3dc0:	2c 96       	adiw	r28, 0x0c	; 12
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	f8 94       	cli
    3dc6:	de bf       	out	0x3e, r29	; 62
    3dc8:	0f be       	out	0x3f, r0	; 63
    3dca:	cd bf       	out	0x3d, r28	; 61
    3dcc:	df 91       	pop	r29
    3dce:	cf 91       	pop	r28
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	ff 90       	pop	r15
    3dd6:	ef 90       	pop	r14
    3dd8:	df 90       	pop	r13
    3dda:	cf 90       	pop	r12
    3ddc:	bf 90       	pop	r11
    3dde:	af 90       	pop	r10
    3de0:	9f 90       	pop	r9
    3de2:	8f 90       	pop	r8
    3de4:	7f 90       	pop	r7
    3de6:	6f 90       	pop	r6
    3de8:	5f 90       	pop	r5
    3dea:	4f 90       	pop	r4
    3dec:	3f 90       	pop	r3
    3dee:	2f 90       	pop	r2
    3df0:	08 95       	ret

00003df2 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    3df2:	cf 92       	push	r12
    3df4:	df 92       	push	r13
    3df6:	ef 92       	push	r14
    3df8:	ff 92       	push	r15
    3dfa:	0f 93       	push	r16
    3dfc:	1f 93       	push	r17
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    3e04:	00 97       	sbiw	r24, 0x00	; 0
    3e06:	09 f4       	brne	.+2      	; 0x3e0a <f_truncate+0x18>
    3e08:	69 c0       	rjmp	.+210    	; 0x3edc <f_truncate+0xea>

	res = validate(fp);						/* Check validity of the object */
    3e0a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <validate>
	if (res == FR_OK) {
    3e0e:	88 23       	and	r24, r24
    3e10:	09 f0       	breq	.+2      	; 0x3e14 <f_truncate+0x22>
    3e12:	65 c0       	rjmp	.+202    	; 0x3ede <f_truncate+0xec>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    3e14:	9c 81       	ldd	r25, Y+4	; 0x04
    3e16:	99 23       	and	r25, r25
    3e18:	24 f0       	brlt	.+8      	; 0x3e22 <f_truncate+0x30>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    3e1a:	91 fd       	sbrc	r25, 1
    3e1c:	69 c0       	rjmp	.+210    	; 0x3ef0 <f_truncate+0xfe>
				res = FR_DENIED;
    3e1e:	87 e0       	ldi	r24, 0x07	; 7
    3e20:	5e c0       	rjmp	.+188    	; 0x3ede <f_truncate+0xec>
	if (!fp) return FR_INVALID_OBJECT;

	res = validate(fp);						/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	5c c0       	rjmp	.+184    	; 0x3ede <f_truncate+0xec>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    3e26:	4a 87       	std	Y+10, r20	; 0x0a
    3e28:	5b 87       	std	Y+11, r21	; 0x0b
    3e2a:	6c 87       	std	Y+12, r22	; 0x0c
    3e2c:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    3e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e30:	80 62       	ori	r24, 0x20	; 32
    3e32:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    3e34:	41 15       	cp	r20, r1
    3e36:	51 05       	cpc	r21, r1
    3e38:	61 05       	cpc	r22, r1
    3e3a:	71 05       	cpc	r23, r1
    3e3c:	69 f4       	brne	.+26     	; 0x3e58 <f_truncate+0x66>
				res = remove_chain(fp->fs, fp->sclust);
    3e3e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e40:	5f 85       	ldd	r21, Y+15	; 0x0f
    3e42:	68 89       	ldd	r22, Y+16	; 0x10
    3e44:	79 89       	ldd	r23, Y+17	; 0x11
    3e46:	88 81       	ld	r24, Y
    3e48:	99 81       	ldd	r25, Y+1	; 0x01
    3e4a:	0e 94 20 14 	call	0x2840	; 0x2840 <remove_chain>
				fp->sclust = 0;
    3e4e:	1e 86       	std	Y+14, r1	; 0x0e
    3e50:	1f 86       	std	Y+15, r1	; 0x0f
    3e52:	18 8a       	std	Y+16, r1	; 0x10
    3e54:	19 8a       	std	Y+17, r1	; 0x11
    3e56:	3c c0       	rjmp	.+120    	; 0x3ed0 <f_truncate+0xde>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    3e58:	4a 89       	ldd	r20, Y+18	; 0x12
    3e5a:	5b 89       	ldd	r21, Y+19	; 0x13
    3e5c:	6c 89       	ldd	r22, Y+20	; 0x14
    3e5e:	7d 89       	ldd	r23, Y+21	; 0x15
    3e60:	88 81       	ld	r24, Y
    3e62:	99 81       	ldd	r25, Y+1	; 0x01
    3e64:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <get_fat>
    3e68:	6b 01       	movw	r12, r22
    3e6a:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	c8 16       	cp	r12, r24
    3e70:	d1 04       	cpc	r13, r1
    3e72:	e1 04       	cpc	r14, r1
    3e74:	f1 04       	cpc	r15, r1
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <f_truncate+0x88>
    3e78:	4a c0       	rjmp	.+148    	; 0x3f0e <f_truncate+0x11c>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	9f ef       	ldi	r25, 0xFF	; 255
    3e7e:	c9 16       	cp	r12, r25
    3e80:	9f ef       	ldi	r25, 0xFF	; 255
    3e82:	d9 06       	cpc	r13, r25
    3e84:	9f ef       	ldi	r25, 0xFF	; 255
    3e86:	e9 06       	cpc	r14, r25
    3e88:	9f ef       	ldi	r25, 0xFF	; 255
    3e8a:	f9 06       	cpc	r15, r25
    3e8c:	09 f0       	breq	.+2      	; 0x3e90 <f_truncate+0x9e>
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    3e90:	88 23       	and	r24, r24
    3e92:	01 f5       	brne	.+64     	; 0x3ed4 <f_truncate+0xe2>
    3e94:	e8 81       	ld	r30, Y
    3e96:	f9 81       	ldd	r31, Y+1	; 0x01
    3e98:	42 8d       	ldd	r20, Z+26	; 0x1a
    3e9a:	53 8d       	ldd	r21, Z+27	; 0x1b
    3e9c:	64 8d       	ldd	r22, Z+28	; 0x1c
    3e9e:	75 8d       	ldd	r23, Z+29	; 0x1d
    3ea0:	c4 16       	cp	r12, r20
    3ea2:	d5 06       	cpc	r13, r21
    3ea4:	e6 06       	cpc	r14, r22
    3ea6:	f7 06       	cpc	r15, r23
    3ea8:	d0 f4       	brcc	.+52     	; 0x3ede <f_truncate+0xec>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    3eaa:	4a 89       	ldd	r20, Y+18	; 0x12
    3eac:	5b 89       	ldd	r21, Y+19	; 0x13
    3eae:	6c 89       	ldd	r22, Y+20	; 0x14
    3eb0:	7d 89       	ldd	r23, Y+21	; 0x15
    3eb2:	cf 01       	movw	r24, r30
    3eb4:	0f ef       	ldi	r16, 0xFF	; 255
    3eb6:	1f ef       	ldi	r17, 0xFF	; 255
    3eb8:	2f ef       	ldi	r18, 0xFF	; 255
    3eba:	3f e0       	ldi	r19, 0x0F	; 15
    3ebc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    3ec0:	88 23       	and	r24, r24
    3ec2:	41 f4       	brne	.+16     	; 0x3ed4 <f_truncate+0xe2>
    3ec4:	88 81       	ld	r24, Y
    3ec6:	99 81       	ldd	r25, Y+1	; 0x01
    3ec8:	b7 01       	movw	r22, r14
    3eca:	a6 01       	movw	r20, r12
    3ecc:	0e 94 20 14 	call	0x2840	; 0x2840 <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    3ed0:	88 23       	and	r24, r24
    3ed2:	29 f0       	breq	.+10     	; 0x3ede <f_truncate+0xec>
    3ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed6:	90 68       	ori	r25, 0x80	; 128
    3ed8:	9c 83       	std	Y+4, r25	; 0x04
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <f_truncate+0xec>
{
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    3edc:	89 e0       	ldi	r24, 0x09	; 9
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
	}

	LEAVE_FF(fp->fs, res);
}
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	ff 90       	pop	r15
    3ee8:	ef 90       	pop	r14
    3eea:	df 90       	pop	r13
    3eec:	cf 90       	pop	r12
    3eee:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    3ef0:	4e 81       	ldd	r20, Y+6	; 0x06
    3ef2:	5f 81       	ldd	r21, Y+7	; 0x07
    3ef4:	68 85       	ldd	r22, Y+8	; 0x08
    3ef6:	79 85       	ldd	r23, Y+9	; 0x09
    3ef8:	0a 85       	ldd	r16, Y+10	; 0x0a
    3efa:	1b 85       	ldd	r17, Y+11	; 0x0b
    3efc:	2c 85       	ldd	r18, Y+12	; 0x0c
    3efe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f00:	40 17       	cp	r20, r16
    3f02:	51 07       	cpc	r21, r17
    3f04:	62 07       	cpc	r22, r18
    3f06:	73 07       	cpc	r23, r19
    3f08:	08 f4       	brcc	.+2      	; 0x3f0c <f_truncate+0x11a>
    3f0a:	8d cf       	rjmp	.-230    	; 0x3e26 <f_truncate+0x34>
    3f0c:	e8 cf       	rjmp	.-48     	; 0x3ede <f_truncate+0xec>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3f0e:	82 e0       	ldi	r24, 0x02	; 2
    3f10:	e1 cf       	rjmp	.-62     	; 0x3ed4 <f_truncate+0xe2>

00003f12 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    3f12:	cf 92       	push	r12
    3f14:	df 92       	push	r13
    3f16:	ef 92       	push	r14
    3f18:	ff 92       	push	r15
    3f1a:	1f 93       	push	r17
    3f1c:	cf 93       	push	r28
    3f1e:	df 93       	push	r29
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	ea 97       	sbiw	r28, 0x3a	; 58
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	9a af       	sts	0x7a, r25
    3f32:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3f34:	ce 01       	movw	r24, r28
    3f36:	c9 96       	adiw	r24, 0x39	; 57
    3f38:	be 01       	movw	r22, r28
    3f3a:	6f 5f       	subi	r22, 0xFF	; 255
    3f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3e:	41 e0       	ldi	r20, 0x01	; 1
    3f40:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
	if (res == FR_OK) {
    3f44:	88 23       	and	r24, r24
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <f_unlink+0x38>
    3f48:	61 c0       	rjmp	.+194    	; 0x400c <f_unlink+0xfa>
		INIT_BUF(dj);
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	8d 96       	adiw	r24, 0x2d	; 45
    3f4e:	9e 8b       	std	Y+22, r25	; 0x16
    3f50:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3f52:	69 ad       	sts	0x69, r22
    3f54:	7a ad       	sts	0x6a, r23
    3f56:	ce 01       	movw	r24, r28
    3f58:	01 96       	adiw	r24, 0x01	; 1
    3f5a:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3f5e:	88 23       	and	r24, r24
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <f_unlink+0x52>
    3f62:	54 c0       	rjmp	.+168    	; 0x400c <f_unlink+0xfa>
    3f64:	ed 89       	ldd	r30, Y+21	; 0x15
    3f66:	fe 89       	ldd	r31, Y+22	; 0x16
    3f68:	83 85       	ldd	r24, Z+11	; 0x0b
    3f6a:	85 ff       	sbrs	r24, 5
    3f6c:	5d c0       	rjmp	.+186    	; 0x4028 <f_unlink+0x116>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    3f6e:	86 e0       	ldi	r24, 0x06	; 6
    3f70:	4d c0       	rjmp	.+154    	; 0x400c <f_unlink+0xfa>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3f72:	fb 01       	movw	r30, r22
    3f74:	13 85       	ldd	r17, Z+11	; 0x0b
    3f76:	10 ff       	sbrs	r17, 0
    3f78:	5e c0       	rjmp	.+188    	; 0x4036 <f_unlink+0x124>
					res = FR_DENIED;		/* Cannot remove R/O object */
    3f7a:	87 e0       	ldi	r24, 0x07	; 7
    3f7c:	47 c0       	rjmp	.+142    	; 0x400c <f_unlink+0xfa>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    3f7e:	86 e0       	ldi	r24, 0x06	; 6
    3f80:	45 c0       	rjmp	.+138    	; 0x400c <f_unlink+0xfa>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    3f82:	f2 e0       	ldi	r31, 0x02	; 2
    3f84:	cf 16       	cp	r12, r31
    3f86:	d1 04       	cpc	r13, r1
    3f88:	e1 04       	cpc	r14, r1
    3f8a:	f1 04       	cpc	r15, r1
    3f8c:	08 f4       	brcc	.+2      	; 0x3f90 <f_unlink+0x7e>
    3f8e:	5c c0       	rjmp	.+184    	; 0x4048 <f_unlink+0x136>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
    3f90:	ce 01       	movw	r24, r28
    3f92:	47 96       	adiw	r24, 0x17	; 23
    3f94:	be 01       	movw	r22, r28
    3f96:	6f 5f       	subi	r22, 0xFF	; 255
    3f98:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9a:	46 e1       	ldi	r20, 0x16	; 22
    3f9c:	50 e0       	ldi	r21, 0x00	; 0
    3f9e:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
					sdj.sclust = dclst;
    3fa2:	cd 8e       	std	Y+29, r12	; 0x1d
    3fa4:	de 8e       	std	Y+30, r13	; 0x1e
    3fa6:	ef 8e       	std	Y+31, r14	; 0x1f
    3fa8:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3faa:	ce 01       	movw	r24, r28
    3fac:	47 96       	adiw	r24, 0x17	; 23
    3fae:	62 e0       	ldi	r22, 0x02	; 2
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dir_sdi>
					if (res == FR_OK) {
    3fb6:	88 23       	and	r24, r24
    3fb8:	49 f5       	brne	.+82     	; 0x400c <f_unlink+0xfa>
						res = dir_read(&sdj);
    3fba:	ce 01       	movw	r24, r28
    3fbc:	47 96       	adiw	r24, 0x17	; 23
    3fbe:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <dir_read>
						if (res == FR_OK		/* Not empty dir */
    3fc2:	88 23       	and	r24, r24
    3fc4:	71 f0       	breq	.+28     	; 0x3fe2 <f_unlink+0xd0>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    3fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    3fca:	46 89       	ldd	r20, Z+22	; 0x16
    3fcc:	57 89       	ldd	r21, Z+23	; 0x17
    3fce:	60 8d       	ldd	r22, Z+24	; 0x18
    3fd0:	71 8d       	ldd	r23, Z+25	; 0x19
    3fd2:	4c 15       	cp	r20, r12
    3fd4:	5d 05       	cpc	r21, r13
    3fd6:	6e 05       	cpc	r22, r14
    3fd8:	7f 05       	cpc	r23, r15
    3fda:	29 f0       	breq	.+10     	; 0x3fe6 <f_unlink+0xd4>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    3fdc:	84 30       	cpi	r24, 0x04	; 4
    3fde:	b1 f1       	breq	.+108    	; 0x404c <f_unlink+0x13a>
    3fe0:	15 c0       	rjmp	.+42     	; 0x400c <f_unlink+0xfa>
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK		/* Not empty dir */
    3fe2:	87 e0       	ldi	r24, 0x07	; 7
    3fe4:	13 c0       	rjmp	.+38     	; 0x400c <f_unlink+0xfa>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    3fe6:	87 e0       	ldi	r24, 0x07	; 7
    3fe8:	11 c0       	rjmp	.+34     	; 0x400c <f_unlink+0xfa>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    3fea:	c1 14       	cp	r12, r1
    3fec:	d1 04       	cpc	r13, r1
    3fee:	e1 04       	cpc	r14, r1
    3ff0:	f1 04       	cpc	r15, r1
    3ff2:	41 f0       	breq	.+16     	; 0x4004 <f_unlink+0xf2>
						res = remove_chain(dj.fs, dclst);
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff8:	b7 01       	movw	r22, r14
    3ffa:	a6 01       	movw	r20, r12
    3ffc:	0e 94 20 14 	call	0x2840	; 0x2840 <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    4000:	88 23       	and	r24, r24
    4002:	21 f4       	brne	.+8      	; 0x400c <f_unlink+0xfa>
    4004:	89 81       	ldd	r24, Y+1	; 0x01
    4006:	9a 81       	ldd	r25, Y+2	; 0x02
    4008:	0e 94 9d 0b 	call	0x173a	; 0x173a <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    400c:	ea 96       	adiw	r28, 0x3a	; 58
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	1f 91       	pop	r17
    401e:	ff 90       	pop	r15
    4020:	ef 90       	pop	r14
    4022:	df 90       	pop	r13
    4024:	cf 90       	pop	r12
    4026:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    4028:	6b 89       	ldd	r22, Y+19	; 0x13
    402a:	7c 89       	ldd	r23, Y+20	; 0x14
			if (!dir) {
    402c:	61 15       	cp	r22, r1
    402e:	71 05       	cpc	r23, r1
    4030:	09 f0       	breq	.+2      	; 0x4034 <f_unlink+0x122>
    4032:	9f cf       	rjmp	.-194    	; 0x3f72 <f_unlink+0x60>
    4034:	a4 cf       	rjmp	.-184    	; 0x3f7e <f_unlink+0x6c>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    403e:	6b 01       	movw	r12, r22
    4040:	7c 01       	movw	r14, r24
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    4042:	14 fd       	sbrc	r17, 4
    4044:	9e cf       	rjmp	.-196    	; 0x3f82 <f_unlink+0x70>
    4046:	02 c0       	rjmp	.+4      	; 0x404c <f_unlink+0x13a>
				if (dclst < 2) {
					res = FR_INT_ERR;
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	e0 cf       	rjmp	.-64     	; 0x400c <f_unlink+0xfa>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    404c:	ce 01       	movw	r24, r28
    404e:	01 96       	adiw	r24, 0x01	; 1
    4050:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <dir_remove>
				if (res == FR_OK) {
    4054:	88 23       	and	r24, r24
    4056:	49 f2       	breq	.-110    	; 0x3fea <f_unlink+0xd8>
    4058:	d9 cf       	rjmp	.-78     	; 0x400c <f_unlink+0xfa>

0000405a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    405a:	2f 92       	push	r2
    405c:	3f 92       	push	r3
    405e:	4f 92       	push	r4
    4060:	5f 92       	push	r5
    4062:	6f 92       	push	r6
    4064:	7f 92       	push	r7
    4066:	8f 92       	push	r8
    4068:	9f 92       	push	r9
    406a:	af 92       	push	r10
    406c:	bf 92       	push	r11
    406e:	cf 92       	push	r12
    4070:	df 92       	push	r13
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	a8 97       	sbiw	r28, 0x28	; 40
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	9c a3       	lds	r25, 0x5c
    4090:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    4092:	0e 94 29 0c 	call	0x1852	; 0x1852 <get_fattime>
    4096:	6b 01       	movw	r12, r22
    4098:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    409a:	ce 01       	movw	r24, r28
    409c:	83 96       	adiw	r24, 0x23	; 35
    409e:	be 01       	movw	r22, r28
    40a0:	6f 5f       	subi	r22, 0xFF	; 255
    40a2:	7f 4f       	sbci	r23, 0xFF	; 255
    40a4:	41 e0       	ldi	r20, 0x01	; 1
    40a6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
    40aa:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    40ac:	88 23       	and	r24, r24
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <f_mkdir+0x58>
    40b0:	ee c0       	rjmp	.+476    	; 0x428e <__stack+0x18f>
		INIT_BUF(dj);
    40b2:	ce 01       	movw	r24, r28
    40b4:	47 96       	adiw	r24, 0x17	; 23
    40b6:	9e 8b       	std	Y+22, r25	; 0x16
    40b8:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    40ba:	6b a1       	lds	r22, 0x4b
    40bc:	7c a1       	lds	r23, 0x4c
    40be:	ce 01       	movw	r24, r28
    40c0:	01 96       	adiw	r24, 0x01	; 1
    40c2:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    40c6:	88 23       	and	r24, r24
    40c8:	49 f0       	breq	.+18     	; 0x40dc <f_mkdir+0x82>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    40ca:	84 30       	cpi	r24, 0x04	; 4
    40cc:	41 f4       	brne	.+16     	; 0x40de <f_mkdir+0x84>
    40ce:	ed 89       	ldd	r30, Y+21	; 0x15
    40d0:	fe 89       	ldd	r31, Y+22	; 0x16
    40d2:	83 85       	ldd	r24, Z+11	; 0x0b
    40d4:	85 ff       	sbrs	r24, 5
    40d6:	f5 c0       	rjmp	.+490    	; 0x42c2 <__stack+0x1c3>
			res = FR_INVALID_NAME;
    40d8:	86 e0       	ldi	r24, 0x06	; 6
    40da:	01 c0       	rjmp	.+2      	; 0x40de <f_mkdir+0x84>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    40dc:	88 e0       	ldi	r24, 0x08	; 8
				ST_DWORD(dir+DIR_WrtTime, tim);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
    40de:	18 2f       	mov	r17, r24
    40e0:	d6 c0       	rjmp	.+428    	; 0x428e <__stack+0x18f>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	48 16       	cp	r4, r24
    40e6:	51 04       	cpc	r5, r1
    40e8:	61 04       	cpc	r6, r1
    40ea:	71 04       	cpc	r7, r1
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <f_mkdir+0x96>
    40ee:	f9 c0       	rjmp	.+498    	; 0x42e2 <__stack+0x1e3>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    40f0:	ef ef       	ldi	r30, 0xFF	; 255
    40f2:	4e 16       	cp	r4, r30
    40f4:	ef ef       	ldi	r30, 0xFF	; 255
    40f6:	5e 06       	cpc	r5, r30
    40f8:	ef ef       	ldi	r30, 0xFF	; 255
    40fa:	6e 06       	cpc	r6, r30
    40fc:	ef ef       	ldi	r30, 0xFF	; 255
    40fe:	7e 06       	cpc	r7, r30
    4100:	09 f4       	brne	.+2      	; 0x4104 <__stack+0x5>
    4102:	f1 c0       	rjmp	.+482    	; 0x42e6 <__stack+0x1e7>
    4104:	01 c0       	rjmp	.+2      	; 0x4108 <__stack+0x9>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    4106:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    4108:	11 23       	and	r17, r17
    410a:	09 f0       	breq	.+2      	; 0x410e <__stack+0xf>
    410c:	a0 c0       	rjmp	.+320    	; 0x424e <__stack+0x14f>
				res = move_window(dj.fs, 0);
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	50 e0       	ldi	r21, 0x00	; 0
    4116:	ba 01       	movw	r22, r20
    4118:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    411c:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    411e:	88 23       	and	r24, r24
    4120:	09 f0       	breq	.+2      	; 0x4124 <__stack+0x25>
    4122:	95 c0       	rjmp	.+298    	; 0x424e <__stack+0x14f>
				dsc = clust2sect(dj.fs, dcl);
    4124:	09 81       	ldd	r16, Y+1	; 0x01
    4126:	1a 81       	ldd	r17, Y+2	; 0x02
    4128:	c8 01       	movw	r24, r16
    412a:	b3 01       	movw	r22, r6
    412c:	a2 01       	movw	r20, r4
    412e:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    4132:	4b 01       	movw	r8, r22
    4134:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    4136:	0f 2e       	mov	r0, r31
    4138:	f2 e3       	ldi	r31, 0x32	; 50
    413a:	2f 2e       	mov	r2, r31
    413c:	33 24       	eor	r3, r3
    413e:	f0 2d       	mov	r31, r0
    4140:	20 0e       	add	r2, r16
    4142:	31 1e       	adc	r3, r17
				mem_set(dir, 0, SS(dj.fs));
    4144:	c1 01       	movw	r24, r2
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	70 e0       	ldi	r23, 0x00	; 0
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	52 e0       	ldi	r21, 0x02	; 2
    414e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    4152:	c1 01       	movw	r24, r2
    4154:	60 e2       	ldi	r22, 0x20	; 32
    4156:	70 e0       	ldi	r23, 0x00	; 0
    4158:	4b e0       	ldi	r20, 0x0B	; 11
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
				dir[DIR_Name] = '.';
    4160:	8e e2       	ldi	r24, 0x2E	; 46
    4162:	f8 01       	movw	r30, r16
    4164:	82 ab       	sts	0x52, r24
				dir[DIR_Attr] = AM_DIR;
    4166:	80 e1       	ldi	r24, 0x10	; 16
    4168:	85 af       	sts	0x75, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    416a:	cd a2       	lds	r28, 0x9d
    416c:	e8 5b       	subi	r30, 0xB8	; 184
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	c0 82       	st	Z, r12
    4172:	8d 2d       	mov	r24, r13
    4174:	99 27       	eor	r25, r25
    4176:	8e a3       	lds	r24, 0x5e
    4178:	f8 01       	movw	r30, r16
    417a:	e7 5b       	subi	r30, 0xB7	; 183
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	80 83       	st	Z, r24
    4180:	c7 01       	movw	r24, r14
    4182:	aa 27       	eor	r26, r26
    4184:	bb 27       	eor	r27, r27
    4186:	8f a3       	lds	r24, 0x5f
    4188:	f8 01       	movw	r30, r16
    418a:	e6 5b       	subi	r30, 0xB6	; 182
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 83       	st	Z, r24
    4190:	cf 2c       	mov	r12, r15
    4192:	dd 24       	eor	r13, r13
    4194:	ee 24       	eor	r14, r14
    4196:	ff 24       	eor	r15, r15
    4198:	c8 a6       	lds	r28, 0xb8
    419a:	f8 01       	movw	r30, r16
    419c:	e5 5b       	subi	r30, 0xB5	; 181
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	c0 82       	st	Z, r12
				st_clust(dir, dcl);
    41a2:	c1 01       	movw	r24, r2
    41a4:	b3 01       	movw	r22, r6
    41a6:	a2 01       	movw	r20, r4
    41a8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <st_clust>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    41ac:	0f 2e       	mov	r0, r31
    41ae:	f2 e5       	ldi	r31, 0x52	; 82
    41b0:	cf 2e       	mov	r12, r31
    41b2:	dd 24       	eor	r13, r13
    41b4:	f0 2d       	mov	r31, r0
    41b6:	c0 0e       	add	r12, r16
    41b8:	d1 1e       	adc	r13, r17
    41ba:	c6 01       	movw	r24, r12
    41bc:	b1 01       	movw	r22, r2
    41be:	40 e2       	ldi	r20, 0x20	; 32
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    41c6:	f8 01       	movw	r30, r16
    41c8:	ed 5a       	subi	r30, 0xAD	; 173
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	8e e2       	ldi	r24, 0x2E	; 46
    41ce:	80 83       	st	Z, r24
    41d0:	4f 81       	ldd	r20, Y+7	; 0x07
    41d2:	58 85       	ldd	r21, Y+8	; 0x08
    41d4:	69 85       	ldd	r22, Y+9	; 0x09
    41d6:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    41d8:	e9 81       	ldd	r30, Y+1	; 0x01
    41da:	fa 81       	ldd	r31, Y+2	; 0x02
    41dc:	80 81       	ld	r24, Z
    41de:	83 30       	cpi	r24, 0x03	; 3
    41e0:	61 f4       	brne	.+24     	; 0x41fa <__stack+0xfb>
    41e2:	86 a1       	lds	r24, 0x46
    41e4:	97 a1       	lds	r25, 0x47
    41e6:	a0 a5       	lds	r26, 0x60
    41e8:	b1 a5       	lds	r27, 0x61
    41ea:	84 17       	cp	r24, r20
    41ec:	95 07       	cpc	r25, r21
    41ee:	a6 07       	cpc	r26, r22
    41f0:	b7 07       	cpc	r27, r23
    41f2:	19 f4       	brne	.+6      	; 0x41fa <__stack+0xfb>
					pcl = 0;
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	ba 01       	movw	r22, r20
				st_clust(dir+SZ_DIR, pcl);
    41fa:	c6 01       	movw	r24, r12
    41fc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4200:	e9 81       	ldd	r30, Y+1	; 0x01
    4202:	fa 81       	ldd	r31, Y+2	; 0x02
    4204:	02 81       	ldd	r16, Z+2	; 0x02
    4206:	00 23       	and	r16, r16
    4208:	09 f4       	brne	.+2      	; 0x420c <__stack+0x10d>
    420a:	6f c0       	rjmp	.+222    	; 0x42ea <__stack+0x1eb>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    420c:	cc 24       	eor	r12, r12
    420e:	c3 94       	inc	r12
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    4210:	89 81       	ldd	r24, Y+1	; 0x01
    4212:	9a 81       	ldd	r25, Y+2	; 0x02
    4214:	fc 01       	movw	r30, r24
    4216:	86 a6       	lds	r24, 0xb6
    4218:	97 a6       	lds	r25, 0xb7
    421a:	a0 aa       	sts	0x90, r26
    421c:	b1 aa       	sts	0x91, r27
    421e:	08 94       	sec
    4220:	81 1c       	adc	r8, r1
    4222:	91 1c       	adc	r9, r1
    4224:	a1 1c       	adc	r10, r1
    4226:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    4228:	c4 82       	std	Z+4, r12	; 0x04
					res = move_window(dj.fs, 0);
    422a:	40 e0       	ldi	r20, 0x00	; 0
    422c:	50 e0       	ldi	r21, 0x00	; 0
    422e:	ba 01       	movw	r22, r20
    4230:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
    4234:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    4236:	88 23       	and	r24, r24
    4238:	51 f4       	brne	.+20     	; 0x424e <__stack+0x14f>
					mem_set(dir, 0, SS(dj.fs));
    423a:	c1 01       	movw	r24, r2
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	52 e0       	ldi	r21, 0x02	; 2
    4244:	0e 94 1f 05 	call	0xa3e	; 0xa3e <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4248:	01 50       	subi	r16, 0x01	; 1
    424a:	11 f7       	brne	.-60     	; 0x4210 <__stack+0x111>
    424c:	4e c0       	rjmp	.+156    	; 0x42ea <__stack+0x1eb>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	b3 01       	movw	r22, r6
    4254:	a2 01       	movw	r20, r4
    4256:	0e 94 20 14 	call	0x2840	; 0x2840 <remove_chain>
    425a:	19 c0       	rjmp	.+50     	; 0x428e <__stack+0x18f>
			} else {
				dir = dj.dir;
    425c:	eb 89       	ldd	r30, Y+19	; 0x13
    425e:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    4260:	80 e1       	ldi	r24, 0x10	; 16
    4262:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    4264:	8d a1       	lds	r24, 0x4d
    4266:	86 8b       	std	Z+22, r24	; 0x16
    4268:	8e a1       	lds	r24, 0x4e
    426a:	87 8b       	std	Z+23, r24	; 0x17
    426c:	8f a1       	lds	r24, 0x4f
    426e:	80 8f       	std	Z+24, r24	; 0x18
    4270:	88 a5       	lds	r24, 0x68
    4272:	81 8f       	std	Z+25, r24	; 0x19
				st_clust(dir, dcl);					/* Table start cluster */
    4274:	cf 01       	movw	r24, r30
    4276:	b3 01       	movw	r22, r6
    4278:	a2 01       	movw	r20, r4
    427a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <st_clust>
				dj.fs->wflag = 1;
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	9a 81       	ldd	r25, Y+2	; 0x02
    4282:	21 e0       	ldi	r18, 0x01	; 1
    4284:	fc 01       	movw	r30, r24
    4286:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4288:	0e 94 9d 0b 	call	0x173a	; 0x173a <sync>
    428c:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    428e:	81 2f       	mov	r24, r17
    4290:	a8 96       	adiw	r28, 0x28	; 40
    4292:	0f b6       	in	r0, 0x3f	; 63
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	ff 90       	pop	r15
    42a6:	ef 90       	pop	r14
    42a8:	df 90       	pop	r13
    42aa:	cf 90       	pop	r12
    42ac:	bf 90       	pop	r11
    42ae:	af 90       	pop	r10
    42b0:	9f 90       	pop	r9
    42b2:	8f 90       	pop	r8
    42b4:	7f 90       	pop	r7
    42b6:	6f 90       	pop	r6
    42b8:	5f 90       	pop	r5
    42ba:	4f 90       	pop	r4
    42bc:	3f 90       	pop	r3
    42be:	2f 90       	pop	r2
    42c0:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
    42c6:	40 e0       	ldi	r20, 0x00	; 0
    42c8:	50 e0       	ldi	r21, 0x00	; 0
    42ca:	ba 01       	movw	r22, r20
    42cc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <create_chain>
    42d0:	2b 01       	movw	r4, r22
    42d2:	3c 01       	movw	r6, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    42d4:	61 15       	cp	r22, r1
    42d6:	71 05       	cpc	r23, r1
    42d8:	81 05       	cpc	r24, r1
    42da:	91 05       	cpc	r25, r1
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <__stack+0x1e1>
    42de:	13 cf       	rjmp	.-474    	; 0x4106 <__stack+0x7>
    42e0:	00 cf       	rjmp	.-512    	; 0x40e2 <f_mkdir+0x88>
			if (dcl == 1) res = FR_INT_ERR;
    42e2:	12 e0       	ldi	r17, 0x02	; 2
    42e4:	b4 cf       	rjmp	.-152    	; 0x424e <__stack+0x14f>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    42e6:	11 e0       	ldi	r17, 0x01	; 1
    42e8:	b2 cf       	rjmp	.-156    	; 0x424e <__stack+0x14f>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    42ea:	ce 01       	movw	r24, r28
    42ec:	01 96       	adiw	r24, 0x01	; 1
    42ee:	0e 94 94 13 	call	0x2728	; 0x2728 <dir_register>
    42f2:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    42f4:	88 23       	and	r24, r24
    42f6:	09 f4       	brne	.+2      	; 0x42fa <__stack+0x1fb>
    42f8:	b1 cf       	rjmp	.-158    	; 0x425c <__stack+0x15d>
    42fa:	a9 cf       	rjmp	.-174    	; 0x424e <__stack+0x14f>

000042fc <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    42fc:	0f 93       	push	r16
    42fe:	1f 93       	push	r17
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
    4308:	a4 97       	sbiw	r28, 0x24	; 36
    430a:	0f b6       	in	r0, 0x3f	; 63
    430c:	f8 94       	cli
    430e:	de bf       	out	0x3e, r29	; 62
    4310:	0f be       	out	0x3f, r0	; 63
    4312:	cd bf       	out	0x3d, r28	; 61
    4314:	9c a3       	lds	r25, 0x5c
    4316:	8b a3       	lds	r24, 0x5b
    4318:	06 2f       	mov	r16, r22
    431a:	14 2f       	mov	r17, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    431c:	ce 01       	movw	r24, r28
    431e:	83 96       	adiw	r24, 0x23	; 35
    4320:	be 01       	movw	r22, r28
    4322:	6f 5f       	subi	r22, 0xFF	; 255
    4324:	7f 4f       	sbci	r23, 0xFF	; 255
    4326:	41 e0       	ldi	r20, 0x01	; 1
    4328:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
	if (res == FR_OK) {
    432c:	88 23       	and	r24, r24
    432e:	29 f5       	brne	.+74     	; 0x437a <f_chmod+0x7e>
		INIT_BUF(dj);
    4330:	ce 01       	movw	r24, r28
    4332:	47 96       	adiw	r24, 0x17	; 23
    4334:	9e 8b       	std	Y+22, r25	; 0x16
    4336:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    4338:	6b a1       	lds	r22, 0x4b
    433a:	7c a1       	lds	r23, 0x4c
    433c:	ce 01       	movw	r24, r28
    433e:	01 96       	adiw	r24, 0x01	; 1
    4340:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    4344:	88 23       	and	r24, r24
    4346:	c9 f4       	brne	.+50     	; 0x437a <f_chmod+0x7e>
    4348:	ed 89       	ldd	r30, Y+21	; 0x15
    434a:	fe 89       	ldd	r31, Y+22	; 0x16
    434c:	83 85       	ldd	r24, Z+11	; 0x0b
    434e:	85 ff       	sbrs	r24, 5
    4350:	1f c0       	rjmp	.+62     	; 0x4390 <f_chmod+0x94>
			res = FR_INVALID_NAME;
    4352:	86 e0       	ldi	r24, 0x06	; 6
    4354:	12 c0       	rjmp	.+36     	; 0x437a <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4356:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    4358:	91 2f       	mov	r25, r17
    435a:	90 95       	com	r25
    435c:	83 85       	ldd	r24, Z+11	; 0x0b
    435e:	89 23       	and	r24, r25
    4360:	01 23       	and	r16, r17
    4362:	18 2f       	mov	r17, r24
    4364:	10 2b       	or	r17, r16
    4366:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	9a 81       	ldd	r25, Y+2	; 0x02
    436c:	21 e0       	ldi	r18, 0x01	; 1
    436e:	fc 01       	movw	r30, r24
    4370:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4372:	0e 94 9d 0b 	call	0x173a	; 0x173a <sync>
    4376:	01 c0       	rjmp	.+2      	; 0x437a <f_chmod+0x7e>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    4378:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    437a:	a4 96       	adiw	r28, 0x24	; 36
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    4390:	eb 89       	ldd	r30, Y+19	; 0x13
    4392:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    4394:	30 97       	sbiw	r30, 0x00	; 0
    4396:	f9 f6       	brne	.-66     	; 0x4356 <f_chmod+0x5a>
    4398:	ef cf       	rjmp	.-34     	; 0x4378 <f_chmod+0x7c>

0000439a <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    439a:	0f 93       	push	r16
    439c:	1f 93       	push	r17
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	a4 97       	sbiw	r28, 0x24	; 36
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	f8 94       	cli
    43ac:	de bf       	out	0x3e, r29	; 62
    43ae:	0f be       	out	0x3f, r0	; 63
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	9c a3       	lds	r25, 0x5c
    43b4:	8b a3       	lds	r24, 0x5b
    43b6:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    43b8:	ce 01       	movw	r24, r28
    43ba:	83 96       	adiw	r24, 0x23	; 35
    43bc:	be 01       	movw	r22, r28
    43be:	6f 5f       	subi	r22, 0xFF	; 255
    43c0:	7f 4f       	sbci	r23, 0xFF	; 255
    43c2:	41 e0       	ldi	r20, 0x01	; 1
    43c4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
	if (res == FR_OK) {
    43c8:	88 23       	and	r24, r24
    43ca:	61 f5       	brne	.+88     	; 0x4424 <f_utime+0x8a>
		INIT_BUF(dj);
    43cc:	ce 01       	movw	r24, r28
    43ce:	47 96       	adiw	r24, 0x17	; 23
    43d0:	9e 8b       	std	Y+22, r25	; 0x16
    43d2:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    43d4:	6b a1       	lds	r22, 0x4b
    43d6:	7c a1       	lds	r23, 0x4c
    43d8:	ce 01       	movw	r24, r28
    43da:	01 96       	adiw	r24, 0x01	; 1
    43dc:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    43e0:	88 23       	and	r24, r24
    43e2:	01 f5       	brne	.+64     	; 0x4424 <f_utime+0x8a>
    43e4:	ed 89       	ldd	r30, Y+21	; 0x15
    43e6:	fe 89       	ldd	r31, Y+22	; 0x16
    43e8:	83 85       	ldd	r24, Z+11	; 0x0b
    43ea:	85 ff       	sbrs	r24, 5
    43ec:	26 c0       	rjmp	.+76     	; 0x443a <f_utime+0xa0>
			res = FR_INVALID_NAME;
    43ee:	86 e0       	ldi	r24, 0x06	; 6
    43f0:	19 c0       	rjmp	.+50     	; 0x4424 <f_utime+0x8a>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    43f2:	d8 01       	movw	r26, r16
    43f4:	16 96       	adiw	r26, 0x06	; 6
    43f6:	8c 91       	ld	r24, X
    43f8:	16 97       	sbiw	r26, 0x06	; 6
    43fa:	86 8b       	std	Z+22, r24	; 0x16
    43fc:	17 96       	adiw	r26, 0x07	; 7
    43fe:	8c 91       	ld	r24, X
    4400:	17 97       	sbiw	r26, 0x07	; 7
    4402:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4404:	14 96       	adiw	r26, 0x04	; 4
    4406:	8c 91       	ld	r24, X
    4408:	14 97       	sbiw	r26, 0x04	; 4
    440a:	80 8f       	std	Z+24, r24	; 0x18
    440c:	15 96       	adiw	r26, 0x05	; 5
    440e:	8c 91       	ld	r24, X
    4410:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	9a 81       	ldd	r25, Y+2	; 0x02
    4416:	21 e0       	ldi	r18, 0x01	; 1
    4418:	fc 01       	movw	r30, r24
    441a:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    441c:	0e 94 9d 0b 	call	0x173a	; 0x173a <sync>
    4420:	01 c0       	rjmp	.+2      	; 0x4424 <f_utime+0x8a>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    4422:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4424:	a4 96       	adiw	r28, 0x24	; 36
    4426:	0f b6       	in	r0, 0x3f	; 63
    4428:	f8 94       	cli
    442a:	de bf       	out	0x3e, r29	; 62
    442c:	0f be       	out	0x3f, r0	; 63
    442e:	cd bf       	out	0x3d, r28	; 61
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    443a:	eb 89       	ldd	r30, Y+19	; 0x13
    443c:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    443e:	30 97       	sbiw	r30, 0x00	; 0
    4440:	c1 f6       	brne	.-80     	; 0x43f2 <f_utime+0x58>
    4442:	ef cf       	rjmp	.-34     	; 0x4422 <f_utime+0x88>

00004444 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	cf 54       	subi	r28, 0x4F	; 79
    4456:	d0 40       	sbci	r29, 0x00	; 0
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	f8 94       	cli
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	cd bf       	out	0x3d, r28	; 61
    4462:	60 96       	adiw	r28, 0x10	; 16
    4464:	9f af       	sts	0x7f, r25
    4466:	8e af       	sts	0x7e, r24
    4468:	60 97       	sbiw	r28, 0x10	; 16
    446a:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    446c:	ce 01       	movw	r24, r28
    446e:	82 5b       	subi	r24, 0xB2	; 178
    4470:	9f 4f       	sbci	r25, 0xFF	; 255
    4472:	be 01       	movw	r22, r28
    4474:	6f 5f       	subi	r22, 0xFF	; 255
    4476:	7f 4f       	sbci	r23, 0xFF	; 255
    4478:	41 e0       	ldi	r20, 0x01	; 1
    447a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <chk_mounted>
	if (res == FR_OK) {
    447e:	88 23       	and	r24, r24
    4480:	09 f0       	breq	.+2      	; 0x4484 <f_rename+0x40>
    4482:	b1 c0       	rjmp	.+354    	; 0x45e6 <f_rename+0x1a2>
		djn.fs = djo.fs;
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	9a 81       	ldd	r25, Y+2	; 0x02
    4488:	98 8f       	std	Y+24, r25	; 0x18
    448a:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    448c:	ce 01       	movw	r24, r28
    448e:	8e 5b       	subi	r24, 0xBE	; 190
    4490:	9f 4f       	sbci	r25, 0xFF	; 255
    4492:	9e 8b       	std	Y+22, r25	; 0x16
    4494:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    4496:	60 96       	adiw	r28, 0x10	; 16
    4498:	6e ad       	sts	0x6e, r22
    449a:	7f ad       	sts	0x6f, r23
    449c:	60 97       	sbiw	r28, 0x10	; 16
    449e:	ce 01       	movw	r24, r28
    44a0:	01 96       	adiw	r24, 0x01	; 1
    44a2:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    44a6:	88 23       	and	r24, r24
    44a8:	09 f0       	breq	.+2      	; 0x44ac <f_rename+0x68>
    44aa:	9d c0       	rjmp	.+314    	; 0x45e6 <f_rename+0x1a2>
    44ac:	ed 89       	ldd	r30, Y+21	; 0x15
    44ae:	fe 89       	ldd	r31, Y+22	; 0x16
    44b0:	83 85       	ldd	r24, Z+11	; 0x0b
    44b2:	85 ff       	sbrs	r24, 5
    44b4:	a6 c0       	rjmp	.+332    	; 0x4602 <f_rename+0x1be>
			res = FR_INVALID_NAME;
    44b6:	86 e0       	ldi	r24, 0x06	; 6
    44b8:	96 c0       	rjmp	.+300    	; 0x45e6 <f_rename+0x1a2>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    44ba:	65 5f       	subi	r22, 0xF5	; 245
    44bc:	7f 4f       	sbci	r23, 0xFF	; 255
    44be:	ce 01       	movw	r24, r28
    44c0:	8d 96       	adiw	r24, 0x2d	; 45
    44c2:	45 e1       	ldi	r20, 0x15	; 21
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
    44ca:	ce 01       	movw	r24, r28
    44cc:	47 96       	adiw	r24, 0x17	; 23
    44ce:	be 01       	movw	r22, r28
    44d0:	6f 5f       	subi	r22, 0xFF	; 255
    44d2:	7f 4f       	sbci	r23, 0xFF	; 255
    44d4:	46 e1       	ldi	r20, 0x16	; 22
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
				res = follow_path(&djn, path_new);
    44dc:	ce 01       	movw	r24, r28
    44de:	47 96       	adiw	r24, 0x17	; 23
    44e0:	b8 01       	movw	r22, r16
    44e2:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    44e6:	88 23       	and	r24, r24
    44e8:	09 f4       	brne	.+2      	; 0x44ec <f_rename+0xa8>
    44ea:	7a c0       	rjmp	.+244    	; 0x45e0 <f_rename+0x19c>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    44ec:	84 30       	cpi	r24, 0x04	; 4
    44ee:	09 f0       	breq	.+2      	; 0x44f2 <f_rename+0xae>
    44f0:	7a c0       	rjmp	.+244    	; 0x45e6 <f_rename+0x1a2>
/* Start critical section that an interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    44f2:	ce 01       	movw	r24, r28
    44f4:	47 96       	adiw	r24, 0x17	; 23
    44f6:	0e 94 94 13 	call	0x2728	; 0x2728 <dir_register>
					if (res == FR_OK) {
    44fa:	88 23       	and	r24, r24
    44fc:	09 f0       	breq	.+2      	; 0x4500 <f_rename+0xbc>
    44fe:	73 c0       	rjmp	.+230    	; 0x45e6 <f_rename+0x1a2>
						dir = djn.dir;					/* Copy object information except for name */
    4500:	09 a5       	lds	r16, 0x69
    4502:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    4504:	c8 01       	movw	r24, r16
    4506:	0d 96       	adiw	r24, 0x0d	; 13
    4508:	be 01       	movw	r22, r28
    450a:	61 5d       	subi	r22, 0xD1	; 209
    450c:	7f 4f       	sbci	r23, 0xFF	; 255
    450e:	43 e1       	ldi	r20, 0x13	; 19
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	0e 94 12 05 	call	0xa24	; 0xa24 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    4516:	8d a5       	lds	r24, 0x6d
    4518:	80 62       	ori	r24, 0x20	; 32
    451a:	f8 01       	movw	r30, r16
    451c:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    451e:	e9 80       	ldd	r14, Y+1	; 0x01
    4520:	fa 80       	ldd	r15, Y+2	; 0x02
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	f7 01       	movw	r30, r14
    4526:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    4528:	4f 81       	ldd	r20, Y+7	; 0x07
    452a:	58 85       	ldd	r21, Y+8	; 0x08
    452c:	69 85       	ldd	r22, Y+9	; 0x09
    452e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4534:	af 8d       	ldd	r26, Y+31	; 0x1f
    4536:	b8 a1       	lds	r27, 0x48
    4538:	48 17       	cp	r20, r24
    453a:	59 07       	cpc	r21, r25
    453c:	6a 07       	cpc	r22, r26
    453e:	7b 07       	cpc	r23, r27
    4540:	09 f4       	brne	.+2      	; 0x4544 <f_rename+0x100>
    4542:	43 c0       	rjmp	.+134    	; 0x45ca <f_rename+0x186>
    4544:	f8 01       	movw	r30, r16
    4546:	83 85       	ldd	r24, Z+11	; 0x0b
    4548:	84 ff       	sbrs	r24, 4
    454a:	3f c0       	rjmp	.+126    	; 0x45ca <f_rename+0x186>
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
    454c:	c7 01       	movw	r24, r14
    454e:	b8 01       	movw	r22, r16
    4550:	0e 94 29 05 	call	0xa52	; 0xa52 <ld_clust>
    4554:	ab 01       	movw	r20, r22
    4556:	bc 01       	movw	r22, r24
    4558:	c7 01       	movw	r24, r14
    455a:	0e 94 2d 0c 	call	0x185a	; 0x185a <clust2sect>
    455e:	ab 01       	movw	r20, r22
    4560:	bc 01       	movw	r22, r24
							if (!dw) {
    4562:	41 15       	cp	r20, r1
    4564:	51 05       	cpc	r21, r1
    4566:	61 05       	cpc	r22, r1
    4568:	71 05       	cpc	r23, r1
    456a:	09 f4       	brne	.+2      	; 0x456e <f_rename+0x12a>
    456c:	51 c0       	rjmp	.+162    	; 0x4610 <f_rename+0x1cc>
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
    456e:	c7 01       	movw	r24, r14
    4570:	0e 94 17 0b 	call	0x162e	; 0x162e <move_window>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    4574:	e9 81       	ldd	r30, Y+1	; 0x01
    4576:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    4578:	88 23       	and	r24, r24
    457a:	a9 f5       	brne	.+106    	; 0x45e6 <f_rename+0x1a2>
    457c:	df 01       	movw	r26, r30
    457e:	ad 5a       	subi	r26, 0xAD	; 173
    4580:	bf 4f       	sbci	r27, 0xFF	; 255
    4582:	8c 91       	ld	r24, X
    4584:	8e 32       	cpi	r24, 0x2E	; 46
    4586:	09 f5       	brne	.+66     	; 0x45ca <f_rename+0x186>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
    4588:	80 81       	ld	r24, Z
    458a:	83 30       	cpi	r24, 0x03	; 3
    458c:	69 f4       	brne	.+26     	; 0x45a8 <f_rename+0x164>
    458e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4590:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4592:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4594:	78 a1       	lds	r23, 0x48
    4596:	86 a1       	lds	r24, 0x46
    4598:	97 a1       	lds	r25, 0x47
    459a:	a0 a5       	lds	r26, 0x60
    459c:	b1 a5       	lds	r27, 0x61
    459e:	48 17       	cp	r20, r24
    45a0:	59 07       	cpc	r21, r25
    45a2:	6a 07       	cpc	r22, r26
    45a4:	7b 07       	cpc	r23, r27
    45a6:	29 f0       	breq	.+10     	; 0x45b2 <f_rename+0x16e>
    45a8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    45aa:	5e 8d       	ldd	r21, Y+30	; 0x1e
    45ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    45ae:	78 a1       	lds	r23, 0x48
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <f_rename+0x174>
    45b2:	40 e0       	ldi	r20, 0x00	; 0
    45b4:	50 e0       	ldi	r21, 0x00	; 0
    45b6:	ba 01       	movw	r22, r20
									st_clust(dir, dw);
    45b8:	cf 01       	movw	r24, r30
    45ba:	8e 5a       	subi	r24, 0xAE	; 174
    45bc:	9f 4f       	sbci	r25, 0xFF	; 255
    45be:	0e 94 4e 05 	call	0xa9c	; 0xa9c <st_clust>
									djo.fs->wflag = 1;
    45c2:	e9 81       	ldd	r30, Y+1	; 0x01
    45c4:	fa 81       	ldd	r31, Y+2	; 0x02
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    45ca:	ce 01       	movw	r24, r28
    45cc:	01 96       	adiw	r24, 0x01	; 1
    45ce:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <dir_remove>
							if (res == FR_OK)
    45d2:	88 23       	and	r24, r24
    45d4:	41 f4       	brne	.+16     	; 0x45e6 <f_rename+0x1a2>
								res = sync(djo.fs);
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	9a 81       	ldd	r25, Y+2	; 0x02
    45da:	0e 94 9d 0b 	call	0x173a	; 0x173a <sync>
    45de:	03 c0       	rjmp	.+6      	; 0x45e6 <f_rename+0x1a2>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    45e0:	88 e0       	ldi	r24, 0x08	; 8
    45e2:	01 c0       	rjmp	.+2      	; 0x45e6 <f_rename+0x1a2>
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    45e4:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    45e6:	c1 5b       	subi	r28, 0xB1	; 177
    45e8:	df 4f       	sbci	r29, 0xFF	; 255
    45ea:	0f b6       	in	r0, 0x3f	; 63
    45ec:	f8 94       	cli
    45ee:	de bf       	out	0x3e, r29	; 62
    45f0:	0f be       	out	0x3f, r0	; 63
    45f2:	cd bf       	out	0x3d, r28	; 61
    45f4:	df 91       	pop	r29
    45f6:	cf 91       	pop	r28
    45f8:	1f 91       	pop	r17
    45fa:	0f 91       	pop	r16
    45fc:	ff 90       	pop	r15
    45fe:	ef 90       	pop	r14
    4600:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    4602:	6b 89       	ldd	r22, Y+19	; 0x13
    4604:	7c 89       	ldd	r23, Y+20	; 0x14
    4606:	61 15       	cp	r22, r1
    4608:	71 05       	cpc	r23, r1
    460a:	09 f0       	breq	.+2      	; 0x460e <f_rename+0x1ca>
    460c:	56 cf       	rjmp	.-340    	; 0x44ba <f_rename+0x76>
    460e:	ea cf       	rjmp	.-44     	; 0x45e4 <f_rename+0x1a0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	e9 cf       	rjmp	.-46     	; 0x45e6 <f_rename+0x1a2>

00004614 <fat_init>:
		errCode = f_write(&file, buff, 10, &bytesRead); //Will attempt to write string 'helloworld' to file (data.txt)
		errCode = f_close(&file);
    }
}

void fat_init(void){
    4614:	af 92       	push	r10
    4616:	bf 92       	push	r11
    4618:	cf 92       	push	r12
    461a:	df 92       	push	r13
    461c:	ef 92       	push	r14
    461e:	ff 92       	push	r15
    4620:	0f 93       	push	r16
    4622:	1f 93       	push	r17
    4624:	cf 93       	push	r28
    4626:	df 93       	push	r29
    errCode = -1;
    4628:	8f ef       	ldi	r24, 0xFF	; 255
    462a:	80 93 bc 01 	sts	0x01BC, r24

    while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
        errCode = f_mount(0, &fatfs);                       //mount drive number 0
    462e:	c6 ef       	ldi	r28, 0xF6	; 246
    4630:	d3 e0       	ldi	r29, 0x03	; 3
        errCode = f_opendir(&dir, "/");				    	//root directory
    4632:	0f ed       	ldi	r16, 0xDF	; 223
    4634:	13 e0       	ldi	r17, 0x03	; 3
    4636:	0f 2e       	mov	r0, r31
    4638:	f0 e1       	ldi	r31, 0x10	; 16
    463a:	ef 2e       	mov	r14, r31
    463c:	f1 e0       	ldi	r31, 0x01	; 1
    463e:	ff 2e       	mov	r15, r31
    4640:	f0 2d       	mov	r31, r0

        errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
    4642:	0f 2e       	mov	r0, r31
    4644:	fd eb       	ldi	r31, 0xBD	; 189
    4646:	cf 2e       	mov	r12, r31
    4648:	f1 e0       	ldi	r31, 0x01	; 1
    464a:	df 2e       	mov	r13, r31
    464c:	f0 2d       	mov	r31, r0
    464e:	0f 2e       	mov	r0, r31
    4650:	f2 e1       	ldi	r31, 0x12	; 18
    4652:	af 2e       	mov	r10, r31
    4654:	f1 e0       	ldi	r31, 0x01	; 1
    4656:	bf 2e       	mov	r11, r31
    4658:	f0 2d       	mov	r31, r0
}

void fat_init(void){
    errCode = -1;

    while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    465a:	19 c0       	rjmp	.+50     	; 0x468e <fat_init+0x7a>
        errCode = f_mount(0, &fatfs);                       //mount drive number 0
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	be 01       	movw	r22, r28
    4660:	0e 94 a2 14 	call	0x2944	; 0x2944 <f_mount>
    4664:	80 93 bc 01 	sts	0x01BC, r24
        errCode = f_opendir(&dir, "/");				    	//root directory
    4668:	c8 01       	movw	r24, r16
    466a:	b7 01       	movw	r22, r14
    466c:	0e 94 ae 1c 	call	0x395c	; 0x395c <f_opendir>
    4670:	80 93 bc 01 	sts	0x01BC, r24

        errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
    4674:	c6 01       	movw	r24, r12
    4676:	b5 01       	movw	r22, r10
    4678:	4a e0       	ldi	r20, 0x0A	; 10
    467a:	0e 94 b8 14 	call	0x2970	; 0x2970 <f_open>
    467e:	80 93 bc 01 	sts	0x01BC, r24
        if(errCode != FR_OK){
    4682:	88 23       	and	r24, r24
    4684:	21 f0       	breq	.+8      	; 0x468e <fat_init+0x7a>
            result=0; //used as a debugging flag
    4686:	10 92 28 01 	sts	0x0128, r1
    468a:	10 92 27 01 	sts	0x0127, r1
}

void fat_init(void){
    errCode = -1;

    while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    468e:	80 91 bc 01 	lds	r24, 0x01BC
    4692:	88 23       	and	r24, r24
    4694:	19 f7       	brne	.-58     	; 0x465c <fat_init+0x48>
        errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
        if(errCode != FR_OK){
            result=0; //used as a debugging flag
		}                                       
    }
}
    4696:	df 91       	pop	r29
    4698:	cf 91       	pop	r28
    469a:	1f 91       	pop	r17
    469c:	0f 91       	pop	r16
    469e:	ff 90       	pop	r15
    46a0:	ef 90       	pop	r14
    46a2:	df 90       	pop	r13
    46a4:	cf 90       	pop	r12
    46a6:	bf 90       	pop	r11
    46a8:	af 90       	pop	r10
    46aa:	08 95       	ret

000046ac <main>:
int result=1;
char buff[] = "helloworld";
int buff_stat;

int main(void)
{
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
    if(1)
    {
        //TODO:: Please write your application code 
		fat_init(); // Will Hang if SD not inserted
    46b0:	0e 94 0a 23 	call	0x4614	; 0x4614 <fat_init>
		
		errCode = f_write(&file, buff, 10, &bytesRead); //Will attempt to write string 'helloworld' to file (data.txt)
    46b4:	cd eb       	ldi	r28, 0xBD	; 189
    46b6:	d1 e0       	ldi	r29, 0x01	; 1
    46b8:	ce 01       	movw	r24, r28
    46ba:	6c e1       	ldi	r22, 0x1C	; 28
    46bc:	71 e0       	ldi	r23, 0x01	; 1
    46be:	4a e0       	ldi	r20, 0x0A	; 10
    46c0:	50 e0       	ldi	r21, 0x00	; 0
    46c2:	28 eb       	ldi	r18, 0xB8	; 184
    46c4:	31 e0       	ldi	r19, 0x01	; 1
    46c6:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <f_write>
    46ca:	80 93 bc 01 	sts	0x01BC, r24
		errCode = f_close(&file);
    46ce:	ce 01       	movw	r24, r28
    46d0:	0e 94 21 1a 	call	0x3442	; 0x3442 <f_close>
    46d4:	80 93 bc 01 	sts	0x01BC, r24
    }
}
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	df 91       	pop	r29
    46de:	cf 91       	pop	r28
    46e0:	08 95       	ret

000046e2 <uart_init>:
// 	UBRR0L = F_CPU / BAUD / 16 - 1;
// 	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
// 	
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    46e2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
    46e6:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    46ea:	e1 ec       	ldi	r30, 0xC1	; 193
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	88 e1       	ldi	r24, 0x18	; 24
    46f0:	80 83       	st	Z, r24
	
	UCSR0C = 0x06; //set asynchronous, no parity, one stop bit, 8 bit transfer.
    46f2:	86 e0       	ldi	r24, 0x06	; 6
    46f4:	80 93 c2 00 	sts	0x00C2, r24
	
	UCSR0B |= (1 << RXCIE0); //set RX interrupt on
    46f8:	80 81       	ld	r24, Z
    46fa:	80 68       	ori	r24, 0x80	; 128
    46fc:	80 83       	st	Z, r24
}
    46fe:	08 95       	ret

00004700 <uart_test>:

/* Get a received character */

uint8_t uart_test (void)
{
	return RxFifo.ct;
    4700:	80 91 34 01 	lds	r24, 0x0134
}
    4704:	08 95       	ret

00004706 <uart_get>:
uint8_t uart_get (void)
{
	uint8_t d, i;


	while (RxFifo.ct == 0) ;
    4706:	e4 e3       	ldi	r30, 0x34	; 52
    4708:	f1 e0       	ldi	r31, 0x01	; 1
    470a:	80 81       	ld	r24, Z
    470c:	88 23       	and	r24, r24
    470e:	e9 f3       	breq	.-6      	; 0x470a <uart_get+0x4>
	i = RxFifo.ri;
    4710:	90 91 33 01 	lds	r25, 0x0133
	d = RxFifo.buff[i];
    4714:	e2 e3       	ldi	r30, 0x32	; 50
    4716:	f1 e0       	ldi	r31, 0x01	; 1
    4718:	df 01       	movw	r26, r30
    471a:	a9 0f       	add	r26, r25
    471c:	b1 1d       	adc	r27, r1
    471e:	13 96       	adiw	r26, 0x03	; 3
    4720:	8c 91       	ld	r24, X
    4722:	13 97       	sbiw	r26, 0x03	; 3
	cli();
    4724:	f8 94       	cli
	RxFifo.ct--;
    4726:	22 81       	ldd	r18, Z+2	; 0x02
    4728:	21 50       	subi	r18, 0x01	; 1
    472a:	22 83       	std	Z+2, r18	; 0x02
	sei();
    472c:	78 94       	sei
	RxFifo.ri = (i + 1) % sizeof RxFifo.buff;
    472e:	9f 5f       	subi	r25, 0xFF	; 255
    4730:	9f 73       	andi	r25, 0x3F	; 63
    4732:	90 93 33 01 	sts	0x0133, r25

	return d;
}
    4736:	08 95       	ret

00004738 <uart_put>:
void uart_put (uint8_t d)
{
	uint8_t i;


	while (TxFifo.ct >= sizeof TxFifo.buff) ;
    4738:	e7 e7       	ldi	r30, 0x77	; 119
    473a:	f1 e0       	ldi	r31, 0x01	; 1
    473c:	90 81       	ld	r25, Z
    473e:	90 34       	cpi	r25, 0x40	; 64
    4740:	e8 f7       	brcc	.-6      	; 0x473c <uart_put+0x4>
	i = TxFifo.wi;
    4742:	90 91 75 01 	lds	r25, 0x0175
	TxFifo.buff[i] = d;
    4746:	e9 2f       	mov	r30, r25
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	eb 58       	subi	r30, 0x8B	; 139
    474c:	fe 4f       	sbci	r31, 0xFE	; 254
    474e:	83 83       	std	Z+3, r24	; 0x03
	cli();
    4750:	f8 94       	cli
	TxFifo.ct++;
    4752:	80 91 77 01 	lds	r24, 0x0177
    4756:	8f 5f       	subi	r24, 0xFF	; 255
    4758:	80 93 77 01 	sts	0x0177, r24
	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0) | _BV(UDRIE0);
    475c:	88 eb       	ldi	r24, 0xB8	; 184
    475e:	80 93 c1 00 	sts	0x00C1, r24
	sei();
    4762:	78 94       	sei
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    4764:	9f 5f       	subi	r25, 0xFF	; 255
    4766:	9f 73       	andi	r25, 0x3F	; 63
    4768:	90 93 75 01 	sts	0x0175, r25
}
    476c:	08 95       	ret

0000476e <__vector_20>:


/* UART RXC interrupt */

ISR(USART0_RX_vect)
{
    476e:	1f 92       	push	r1
    4770:	0f 92       	push	r0
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	0f 92       	push	r0
    4776:	0b b6       	in	r0, 0x3b	; 59
    4778:	0f 92       	push	r0
    477a:	11 24       	eor	r1, r1
    477c:	8f 93       	push	r24
    477e:	9f 93       	push	r25
    4780:	af 93       	push	r26
    4782:	bf 93       	push	r27
    4784:	ef 93       	push	r30
    4786:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    4788:	90 91 c6 00 	lds	r25, 0x00C6
	n = RxFifo.ct;
    478c:	80 91 34 01 	lds	r24, 0x0134
	if (n < sizeof RxFifo.buff) {
    4790:	80 34       	cpi	r24, 0x40	; 64
    4792:	70 f4       	brcc	.+28     	; 0x47b0 <__vector_20+0x42>
		RxFifo.ct = ++n;
    4794:	8f 5f       	subi	r24, 0xFF	; 255
    4796:	80 93 34 01 	sts	0x0134, r24
		i = RxFifo.wi;
    479a:	e2 e3       	ldi	r30, 0x32	; 50
    479c:	f1 e0       	ldi	r31, 0x01	; 1
    479e:	80 81       	ld	r24, Z
		RxFifo.buff[i] = d;
    47a0:	df 01       	movw	r26, r30
    47a2:	a8 0f       	add	r26, r24
    47a4:	b1 1d       	adc	r27, r1
    47a6:	13 96       	adiw	r26, 0x03	; 3
    47a8:	9c 93       	st	X, r25
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    47aa:	8f 5f       	subi	r24, 0xFF	; 255
    47ac:	8f 73       	andi	r24, 0x3F	; 63
    47ae:	80 83       	st	Z, r24
	}
}
    47b0:	ff 91       	pop	r31
    47b2:	ef 91       	pop	r30
    47b4:	bf 91       	pop	r27
    47b6:	af 91       	pop	r26
    47b8:	9f 91       	pop	r25
    47ba:	8f 91       	pop	r24
    47bc:	0f 90       	pop	r0
    47be:	0b be       	out	0x3b, r0	; 59
    47c0:	0f 90       	pop	r0
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	0f 90       	pop	r0
    47c6:	1f 90       	pop	r1
    47c8:	18 95       	reti

000047ca <__vector_21>:


/* UART UDRE interrupt */

ISR(USART0_UDRE_vect)
{
    47ca:	1f 92       	push	r1
    47cc:	0f 92       	push	r0
    47ce:	0f b6       	in	r0, 0x3f	; 63
    47d0:	0f 92       	push	r0
    47d2:	0b b6       	in	r0, 0x3b	; 59
    47d4:	0f 92       	push	r0
    47d6:	11 24       	eor	r1, r1
    47d8:	2f 93       	push	r18
    47da:	3f 93       	push	r19
    47dc:	8f 93       	push	r24
    47de:	9f 93       	push	r25
    47e0:	af 93       	push	r26
    47e2:	bf 93       	push	r27
    47e4:	ef 93       	push	r30
    47e6:	ff 93       	push	r31
	uint8_t n, i;


	n = TxFifo.ct;
    47e8:	80 91 77 01 	lds	r24, 0x0177
	if (n) {
    47ec:	88 23       	and	r24, r24
    47ee:	b1 f0       	breq	.+44     	; 0x481c <__vector_21+0x52>
		TxFifo.ct = --n;
    47f0:	28 2f       	mov	r18, r24
    47f2:	21 50       	subi	r18, 0x01	; 1
    47f4:	87 e7       	ldi	r24, 0x77	; 119
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	20 93 77 01 	sts	0x0177, r18
		i = TxFifo.ri;
    47fc:	fc 01       	movw	r30, r24
    47fe:	32 91       	ld	r19, -Z
		UDR0 = TxFifo.buff[i];
    4800:	02 97       	sbiw	r24, 0x02	; 2
    4802:	dc 01       	movw	r26, r24
    4804:	a3 0f       	add	r26, r19
    4806:	b1 1d       	adc	r27, r1
    4808:	13 96       	adiw	r26, 0x03	; 3
    480a:	8c 91       	ld	r24, X
    480c:	13 97       	sbiw	r26, 0x03	; 3
    480e:	80 93 c6 00 	sts	0x00C6, r24
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    4812:	3f 5f       	subi	r19, 0xFF	; 255
    4814:	3f 73       	andi	r19, 0x3F	; 63
    4816:	30 83       	st	Z, r19
	}
	if (n == 0) UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
    4818:	22 23       	and	r18, r18
    481a:	19 f4       	brne	.+6      	; 0x4822 <__vector_21+0x58>
    481c:	88 e9       	ldi	r24, 0x98	; 152
    481e:	80 93 c1 00 	sts	0x00C1, r24
}
    4822:	ff 91       	pop	r31
    4824:	ef 91       	pop	r30
    4826:	bf 91       	pop	r27
    4828:	af 91       	pop	r26
    482a:	9f 91       	pop	r25
    482c:	8f 91       	pop	r24
    482e:	3f 91       	pop	r19
    4830:	2f 91       	pop	r18
    4832:	0f 90       	pop	r0
    4834:	0b be       	out	0x3b, r0	; 59
    4836:	0f 90       	pop	r0
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	0f 90       	pop	r0
    483c:	1f 90       	pop	r1
    483e:	18 95       	reti

00004840 <__mulsi3>:
    4840:	62 9f       	mul	r22, r18
    4842:	d0 01       	movw	r26, r0
    4844:	73 9f       	mul	r23, r19
    4846:	f0 01       	movw	r30, r0
    4848:	82 9f       	mul	r24, r18
    484a:	e0 0d       	add	r30, r0
    484c:	f1 1d       	adc	r31, r1
    484e:	64 9f       	mul	r22, r20
    4850:	e0 0d       	add	r30, r0
    4852:	f1 1d       	adc	r31, r1
    4854:	92 9f       	mul	r25, r18
    4856:	f0 0d       	add	r31, r0
    4858:	83 9f       	mul	r24, r19
    485a:	f0 0d       	add	r31, r0
    485c:	74 9f       	mul	r23, r20
    485e:	f0 0d       	add	r31, r0
    4860:	65 9f       	mul	r22, r21
    4862:	f0 0d       	add	r31, r0
    4864:	99 27       	eor	r25, r25
    4866:	72 9f       	mul	r23, r18
    4868:	b0 0d       	add	r27, r0
    486a:	e1 1d       	adc	r30, r1
    486c:	f9 1f       	adc	r31, r25
    486e:	63 9f       	mul	r22, r19
    4870:	b0 0d       	add	r27, r0
    4872:	e1 1d       	adc	r30, r1
    4874:	f9 1f       	adc	r31, r25
    4876:	bd 01       	movw	r22, r26
    4878:	cf 01       	movw	r24, r30
    487a:	11 24       	eor	r1, r1
    487c:	08 95       	ret

0000487e <__udivmodsi4>:
    487e:	a1 e2       	ldi	r26, 0x21	; 33
    4880:	1a 2e       	mov	r1, r26
    4882:	aa 1b       	sub	r26, r26
    4884:	bb 1b       	sub	r27, r27
    4886:	fd 01       	movw	r30, r26
    4888:	0d c0       	rjmp	.+26     	; 0x48a4 <__udivmodsi4_ep>

0000488a <__udivmodsi4_loop>:
    488a:	aa 1f       	adc	r26, r26
    488c:	bb 1f       	adc	r27, r27
    488e:	ee 1f       	adc	r30, r30
    4890:	ff 1f       	adc	r31, r31
    4892:	a2 17       	cp	r26, r18
    4894:	b3 07       	cpc	r27, r19
    4896:	e4 07       	cpc	r30, r20
    4898:	f5 07       	cpc	r31, r21
    489a:	20 f0       	brcs	.+8      	; 0x48a4 <__udivmodsi4_ep>
    489c:	a2 1b       	sub	r26, r18
    489e:	b3 0b       	sbc	r27, r19
    48a0:	e4 0b       	sbc	r30, r20
    48a2:	f5 0b       	sbc	r31, r21

000048a4 <__udivmodsi4_ep>:
    48a4:	66 1f       	adc	r22, r22
    48a6:	77 1f       	adc	r23, r23
    48a8:	88 1f       	adc	r24, r24
    48aa:	99 1f       	adc	r25, r25
    48ac:	1a 94       	dec	r1
    48ae:	69 f7       	brne	.-38     	; 0x488a <__udivmodsi4_loop>
    48b0:	60 95       	com	r22
    48b2:	70 95       	com	r23
    48b4:	80 95       	com	r24
    48b6:	90 95       	com	r25
    48b8:	9b 01       	movw	r18, r22
    48ba:	ac 01       	movw	r20, r24
    48bc:	bd 01       	movw	r22, r26
    48be:	cf 01       	movw	r24, r30
    48c0:	08 95       	ret

000048c2 <_exit>:
    48c2:	f8 94       	cli

000048c4 <__stop_program>:
    48c4:	ff cf       	rjmp	.-2      	; 0x48c4 <__stop_program>
